{
  "address": "0x9EC14ADAA1d71cde3Db4053801927b26740471c9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tOLP",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oTAP",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tapOFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentTokenBeneficiary",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "cumulative",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "averageMagnitude",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalParticipants",
          "type": "uint256"
        }
      ],
      "name": "AMLDivergence",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract ERC20",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oTapTokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ExerciseOption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ExitPosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "extractedTAP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epochTAPValuation",
          "type": "uint256"
        }
      ],
      "name": "NewEpoch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sglAssetID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDeposited",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "sglAssetID",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lockTime",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lockDuration",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct LockPosition",
          "name": "lock",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "discount",
          "type": "uint256"
        }
      ],
      "name": "Participate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ERC20",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IOracle",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "oracleData",
          "type": "bytes"
        }
      ],
      "name": "SetPaymentToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IOracle",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "oracleData",
          "type": "bytes"
        }
      ],
      "name": "SetTapOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_paymentTokens",
          "type": "address[]"
        }
      ],
      "name": "collectPaymentTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochTAPValuation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_oTAPTokenID",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tapAmount",
          "type": "uint256"
        }
      ],
      "name": "exerciseOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_oTAPTokenID",
          "type": "uint256"
        }
      ],
      "name": "exitPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_oTAPTokenID",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tapAmount",
          "type": "uint256"
        }
      ],
      "name": "getOTCDealDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eligibleTapAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paymentTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastEpochUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oTAP",
      "outputs": [
        {
          "internalType": "contract OTAP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oTAPBrokerClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "oTAPCalls",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "participants",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasVotingPower",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "averageMagnitude",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "divergenceForce",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tOLPTokenID",
          "type": "uint256"
        }
      ],
      "name": "participate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "oTAPTokenID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentTokenBeneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "paymentTokens",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "oracleData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "contract IOracle",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_oracleData",
          "type": "bytes"
        }
      ],
      "name": "setPaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentTokenBeneficiary",
          "type": "address"
        }
      ],
      "name": "setPaymentTokenBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOracle",
          "name": "_tapOracle",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_tapOracleData",
          "type": "bytes"
        }
      ],
      "name": "setTapOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "singularityGauges",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tOLP",
      "outputs": [
        {
          "internalType": "contract TapiocaOptionLiquidityProvision",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tapOFT",
      "outputs": [
        {
          "internalType": "contract TapOFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tapOracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tapOracleData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "twAML",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalParticipants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "averageMagnitude",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDeposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumulative",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1f3134708e0862324af147659647db95db273f227ce05447bacc0cd622926d00",
  "receipt": {
    "to": null,
    "from": "0xEAF9f533871B07B151883908B4Fb6eeF4b51A95F",
    "contractAddress": "0x9EC14ADAA1d71cde3Db4053801927b26740471c9",
    "transactionIndex": 1,
    "gasUsed": "5880515",
    "logsBloom": "0x
    "blockHash": "0x458c9fcfe4903a9f7e3539cf8bdcb708bb5c817f117e9dc7af3d3e391565135d",
    "transactionHash": "0x1f3134708e0862324af147659647db95db273f227ce05447bacc0cd622926d00",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 9992522,
        "transactionHash": "0x1f3134708e0862324af147659647db95db273f227ce05447bacc0cd622926d00",
        "address": "0x9EC14ADAA1d71cde3Db4053801927b26740471c9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000eaf9f533871b07b151883908b4fb6eef4b51a95f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x458c9fcfe4903a9f7e3539cf8bdcb708bb5c817f117e9dc7af3d3e391565135d"
      }
    ],
    "blockNumber": 9992522,
    "cumulativeGasUsed": "5880515",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6d984d86e8E2112462F4Ce9D851190aE129C0F39",
    "0x4364aef7C6f644bb0e719784F1A35100beAee6Db",
    "0x76174d787894C091AF447EA5f299E9DB5c7f9664",
    "0xEAF9f533871B07B151883908B4Fb6eeF4b51A95F"
  ],
  "numDeployments": 1,
  "solcInputHash": "7a69be71d4ab19fff3e09bca4fb26b62",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tOLP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oTAP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tapOFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentTokenBeneficiary\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cumulative\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"averageMagnitude\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"}],\"name\":\"AMLDivergence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ERC20\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oTapTokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExerciseOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExitPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extractedTAP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochTAPValuation\",\"type\":\"uint256\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sglAssetID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"sglAssetID\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockDuration\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct LockPosition\",\"name\":\"lock\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"Participate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"oracleData\",\"type\":\"bytes\"}],\"name\":\"SetPaymentToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"oracleData\",\"type\":\"bytes\"}],\"name\":\"SetTapOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_paymentTokens\",\"type\":\"address[]\"}],\"name\":\"collectPaymentTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochTAPValuation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oTAPTokenID\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tapAmount\",\"type\":\"uint256\"}],\"name\":\"exerciseOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oTAPTokenID\",\"type\":\"uint256\"}],\"name\":\"exitPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oTAPTokenID\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tapAmount\",\"type\":\"uint256\"}],\"name\":\"getOTCDealDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eligibleTapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oTAP\",\"outputs\":[{\"internalType\":\"contract OTAP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oTAPBrokerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oTAPCalls\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasVotingPower\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"averageMagnitude\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"divergenceForce\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tOLPTokenID\",\"type\":\"uint256\"}],\"name\":\"participate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oTAPTokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentTokenBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paymentTokens\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"oracleData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_oracleData\",\"type\":\"bytes\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentTokenBeneficiary\",\"type\":\"address\"}],\"name\":\"setPaymentTokenBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"_tapOracle\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_tapOracleData\",\"type\":\"bytes\"}],\"name\":\"setTapOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"singularityGauges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tOLP\",\"outputs\":[{\"internalType\":\"contract TapiocaOptionLiquidityProvision\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tapOFT\",\"outputs\":[{\"internalType\":\"contract TapOFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tapOracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tapOracleData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"twAML\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageMagnitude\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulative\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectPaymentTokens(address[])\":{\"params\":{\"_paymentTokens\":\"The payment tokens to collect\"}},\"exerciseOption(uint256,address,uint256)\":{\"params\":{\"_oTAPTokenID\":\"tokenId of the oTAP position, position must be active\",\"_paymentToken\":\"Address of the payment token to use, must be whitelisted\",\"_tapAmount\":\"Amount of TAP to exercise. If 0, the full amount is exercised\"}},\"exitPosition(uint256)\":{\"params\":{\"_oTAPTokenID\":\"The tokenId of the oTAP position\"}},\"getOTCDealDetails(uint256,address,uint256)\":{\"params\":{\"_oTAPTokenID\":\"The oTAP token ID\",\"_paymentToken\":\"The payment token\",\"_tapAmount\":\"The amount of TAP to be exchanged. If 0 it will use the full amount of TAP eligible for the deal\"},\"returns\":{\"eligibleTapAmount\":\"The amount of TAP eligible for the deal\",\"paymentTokenAmount\":\"The amount of payment tokens required for the deal\"}},\"participate(uint256)\":{\"params\":{\"_tOLPTokenID\":\"The tokenId of the tOLP position\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"setPaymentToken(address,address,bytes)\":{\"details\":\"set the oracle to address(0) to deactivate, expect the same decimal precision as TAP oracle\"},\"setPaymentTokenBeneficiary(address)\":{\"params\":{\"_paymentTokenBeneficiary\":\"The new payment token beneficiary\"}},\"setTapOracle(address,bytes)\":{\"params\":{\"_tapOracle\":\"The new TapOFT Oracle address\",\"_tapOracleData\":\"The new TapOFT Oracle data\"}},\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"collectPaymentTokens(address[])\":{\"notice\":\"Collect the payment tokens from the OTC deals\"},\"constructor\":{\"notice\":\"=====-------======\"},\"exerciseOption(uint256,address,uint256)\":{\"notice\":\"Exercise an oTAP position\"},\"exitPosition(uint256)\":{\"notice\":\"Exit a twAML participation and delete the voting power if existing\"},\"getOTCDealDetails(uint256,address,uint256)\":{\"notice\":\"Returns the details of an OTC deal for a given oTAP token ID and a payment token.         The oracle uses the last peeked value, and not the latest one, so the payment amount may be different.\"},\"newEpoch()\":{\"notice\":\"Start a new epoch, extract TAP from the TapOFT contract,         emit it to the active singularities and get the price of TAP for the epoch.\"},\"oTAPBrokerClaim()\":{\"notice\":\"Claim the Broker role of the oTAP contract\"},\"participate(uint256)\":{\"notice\":\"Participate in twAMl voting and mint an oTAP position\"},\"setPaymentToken(address,address,bytes)\":{\"notice\":\"Activate or deactivate a payment token\"},\"setPaymentTokenBeneficiary(address)\":{\"notice\":\"Set the payment token beneficiary\"},\"setTapOracle(address,bytes)\":{\"notice\":\"Set the TapOFT Oracle address and data\"},\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"},\"twAML(uint256)\":{\"notice\":\"===== TWAML ======\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/options/mocks/TapiocaOptionBrokerMock.sol\":\"TapiocaOptionBrokerMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@boringcrypto/boring-solidity/contracts/BoringOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Simplified by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x5c95af9d26812f279c232d8908c3e2e4ab5054ec1a76275589be4b40857a281c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /// @notice Get the latest exchange rate.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return success if no valid (recent) rate is available, return false else true.\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function get(bytes calldata data) external returns (bool success, uint256 rate);\\n\\n    /// @notice Check the last exchange rate without any state changes.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return success if no valid (recent) rate is available, return false else true.\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function peek(bytes calldata data) external view returns (bool success, uint256 rate);\\n\\n    /// @notice Check the current spot exchange rate without any state changes. For oracles like TWAP this will be different from peek().\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\\n\\n    /// @notice Returns a human readable (short) name about this oracle.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return (string) A human readable symbol name about this oracle.\\n    function symbol(bytes calldata data) external view returns (string memory);\\n\\n    /// @notice Returns a human readable name about this oracle.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return (string) A human readable name about this oracle.\\n    function name(bytes calldata data) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x1a78dffb37b3f6a3577bf08f8d5ab4200224d864179e6ab8aa73f08f01eb6a0d\",\"license\":\"MIT\"},\"contracts/interfaces/IYieldBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title TokenType\\n/// @author BoringCrypto (@Boring_Crypto)\\n/// @notice The YieldBox can hold different types of tokens:\\n/// Native: These are ERC1155 tokens native to YieldBox.\\n///     Protocols using YieldBox should use these is possible when simple token creation is needed.\\n/// ERC20: ERC20 tokens (including rebasing tokens) can be added to the YieldBox.\\n/// ERC1155: ERC1155 tokens are also supported.\\n///     This can also be used to add YieldBox Native tokens to strategies since they are ERC1155 tokens.\\nenum TokenType {\\n    Native,\\n    ERC20,\\n    ERC721,\\n    ERC1155,\\n    None\\n}\\n\\ninterface IYieldBox {\\n    function wrappedNative() external view returns (address wrappedNative);\\n\\n    function balanceOf(address to, uint256 assetId) external view returns (uint256 balance);\\n\\n    function deposit(\\n        TokenType tokenType,\\n        address contractAddress,\\n        address strategy,\\n        uint256 tokenId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function assets(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            TokenType tokenType,\\n            address contractAddress,\\n            address strategy,\\n            uint256 tokenId\\n        );\\n\\n    function nativeTokens(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory symbol,\\n            uint8 decimals\\n        );\\n\\n    function owner(uint256 assetId) external view returns (address owner);\\n\\n    function totalSupply(uint256 assetId) external view returns (uint256 totalSupply);\\n\\n    function depositAsset(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function withdraw(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 assetId,\\n        uint256 share\\n    ) external;\\n\\n    function batchTransfer(\\n        address from,\\n        address to,\\n        uint256[] calldata assetIds_,\\n        uint256[] calldata shares_\\n    ) external;\\n\\n    function transferMultiple(\\n        address from,\\n        address[] calldata tos,\\n        uint256 assetId,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    function toShare(\\n        uint256 assetId,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    function toAmount(\\n        uint256 assetId,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x2ab9578ecaa3962e72229a157f6f445ad89b722c72856b9b32beb359cdc8418c\",\"license\":\"MIT\"},\"contracts/options/TapiocaOptionLiquidityProvision.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol';\\nimport '@boringcrypto/boring-solidity/contracts/BoringOwnable.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport '../interfaces/IYieldBox.sol';\\n\\n//\\n//                 .(%%%%%%%%%%%%*       *\\n//             #%%%%%%%%%%%%%%%%%%%%*  ####*\\n//          #%%%%%%%%%%%%%%%%%%%%%#  /####\\n//       ,%%%%%%%%%%%%%%%%%%%%%%%   ####.  %\\n//                                #####\\n//                              #####\\n//   #####%#####              *####*  ####%#####*\\n//  (#########(              #####     ##########.\\n//  ##########             #####.      .##########\\n//                       ,####/\\n//                      #####\\n//  %%%%%%%%%%        (####.           *%%%%%%%%%#\\n//  .%%%%%%%%%%     *####(            .%%%%%%%%%%\\n//   *%%%%%%%%%%   #####             #%%%%%%%%%%\\n//               (####.\\n//      ,((((  ,####(          /(((((((((((((\\n//        *,  #####  ,(((((((((((((((((((((\\n//          (####   ((((((((((((((((((((/\\n//         ####*  (((((((((((((((((((\\n//                     ,**//*,.\\n\\nstruct LockPosition {\\n    uint128 sglAssetID; // Singularity market YieldBox asset ID\\n    uint128 amount; // amount of tOLR tokens locked.\\n    uint128 lockTime; // time when the tokens were locked\\n    uint128 lockDuration; // duration of the lock\\n}\\n\\nstruct SingularityPool {\\n    uint256 sglAssetID; // Singularity market YieldBox asset ID\\n    uint256 totalDeposited; // total amount of tOLR tokens deposited, used for pool share calculation\\n    uint256 poolWeight; // Pool weight to calculate emission\\n}\\n\\ncontract TapiocaOptionLiquidityProvision is ERC721, Pausable, BoringOwnable {\\n    uint256 public tokenCounter; // Counter for token IDs\\n    mapping(uint256 => LockPosition) public lockPositions; // TokenID => LockPosition\\n\\n    IYieldBox public immutable yieldBox;\\n\\n    // Singularity market address => SingularityPool (YieldBox Asset ID is 0 if not active)\\n    mapping(IERC20 => SingularityPool) public activeSingularities;\\n    mapping(uint256 => IERC20) public sglAssetIDToAddress; // Singularity market YieldBox asset ID => Singularity market address\\n    uint256[] public singularities; // Array of active singularity asset IDs\\n\\n    uint256 public totalSingularityPoolWeights; // Total weight of all active singularity pools\\n\\n    constructor(address _yieldBox) ERC721('TapiocaOptionLiquidityProvision', 'tOLP') {\\n        yieldBox = IYieldBox(_yieldBox);\\n    }\\n\\n    // ==========\\n    //   EVENTS\\n    // ==========\\n    event Mint(address indexed to, uint128 indexed sglAssetID, LockPosition lockPosition);\\n    event Burn(address indexed to, uint128 indexed sglAssetID, LockPosition lockPosition);\\n    event UpdateTotalSingularityPoolWeights(uint256 totalSingularityPoolWeights);\\n    event SetSGLPoolWeight(address sgl, uint256 poolWeight);\\n    event RegisterSingularity(address sgl, uint256 assetID);\\n    event UnregisterSingularity(address sgl, uint256 assetID);\\n\\n    // ===============\\n    //    MODIFIERS\\n    // ===============\\n    modifier updateTotalSGLPoolWeights() {\\n        _;\\n        totalSingularityPoolWeights = _computeSGLPoolWeights();\\n        emit UpdateTotalSingularityPoolWeights(totalSingularityPoolWeights);\\n    }\\n\\n    // =========\\n    //    READ\\n    // =========\\n    /// @notice Returns the lock position of a given tOLP NFT and if it's active\\n    /// @param _tokenId tOLP NFT ID\\n    function getLock(uint256 _tokenId) external view returns (bool, LockPosition memory) {\\n        LockPosition memory lockPosition = lockPositions[_tokenId];\\n\\n        return (_isPositionActive(_tokenId), lockPosition);\\n    }\\n\\n    /// @notice Returns the active singularity YieldBox ID markets\\n    function getSingularities() external view returns (uint256[] memory) {\\n        return singularities;\\n    }\\n\\n    /// @notice Returns the active singularity pool data\\n    function getSingularityPools() external view returns (SingularityPool[] memory) {\\n        uint256 len = singularities.length;\\n\\n        SingularityPool[] memory pools = new SingularityPool[](len);\\n        unchecked {\\n            for (uint256 i = 0; i < len; ++i) {\\n                pools[i] = activeSingularities[sglAssetIDToAddress[singularities[i]]];\\n            }\\n        }\\n        return pools;\\n    }\\n\\n    /// @notice Returns the total amount of locked tokens for a given singularity market\\n    function getTotalPoolDeposited(uint256 _sglAssetId) external view returns (uint256) {\\n        return activeSingularities[sglAssetIDToAddress[_sglAssetId]].totalDeposited;\\n    }\\n\\n    function isApprovedOrOwner(address _spender, uint256 _tokenId) external view returns (bool) {\\n        return _isApprovedOrOwner(_spender, _tokenId);\\n    }\\n\\n    // ==========\\n    //    WRITE\\n    // ==========\\n\\n    /// @notice Locks tOLR tokens for a given duration\\n    /// @param _from Address to transfer the SGL tokens from\\n    /// @param _to Address to mint the tOLP NFT to\\n    /// @param _singularity Singularity market address\\n    /// @param _lockDuration Duration of the lock\\n    /// @param _amount Amount of tOLR tokens to lock\\n    /// @return tokenId The ID of the minted NFT\\n    function lock(\\n        address _from,\\n        address _to,\\n        IERC20 _singularity,\\n        uint128 _lockDuration,\\n        uint128 _amount\\n    ) external returns (uint256 tokenId) {\\n        require(_lockDuration > 0, 'tOLP: lock duration must be > 0');\\n        require(_amount > 0, 'tOLP: amount must be > 0');\\n\\n        uint256 sglAssetID = activeSingularities[_singularity].sglAssetID;\\n        require(sglAssetID > 0, 'tOLP: singularity not active');\\n\\n        // Transfer the Singularity position to this contract\\n        uint256 sharesIn = yieldBox.toShare(sglAssetID, _amount, false);\\n\\n        yieldBox.transfer(_from, address(this), sglAssetID, sharesIn);\\n        activeSingularities[_singularity].totalDeposited += _amount;\\n\\n        // Mint the tOLP NFT position\\n        tokenId = ++tokenCounter;\\n        _safeMint(_to, tokenId);\\n\\n        // Create the lock position\\n        LockPosition storage lockPosition = lockPositions[tokenId];\\n        lockPosition.lockTime = uint128(block.timestamp);\\n        lockPosition.sglAssetID = uint128(sglAssetID);\\n        lockPosition.lockDuration = _lockDuration;\\n        lockPosition.amount = _amount;\\n\\n        emit Mint(_to, uint128(sglAssetID), lockPosition);\\n    }\\n\\n    /// @notice Unlocks tOLP tokens\\n    /// @param _tokenId ID of the position to unlock\\n    /// @param _singularity Singularity market address\\n    /// @param _to Address to send the tokens to\\n    function unlock(\\n        uint256 _tokenId,\\n        IERC20 _singularity,\\n        address _to\\n    ) external returns (uint256 sharesOut) {\\n        require(_exists(_tokenId), 'tOLP: Expired position');\\n\\n        LockPosition memory lockPosition = lockPositions[_tokenId];\\n        require(block.timestamp >= lockPosition.lockTime + lockPosition.lockDuration, 'tOLP: Lock not expired');\\n        require(activeSingularities[_singularity].sglAssetID == lockPosition.sglAssetID, 'tOLP: Invalid singularity');\\n\\n        require(_isApprovedOrOwner(msg.sender, _tokenId), 'tOLP: not owner nor approved');\\n\\n        _burn(_tokenId);\\n        delete lockPositions[_tokenId];\\n\\n        // Transfer the tOLR tokens back to the owner\\n        sharesOut = yieldBox.toShare(lockPosition.sglAssetID, lockPosition.amount, false);\\n\\n        yieldBox.transfer(address(this), _to, lockPosition.sglAssetID, sharesOut);\\n        activeSingularities[_singularity].totalDeposited -= lockPosition.amount;\\n\\n        emit Burn(_to, lockPosition.sglAssetID, lockPosition);\\n    }\\n\\n    // =========\\n    //   OWNER\\n    // =========\\n\\n    /// @notice Sets the pool weight of a given singularity market\\n    /// @param singularity Singularity market address\\n    /// @param weight Weight of the pool\\n    function setSGLPoolWEight(IERC20 singularity, uint256 weight) external onlyOwner updateTotalSGLPoolWeights {\\n        require(activeSingularities[singularity].sglAssetID > 0, 'tOLP: not registered');\\n        activeSingularities[singularity].poolWeight = weight;\\n\\n        emit SetSGLPoolWeight(address(singularity), weight);\\n    }\\n\\n    /// @notice Registers a new singularity market\\n    /// @param singularity Singularity market address\\n    /// @param assetID YieldBox asset ID of the singularity market\\n    /// @param weight Weight of the pool\\n    function registerSingularity(\\n        IERC20 singularity,\\n        uint256 assetID,\\n        uint256 weight\\n    ) external onlyOwner updateTotalSGLPoolWeights {\\n        require(assetID > 0, 'tOLP: invalid asset ID');\\n        require(activeSingularities[singularity].sglAssetID == 0, 'tOLP: already registered');\\n\\n        activeSingularities[singularity].sglAssetID = assetID;\\n        activeSingularities[singularity].poolWeight = weight > 0 ? weight : 1;\\n        sglAssetIDToAddress[assetID] = singularity;\\n        singularities.push(assetID);\\n\\n        emit RegisterSingularity(address(singularity), assetID);\\n    }\\n\\n    /// @notice Un-registers a singularity market\\n    /// @param singularity Singularity market address\\n    function unregisterSingularity(IERC20 singularity) external onlyOwner updateTotalSGLPoolWeights {\\n        uint256 sglAssetID = activeSingularities[singularity].sglAssetID;\\n        require(sglAssetID > 0, 'tOLP: not registered');\\n\\n        unchecked {\\n            uint256[] memory _singularities = singularities;\\n            uint256 sglLength = _singularities.length;\\n            uint256 sglLastIndex = sglLength - 1;\\n\\n            for (uint256 i = 0; i < sglLength; i++) {\\n                // If in the middle, delete data and move last element to the deleted position, then pop\\n                if (_singularities[i] == sglAssetID && i < sglLastIndex) {\\n                    delete activeSingularities[singularity];\\n                    delete sglAssetIDToAddress[sglAssetID];\\n                    delete singularities[i];\\n\\n                    singularities[i] = _singularities[sglLastIndex];\\n                    singularities.pop();\\n\\n                    break;\\n                } else {\\n                    // If last element, just pop\\n                    delete activeSingularities[singularity];\\n                    delete sglAssetIDToAddress[sglAssetID];\\n                    delete singularities[sglLastIndex];\\n                    singularities.pop();\\n                }\\n            }\\n        }\\n\\n        emit UnregisterSingularity(address(singularity), sglAssetID);\\n    }\\n\\n    // =========\\n    //  INTERNAL\\n    // =========\\n\\n    /// @notice Compute the total pool weight of all active singularity markets\\n    function _computeSGLPoolWeights() internal view returns (uint256) {\\n        uint256 total;\\n        uint256 len = singularities.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            total += activeSingularities[sglAssetIDToAddress[singularities[i]]].poolWeight;\\n        }\\n\\n        return total;\\n    }\\n\\n    /// @notice Checks if the lock position is still active\\n    function _isPositionActive(uint256 tokenId) internal view returns (bool) {\\n        LockPosition memory lockPosition = lockPositions[tokenId];\\n\\n        return (lockPosition.lockTime + lockPosition.lockDuration) >= block.timestamp;\\n    }\\n\\n    /// @notice ERC1155 compliance\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return bytes4(keccak256('onERC1155Received(address,address,uint256,uint256,bytes)'));\\n    }\\n}\\n\",\"keccak256\":\"0x9b5d45ce53e74a38745f327c446ce75b1bc73ccc8d42675d82c29d39a7fbd922\",\"license\":\"UNLICENSED\"},\"contracts/options/mocks/TapiocaOptionBrokerMock.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '@boringcrypto/boring-solidity/contracts/BoringOwnable.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\n\\nimport '../TapiocaOptionLiquidityProvision.sol';\\nimport '../../interfaces/IOracle.sol';\\nimport '../../tokens/TapOFT.sol';\\nimport '../twAML.sol';\\nimport '../oTAP.sol';\\n\\n// ********************************************************************************\\n// *******************************,                 ,******************************\\n// *************************                               ************************\\n// *********************                                       ********************\\n// *****************,                     @@@                     ,****************\\n// ***************                        @@@                        **************\\n// *************                    (@@@@@@@@@@@@@(                    ************\\n// ***********                   @@@@@@@@#@@@#@@@@@@@@                   **********\\n// **********                 .@@@@@      @@@      @@@@@.                 *********\\n// *********                 @@@@@        @@@        @@@@@                 ********\\n// ********                 @@@@@&        @@@         /@@@@                 *******\\n// *******                 &@@@@@@        @@@          #@@@&                 ******\\n// ******,                 @@@@@@@@,      @@@           @@@@                 ,*****\\n// ******                 #@@@&@@@@@@@@#  @@@           &@@@(                 *****\\n// ******                 %@@@%   @@@@@@@@@@@@@@@(      (@@@%                 *****\\n// ******                 %@@@%          %@@@@@@@@@@@@. %@@@#                 *****\\n// ******.                /@@@@           @@@    *@@@@@@@@@@*                .*****\\n// *******                 @@@@           @@@       &@@@@@@@                 ******\\n// *******                 /@@@@          @@@        @@@@@@/                .******\\n// ********                 %&&&&         @@@        &&&&&#                 *******\\n// *********                 *&&&&#       @@@       &&&&&,                 ********\\n// **********.                 %&&&&&,    &&&    ,&&&&&%                 .*********\\n// ************                   &&&&&&&&&&&&&&&&&&&                   ***********\\n// **************                     .#&&&&&&&%.                     *************\\n// ****************                       %%%                       ***************\\n// *******************                    %%%                    ******************\\n// **********************                                    .*********************\\n// ***************************                           **************************\\n// ************************************..     ..***********************************\\n\\nstruct Participation {\\n    bool hasVotingPower;\\n    uint256 averageMagnitude;\\n    bool divergenceForce; // 0 negative, 1 positive\\n}\\n\\nstruct TWAMLPool {\\n    uint256 totalParticipants;\\n    uint256 averageMagnitude;\\n    uint256 totalDeposited;\\n    uint256 cumulative;\\n}\\n\\nstruct PaymentTokenOracle {\\n    IOracle oracle;\\n    bytes oracleData;\\n}\\n\\ncontract TapiocaOptionBrokerMock is Pausable, BoringOwnable, TWAML {\\n    TapiocaOptionLiquidityProvision public immutable tOLP;\\n    bytes public tapOracleData;\\n    TapOFT public immutable tapOFT;\\n    OTAP public immutable oTAP;\\n    IOracle public tapOracle;\\n\\n    uint256 public lastEpochUpdate; // timestamp of the last epoch update\\n    uint256 public epochTAPValuation; // TAP price for the current epoch\\n    uint256 public epoch; // Represents the number of weeks since the start of the contract\\n\\n    mapping(uint256 => Participation) public participants; // tOLPTokenID => Participation\\n    mapping(uint256 => mapping(uint256 => bool)) public oTAPCalls; // oTAPTokenID => epoch => hasExercised\\n\\n    mapping(uint256 => mapping(uint256 => uint256)) public singularityGauges; // epoch => sglAssetId => availableTAP\\n\\n    mapping(ERC20 => PaymentTokenOracle) public paymentTokens; // Token address => PaymentTokenOracle\\n    address public paymentTokenBeneficiary; // Where to collect the payment tokens\\n\\n    /// ===== TWAML ======\\n    mapping(uint256 => TWAMLPool) public twAML; // sglAssetId => twAMLPool\\n\\n    uint256 constant MIN_WEIGHT_FACTOR = 10; // In BPS, 0.1%\\n    uint256 constant dMAX = 50 * 1e4; // 5% - 50% discount\\n    uint256 constant dMIN = 5 * 1e4;\\n    uint256 constant WEEK = 7 days;\\n\\n    /// =====-------======\\n    constructor(\\n        address _tOLP,\\n        address _oTAP,\\n        address _tapOFT,\\n        address _paymentTokenBeneficiary\\n    ) {\\n        paymentTokenBeneficiary = _paymentTokenBeneficiary;\\n        tOLP = TapiocaOptionLiquidityProvision(_tOLP);\\n        tapOFT = TapOFT(_tapOFT);\\n        oTAP = OTAP(_oTAP);\\n    }\\n\\n    // ==========\\n    //   EVENTS\\n    // ==========\\n    event Participate(uint256 indexed epoch, uint256 indexed sglAssetID, uint256 totalDeposited, LockPosition lock, uint256 discount);\\n    event AMLDivergence(uint256 indexed epoch, uint256 indexed cumulative, uint256 indexed averageMagnitude, uint256 totalParticipants);\\n    event ExerciseOption(uint256 indexed epoch, address indexed to, ERC20 indexed paymentToken, uint256 oTapTokenID, uint256 amount);\\n    event NewEpoch(uint256 indexed epoch, uint256 extractedTAP, uint256 epochTAPValuation);\\n    event ExitPosition(uint256 indexed epoch, uint256 indexed tokenId, uint256 amount);\\n    event SetPaymentToken(ERC20 paymentToken, IOracle oracle, bytes oracleData);\\n    event SetTapOracle(IOracle oracle, bytes oracleData);\\n\\n    // ==========\\n    //    READ\\n    // ==========\\n\\n    /// @notice Returns the details of an OTC deal for a given oTAP token ID and a payment token.\\n    ///         The oracle uses the last peeked value, and not the latest one, so the payment amount may be different.\\n    /// @param _oTAPTokenID The oTAP token ID\\n    /// @param _paymentToken The payment token\\n    /// @param _tapAmount The amount of TAP to be exchanged. If 0 it will use the full amount of TAP eligible for the deal\\n    /// @return eligibleTapAmount The amount of TAP eligible for the deal\\n    /// @return paymentTokenAmount The amount of payment tokens required for the deal\\n    function getOTCDealDetails(\\n        uint256 _oTAPTokenID,\\n        ERC20 _paymentToken,\\n        uint256 _tapAmount\\n    ) external view returns (uint256 eligibleTapAmount, uint256 paymentTokenAmount) {\\n        // Load data\\n        (, TapOption memory oTAPPosition) = oTAP.attributes(_oTAPTokenID);\\n        (bool isPositionActive, LockPosition memory tOLPLockPosition) = tOLP.getLock(oTAPPosition.tOLP);\\n\\n        uint256 cachedEpoch = epoch;\\n\\n        PaymentTokenOracle memory paymentTokenOracle = paymentTokens[_paymentToken];\\n\\n        // Check requirements\\n        require(paymentTokenOracle.oracle != IOracle(address(0)), 'TapiocaOptionBroker: Payment token not supported');\\n        require(oTAPCalls[_oTAPTokenID][cachedEpoch] == false, 'TapiocaOptionBroker: Already exercised');\\n        require(isPositionActive, 'TapiocaOptionBroker: Option expired');\\n\\n        // Get eligible OTC amount\\n        uint256 gaugeTotalForEpoch = singularityGauges[cachedEpoch][tOLPLockPosition.sglAssetID];\\n        eligibleTapAmount = muldiv(tOLPLockPosition.amount, gaugeTotalForEpoch, tOLP.getTotalPoolDeposited(tOLPLockPosition.sglAssetID));\\n\\n        // Get TAP valuation\\n        uint256 otcAmountInUSD = (_tapAmount == 0 ? eligibleTapAmount : _tapAmount) * epochTAPValuation; // Divided by TAP decimals\\n        // Get payment token valuation\\n        (, uint256 paymentTokenValuation) = paymentTokenOracle.oracle.peek(paymentTokenOracle.oracleData);\\n        // Get payment token amount\\n        paymentTokenAmount = _getDiscountedPaymentAmount(\\n            otcAmountInUSD,\\n            paymentTokenValuation,\\n            oTAPPosition.discount,\\n            _paymentToken.decimals()\\n        );\\n    }\\n\\n    // ===========\\n    //    WRITE\\n    // ===========\\n\\n    /// @notice Participate in twAMl voting and mint an oTAP position\\n    /// @param _tOLPTokenID The tokenId of the tOLP position\\n    function participate(uint256 _tOLPTokenID) external returns (uint256 oTAPTokenID) {\\n        // Compute option parameters\\n        (bool isPositionActive, LockPosition memory lock) = tOLP.getLock(_tOLPTokenID);\\n        require(isPositionActive, 'TapiocaOptionBroker: Position is not active');\\n\\n        TWAMLPool memory pool = twAML[lock.sglAssetID];\\n\\n        require(tOLP.isApprovedOrOwner(msg.sender, _tOLPTokenID), 'TapiocaOptionBroker: Not approved or owner');\\n\\n        // Transfer tOLP position to this contract\\n        tOLP.transferFrom(msg.sender, address(this), _tOLPTokenID);\\n\\n        uint256 magnitude = computeMagnitude(uint256(lock.lockDuration), pool.cumulative);\\n        bool divergenceForce;\\n        uint256 target = computeTarget(dMIN, dMAX, magnitude, pool.cumulative);\\n\\n        // Participate in twAMl voting\\n        bool hasVotingPower = lock.amount >= computeMinWeight(pool.totalDeposited, MIN_WEIGHT_FACTOR);\\n        if (hasVotingPower) {\\n            pool.totalParticipants++; // Save participation\\n            pool.averageMagnitude = (pool.averageMagnitude + magnitude) / pool.totalParticipants; // compute new average magnitude\\n\\n            // Compute and save new cumulative\\n            divergenceForce = lock.lockDuration > pool.cumulative;\\n            pool.cumulative = divergenceForce ? pool.cumulative + pool.averageMagnitude : pool.cumulative - pool.averageMagnitude;\\n\\n            // Save new weight\\n            pool.totalDeposited += lock.amount;\\n\\n            twAML[lock.sglAssetID] = pool; // Save twAML participation\\n            emit AMLDivergence(epoch, pool.cumulative, pool.averageMagnitude, pool.totalParticipants); // Register new voting power event\\n        }\\n        // Save twAML participation\\n        participants[_tOLPTokenID] = Participation(hasVotingPower, pool.averageMagnitude, divergenceForce);\\n\\n        // Mint oTAP position\\n        oTAPTokenID = oTAP.mint(msg.sender, lock.lockTime + lock.lockDuration, uint128(target), _tOLPTokenID);\\n        emit Participate(epoch, lock.sglAssetID, pool.totalDeposited, lock, target);\\n    }\\n\\n    /// @notice Exit a twAML participation and delete the voting power if existing\\n    /// @param _oTAPTokenID The tokenId of the oTAP position\\n    function exitPosition(uint256 _oTAPTokenID) external {\\n        require(oTAP.exists(_oTAPTokenID), 'TapiocaOptionBroker: oTAP position does not exist');\\n\\n        // Load data\\n        (, TapOption memory oTAPPosition) = oTAP.attributes(_oTAPTokenID);\\n        (, LockPosition memory lock) = tOLP.getLock(oTAPPosition.tOLP);\\n\\n        require(oTAP.isApprovedOrOwner(msg.sender, _oTAPTokenID), 'TapiocaOptionBroker: Not approved or owner');\\n        require(block.timestamp >= lock.lockTime + lock.lockDuration, 'TapiocaOptionBroker: Lock not expired');\\n\\n        Participation memory participation = participants[oTAPPosition.tOLP];\\n\\n        // Remove participation\\n        if (participation.hasVotingPower) {\\n            TWAMLPool memory pool = twAML[lock.sglAssetID];\\n\\n            pool.cumulative = participation.divergenceForce\\n                ? pool.cumulative - participation.averageMagnitude\\n                : pool.cumulative + participation.averageMagnitude;\\n            pool.totalDeposited -= lock.amount;\\n            pool.totalParticipants--;\\n\\n            twAML[lock.sglAssetID] = pool; // Save twAML exit\\n            emit AMLDivergence(epoch, pool.cumulative, pool.averageMagnitude, pool.totalParticipants); // Register new voting power event\\n        }\\n\\n        // Delete participation and burn oTAP position\\n        delete participants[oTAPPosition.tOLP];\\n        oTAP.burn(_oTAPTokenID);\\n\\n        // Transfer position back to user\\n        tOLP.transferFrom(address(this), msg.sender, oTAPPosition.tOLP);\\n\\n        emit ExitPosition(epoch, oTAPPosition.tOLP, lock.amount);\\n    }\\n\\n    /// @notice Exercise an oTAP position\\n    /// @param _oTAPTokenID tokenId of the oTAP position, position must be active\\n    /// @param _paymentToken Address of the payment token to use, must be whitelisted\\n    /// @param _tapAmount Amount of TAP to exercise. If 0, the full amount is exercised\\n    function exerciseOption(\\n        uint256 _oTAPTokenID,\\n        ERC20 _paymentToken,\\n        uint256 _tapAmount\\n    ) external {\\n        // Load data\\n        (, TapOption memory oTAPPosition) = oTAP.attributes(_oTAPTokenID);\\n        (bool isPositionActive, LockPosition memory tOLPLockPosition) = tOLP.getLock(oTAPPosition.tOLP);\\n\\n        uint256 cachedEpoch = epoch;\\n\\n        PaymentTokenOracle memory paymentTokenOracle = paymentTokens[_paymentToken];\\n\\n        // Check requirements\\n        require(paymentTokenOracle.oracle != IOracle(address(0)), 'TapiocaOptionBroker: Payment token not supported');\\n        require(oTAP.isApprovedOrOwner(msg.sender, _oTAPTokenID), 'TapiocaOptionBroker: Not approved or owner');\\n        require(oTAPCalls[_oTAPTokenID][cachedEpoch] == false, 'TapiocaOptionBroker: Already exercised');\\n        require(isPositionActive, 'TapiocaOptionBroker: Option expired');\\n\\n        oTAPCalls[_oTAPTokenID][cachedEpoch] = true; // Save exercise call of the option for this epoch\\n\\n        // Get eligible OTC amount\\n        uint256 gaugeTotalForEpoch = singularityGauges[cachedEpoch][tOLPLockPosition.sglAssetID];\\n        uint256 otcTapAmount = muldiv(tOLPLockPosition.amount, gaugeTotalForEpoch, tOLP.getTotalPoolDeposited(tOLPLockPosition.sglAssetID));\\n        require(_tapAmount <= otcTapAmount, 'TapiocaOptionBroker: Amount exceeds eligible TAP');\\n        uint256 chosenAmount = _tapAmount == 0 ? otcTapAmount : _tapAmount;\\n\\n        // Finalize the deal\\n        _processOTCDeal(_paymentToken, paymentTokenOracle, chosenAmount, oTAPPosition.discount);\\n\\n        emit ExerciseOption(cachedEpoch, msg.sender, _paymentToken, _oTAPTokenID, chosenAmount);\\n    }\\n\\n    /// @notice Start a new epoch, extract TAP from the TapOFT contract,\\n    ///         emit it to the active singularities and get the price of TAP for the epoch.\\n    function newEpoch() external {\\n        require(block.timestamp >= lastEpochUpdate + WEEK, 'TapiocaOptionBroker: too soon');\\n        uint256[] memory singularities = tOLP.getSingularities();\\n        require(singularities.length > 0, 'TapiocaOptionBroker: No active singularities');\\n\\n        // Update epoch info\\n        lastEpochUpdate = block.timestamp;\\n        epoch++;\\n\\n        // Extract TAP\\n        tapOFT.emitForWeek();\\n        uint256 epochTAP = tapOFT.balanceOf(address(tapOFT));\\n        _emitToGauges(epochTAP);\\n\\n        // Get epoch TAP valuation\\n        (, epochTAPValuation) = tapOracle.get(tapOracleData);\\n        emit NewEpoch(epoch, epochTAP, epochTAPValuation);\\n    }\\n\\n    /// @notice Claim the Broker role of the oTAP contract\\n    function oTAPBrokerClaim() external {\\n        oTAP.brokerClaim();\\n    }\\n\\n    // =========\\n    //   OWNER\\n    // =========\\n\\n    /// @notice Set the TapOFT Oracle address and data\\n    /// @param _tapOracle The new TapOFT Oracle address\\n    /// @param _tapOracleData The new TapOFT Oracle data\\n    function setTapOracle(IOracle _tapOracle, bytes calldata _tapOracleData) external onlyOwner {\\n        tapOracle = _tapOracle;\\n        tapOracleData = _tapOracleData;\\n\\n        emit SetTapOracle(_tapOracle, _tapOracleData);\\n    }\\n\\n    /// @notice Activate or deactivate a payment token\\n    /// @dev set the oracle to address(0) to deactivate, expect the same decimal precision as TAP oracle\\n    function setPaymentToken(\\n        ERC20 _paymentToken,\\n        IOracle _oracle,\\n        bytes calldata _oracleData\\n    ) external onlyOwner {\\n        paymentTokens[_paymentToken].oracle = _oracle;\\n        paymentTokens[_paymentToken].oracleData = _oracleData;\\n\\n        emit SetPaymentToken(_paymentToken, _oracle, _oracleData);\\n    }\\n\\n    /// @notice Set the payment token beneficiary\\n    /// @param _paymentTokenBeneficiary The new payment token beneficiary\\n    function setPaymentTokenBeneficiary(address _paymentTokenBeneficiary) external onlyOwner {\\n        paymentTokenBeneficiary = _paymentTokenBeneficiary;\\n    }\\n\\n    /// @notice Collect the payment tokens from the OTC deals\\n    /// @param _paymentTokens The payment tokens to collect\\n    function collectPaymentTokens(address[] calldata _paymentTokens) external onlyOwner {\\n        require(paymentTokenBeneficiary != address(0), 'TapiocaOptionBroker: Payment token beneficiary not set');\\n        uint256 len = _paymentTokens.length;\\n\\n        unchecked {\\n            for (uint256 i = 0; i < len; ++i) {\\n                ERC20 paymentToken = ERC20(_paymentTokens[i]);\\n                paymentToken.transfer(paymentTokenBeneficiary, paymentToken.balanceOf(address(this)));\\n            }\\n        }\\n    }\\n\\n    // ============\\n    //   INTERNAL\\n    // ============\\n\\n    /// @notice Process the OTC deal, transfer the payment token to the broker and the TAP amount to the user\\n    /// @param _paymentToken The payment token\\n    /// @param _paymentTokenOracle The oracle of the payment token\\n    /// @param tapAmount The amount of TAP that the user has to receive\\n    /// @param discount The discount that the user has to apply to the OTC deal\\n    function _processOTCDeal(\\n        ERC20 _paymentToken,\\n        PaymentTokenOracle memory _paymentTokenOracle,\\n        uint256 tapAmount,\\n        uint256 discount\\n    ) internal {\\n        // Get TAP valuation\\n        uint256 otcAmountInUSD = tapAmount * epochTAPValuation;\\n\\n        // Get payment token valuation\\n        (, uint256 paymentTokenValuation) = _paymentTokenOracle.oracle.get(_paymentTokenOracle.oracleData);\\n\\n        // Calculate payment amount and initiate the transfers\\n        uint256 discountedPaymentAmount = _getDiscountedPaymentAmount(\\n            otcAmountInUSD,\\n            paymentTokenValuation,\\n            discount,\\n            _paymentToken.decimals()\\n        );\\n\\n        _paymentToken.transferFrom(msg.sender, address(this), discountedPaymentAmount);\\n        tapOFT.extractTAP(msg.sender, tapAmount);\\n    }\\n\\n    /// @notice Computes the discounted payment amount for a given OTC amount in USD\\n    /// @param _otcAmountInUSD The OTC amount in USD, 8 decimals\\n    /// @param _paymentTokenValuation The payment token valuation in USD, 8 decimals\\n    /// @param _discount The discount in BPS\\n    /// @param _paymentTokenDecimals The payment token decimals\\n    /// @return paymentAmount The discounted payment amount\\n    function _getDiscountedPaymentAmount(\\n        uint256 _otcAmountInUSD,\\n        uint256 _paymentTokenValuation,\\n        uint256 _discount,\\n        uint256 _paymentTokenDecimals\\n    ) internal pure returns (uint256 paymentAmount) {\\n        // Calculate payment amount\\n        uint256 rawPaymentAmount = _otcAmountInUSD / _paymentTokenValuation;\\n        paymentAmount = rawPaymentAmount - muldiv(rawPaymentAmount, _discount, 1e6); // 1e4 is discount decimals, 100 is discount percentage\\n        paymentAmount = paymentAmount / (10**(18 - _paymentTokenDecimals));\\n    }\\n\\n    /// @notice Emit TAP to the gauges equitably\\n    function _emitToGauges(uint256 _epochTAP) internal {\\n        SingularityPool[] memory sglPools = tOLP.getSingularityPools();\\n        uint256 totalWeights = tOLP.totalSingularityPoolWeights();\\n\\n        uint256 len = sglPools.length;\\n        unchecked {\\n            for (uint256 i = 0; i < len; ++i) {\\n                uint256 currentPoolWeight = sglPools[i].poolWeight;\\n                uint256 quotaPerSingularity = muldiv(currentPoolWeight, _epochTAP, totalWeights);\\n                singularityGauges[epoch][sglPools[i].sglAssetID] = quotaPerSingularity;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd4a37e7f1073af7eb89acca7c81f87fd0f241b96533915af09d3a5e00fc8269d\",\"license\":\"UNLICENSED\"},\"contracts/options/oTAP.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n//\\n//                 .(%%%%%%%%%%%%*       *\\n//             #%%%%%%%%%%%%%%%%%%%%*  ####*\\n//          #%%%%%%%%%%%%%%%%%%%%%#  /####\\n//       ,%%%%%%%%%%%%%%%%%%%%%%%   ####.  %\\n//                                #####\\n//                              #####\\n//   #####%#####              *####*  ####%#####*\\n//  (#########(              #####     ##########.\\n//  ##########             #####.      .##########\\n//                       ,####/\\n//                      #####\\n//  %%%%%%%%%%        (####.           *%%%%%%%%%#\\n//  .%%%%%%%%%%     *####(            .%%%%%%%%%%\\n//   *%%%%%%%%%%   #####             #%%%%%%%%%%\\n//               (####.\\n//      ,((((  ,####(          /(((((((((((((\\n//        *,  #####  ,(((((((((((((((((((((\\n//          (####   ((((((((((((((((((((/\\n//         ####*  (((((((((((((((((((\\n//                     ,**//*,.\\n\\nstruct TapOption {\\n    uint128 expiry; // timestamp, as once one wise man said, the sun will go dark before this overflows\\n    uint128 discount; // discount in basis points\\n    uint256 tOLP; // tOLP token ID\\n}\\n\\ncontract OTAP is ERC721 {\\n    uint256 public mintedOTAP; // total number of OTAP minted\\n    uint256 public mintedTAP; // total number of TAP minted\\n    address public broker; // address of the onlyBroker\\n\\n    mapping(uint256 => TapOption) public options; // tokenId => Option\\n    mapping(uint256 => string) public tokenURIs; // tokenId => tokenURI\\n\\n    constructor() ERC721('Option TAP', 'oTAP') {}\\n\\n    modifier onlyBroker() {\\n        require(msg.sender == broker, 'OTAP: only onlyBroker');\\n        _;\\n    }\\n\\n    // ==========\\n    //   EVENTS\\n    // ==========\\n    event Mint(address indexed to, uint256 indexed tokenId, TapOption option);\\n    event Burn(address indexed from, uint256 indexed tokenId, TapOption option);\\n\\n    // =========\\n    //    READ\\n    // =========\\n\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        return tokenURIs[_tokenId];\\n    }\\n\\n    function isApprovedOrOwner(address _spender, uint256 _tokenId) external view returns (bool) {\\n        return _isApprovedOrOwner(_spender, _tokenId);\\n    }\\n\\n    /// @notice Return the owner of the tokenId and the attributes of the option.\\n    function attributes(uint256 _tokenId) external view returns (address, TapOption memory) {\\n        return (ownerOf(_tokenId), options[_tokenId]);\\n    }\\n\\n    /// @notice Check if a token exists\\n    function exists(uint256 _tokenId) external view returns (bool) {\\n        return _exists(_tokenId);\\n    }\\n\\n    // ==========\\n    //    WRITE\\n    // ==========\\n\\n    function setTokenURI(uint256 _tokenId, string calldata _tokenURI) external {\\n        require(_isApprovedOrOwner(msg.sender, _tokenId), 'OTAP: only approved or owner');\\n        tokenURIs[_tokenId] = _tokenURI;\\n    }\\n\\n    /// @notice mints an OTAP\\n    /// @param _to address to mint to\\n    /// @param _expiry timestamp\\n    /// @param _discount TAP discount in basis points\\n    /// @param _tOLP tOLP token ID\\n    function mint(\\n        address _to,\\n        uint128 _expiry,\\n        uint128 _discount,\\n        uint256 _tOLP\\n    ) external onlyBroker returns (uint256 tokenId) {\\n        tokenId = ++mintedOTAP;\\n        _safeMint(_to, tokenId);\\n\\n        TapOption storage option = options[tokenId];\\n        option.expiry = _expiry;\\n        option.discount = _discount;\\n        option.tOLP = _tOLP;\\n\\n        emit Mint(_to, tokenId, option);\\n    }\\n\\n    /// @notice burns an OTAP\\n    /// @param _tokenId tokenId to burn\\n    function burn(uint256 _tokenId) external {\\n        require(_isApprovedOrOwner(msg.sender, _tokenId), 'OTAP: only approved or owner');\\n        _burn(_tokenId);\\n\\n        emit Burn(msg.sender, _tokenId, options[_tokenId]);\\n    }\\n\\n    /// @notice tOB claim\\n    function brokerClaim() external {\\n        require(broker == address(0), 'OTAP: only once');\\n        broker = msg.sender;\\n    }\\n}\\n\",\"keccak256\":\"0xbcb3d14db9b6e06defbcaa193fabc438b2c0f2d1912906feba4f6b16225172b3\",\"license\":\"UNLICENSED\"},\"contracts/options/twAML.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nabstract contract TWAML {\\n    /// @notice Compute the minimum weight to participate in the twAML voting mechanism\\n    /// @param _totalWeight The total weight of the twAML system\\n    /// @param _minWeightFactor The minimum weight factor in BPS\\n    function computeMinWeight(uint256 _totalWeight, uint256 _minWeightFactor) internal pure returns (uint256) {\\n        uint256 mul = (_totalWeight * _minWeightFactor);\\n        return mul >= 1e4 ? mul / 1e4 : _totalWeight;\\n    }\\n\\n    function computeMagnitude(uint256 _timeWeight, uint256 _cumulative) internal pure returns (uint256) {\\n        return sqrt(_timeWeight * _timeWeight + _cumulative * _cumulative) - _cumulative;\\n    }\\n\\n    function computeTarget(\\n        uint256 _dMin,\\n        uint256 _dMax,\\n        uint256 _magnitude,\\n        uint256 _cumulative\\n    ) internal pure returns (uint256) {\\n        if (_cumulative == 0) {\\n            return _dMax;\\n        }\\n        uint256 target = (_magnitude * _dMax) / _cumulative;\\n        target = target > _dMax ? _dMax : target < _dMin ? _dMin : target;\\n        return target;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    // https://xn--2-umb.com/21/muldiv/\\n    function muldiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // Handle division by zero\\n        require(denominator > 0);\\n\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Short circuit 256 by 256 division\\n        // This saves gas when a * b is small, at the cost of making the\\n        // large case a bit more expensive. Depending on your use case you\\n        // may want to remove this short circuit and always go through the\\n        // 512 bit path.\\n        if (prod1 == 0) {\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Handle overflow, the result must be < 2**256\\n        require(prod1 < denominator);\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        // Note mulmod(_, _, 0) == 0\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1 unless denominator is zero, then twos is zero.\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        // If denominator is zero the inverse starts with 2\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson itteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n        // If denominator is zero, inv is now 128\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x8bfc97e818a4704921008d5185dfbfb23be3f33d3ae4c71562b6f09e9c53f2c5\",\"license\":\"UNLICENSED\"},\"contracts/tokens/TapOFT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport 'tapioca-sdk/dist/contracts/interfaces/ILayerZeroEndpoint.sol';\\nimport 'tapioca-sdk/dist/contracts/token/oft/v2/OFTV2.sol';\\nimport 'tapioca-sdk/dist/contracts/libraries/LzLib.sol';\\n\\n/*\\n\\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\_____________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____        \\n _\\\\///////\\\\\\\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/////\\\\\\\\\\\\///______/\\\\\\\\\\\\///\\\\\\\\\\\\________/\\\\\\\\\\\\////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__       \\n  _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_      \\n   _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\/\\\\\\\\\\\\______/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_     \\n    _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\/////////________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \\n     _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_________________\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\//\\\\\\\\\\\\____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_   \\n      _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_________________\\\\/\\\\\\\\\\\\______\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\_____\\\\///\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_  \\n       _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\///\\\\\\\\\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_ \\n        _______\\\\///________\\\\///________\\\\///__\\\\///______________\\\\///////////_______\\\\/////_____________\\\\/////////__\\\\///________\\\\///__\\n\\n*/\\n\\n/// @title Tapioca OFT token\\n/// @notice OFT compatible TAP token\\n/// @dev Latest size: 17.663  KiB\\n/// @dev Emissions E(x)= E(x-1) - E(x-1) * D with E being total supply a x week, and D the initial decay rate\\ncontract TapOFT is OFTV2 {\\n    using ExcessivelySafeCall for address;\\n    using BytesLib for bytes;\\n\\n    // ==========\\n    // *DATA*\\n    // ==========\\n\\n    //  Allocation:\\n    // =========\\n    // * DSO: 56.5m\\n    // * DAO: 10m\\n    // * Contributors: 15m\\n    // * Investors: 11m\\n    // * LBP: 5m\\n    // * Airdrop: 2.5m\\n    // == 100M ==\\n    uint256 public constant INITIAL_SUPPLY = 43_500_000 * 1e18; // Everything minus DSO\\n    uint256 public dso_supply = 56_500_000 * 1e18;\\n\\n    /// @notice the a parameter used in the emission function;\\n    uint256 constant decay_rate = 8800000000000000; // 0.88%\\n    uint256 constant DECAY_RATE_DECIMAL = 1e18;\\n\\n    /// @notice seconds in a week\\n    uint256 public constant WEEK = 604800;\\n\\n    /// @notice starts time for emissions\\n    /// @dev initialized in the constructor with block.timestamp\\n    uint256 public immutable emissionsStartTime;\\n\\n    /// @notice returns the amount of emitted TAP for a specific week\\n    /// @dev week is computed using (timestamp - emissionStartTime) / WEEK\\n    mapping(uint256 => uint256) public emissionForWeek;\\n\\n    /// @notice returns the amount minted for a specific week\\n    /// @dev week is computed using (timestamp - emissionStartTime) / WEEK\\n    mapping(uint256 => uint256) public mintedInWeek;\\n\\n    /// @notice returns the minter address\\n    address public minter;\\n\\n    /// @notice LayerZero governance chain identifier\\n    uint256 public governanceChainIdentifier;\\n\\n    /// @notice returns the pause state of the contract\\n    bool public paused;\\n\\n    /// @notice returns the Conservator address\\n    address public conservator;\\n    // ==========\\n    // *EVENTS*\\n    // ==========\\n    /// @notice event emitted when a new minter is set\\n    event MinterUpdated(address indexed _old, address indexed _new);\\n    /// @notice event emitted when a new emission is called\\n    event Emitted(uint256 week, uint256 amount);\\n    /// @notice event emitted when new TAP is minted\\n    event Minted(address indexed _by, address indexed _to, uint256 _amount);\\n    /// @notice event emitted when new TAP is burned\\n    event Burned(address indexed _from, uint256 _amount);\\n    /// @notice event emitted when the governance chain identifier is updated\\n    event GovernanceChainIdentifierUpdated(uint256 _old, uint256 _new);\\n    /// @notice event emitted when pause state is changed\\n    event PausedUpdated(bool oldState, bool newState);\\n    /// @notice event emitted when Conservator is changed\\n    event ConservatorUpdated(address indexed old, address indexed _new);\\n\\n    modifier notPaused() {\\n        require(!paused, 'TAP: paused');\\n        _;\\n    }\\n\\n    // ==========\\n    // * METHODS *\\n    // ==========\\n    /// @notice Creates a new TAP OFT type token\\n    /// @dev The initial supply of 100M is not minted here as we have the wrap method\\n    /// @param _lzEndpoint the layer zero address endpoint deployed on the current chain\\n    /// @param _contributors address of the  contributors\\n    /// @param _investors address of investors\\n    /// @param _lbp address of the LBP\\n    /// @param _dao address of the DAO\\n    /// @param _airdrop address of the airdrop contract\\n    /// @param _governanceChainId LayerZero governance chain identifier\\n    constructor(\\n        address _lzEndpoint,\\n        address _contributors,\\n        address _investors,\\n        address _lbp,\\n        address _dao,\\n        address _airdrop,\\n        uint16 _governanceChainId\\n    ) OFTV2('Tapioca', 'TAP', 8, _lzEndpoint) {\\n        require(_lzEndpoint != address(0), 'LZ endpoint not valid');\\n        governanceChainIdentifier = _governanceChainId;\\n        if (_getChainId() == governanceChainIdentifier) {\\n            _mint(_contributors, 1e18 * 15_000_000);\\n            _mint(_investors, 1e18 * 11_000_000);\\n            _mint(_lbp, 1e18 * 5_000_000);\\n            _mint(_dao, 1e18 * 10_000_000);\\n            _mint(_airdrop, 1e18 * 2_500_000);\\n            require(totalSupply() == INITIAL_SUPPLY, 'initial supply not valid');\\n        }\\n        emissionsStartTime = block.timestamp;\\n\\n        conservator = msg.sender;\\n    }\\n\\n    ///-- Owner methods --\\n    /// @notice sets the governance chain identifier\\n    /// @param _identifier LayerZero chain identifier\\n    function setGovernanceChainIdentifier(uint256 _identifier) external onlyOwner {\\n        emit GovernanceChainIdentifierUpdated(governanceChainIdentifier, _identifier);\\n        governanceChainIdentifier = _identifier;\\n    }\\n\\n    /// @notice Set the Conservator address\\n    /// @dev Conservator can pause the contract\\n    /// @param _conservator The new address\\n    function setConservator(address _conservator) external onlyOwner {\\n        require(_conservator != address(0), 'TAP: address not valid');\\n        emit ConservatorUpdated(conservator, _conservator);\\n        conservator = _conservator;\\n    }\\n\\n    /// @notice updates the pause state of the contract\\n    /// @param val the new value\\n    function updatePause(bool val) external {\\n        require(msg.sender == conservator, 'TAP: unauthorized');\\n        require(val != paused, 'TAP: same state');\\n        emit PausedUpdated(paused, val);\\n        paused = val;\\n    }\\n\\n    /// @notice sets a new minter address\\n    /// @param _minter the new address\\n    function setMinter(address _minter) external onlyOwner {\\n        require(_minter != address(0), 'address not valid');\\n        emit MinterUpdated(minter, _minter);\\n        minter = _minter;\\n    }\\n\\n    //-- View methods --\\n    /// @notice returns token's decimals\\n    function decimals() public pure override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @notice Returns the current week given a timestamp\\n    function timestampToWeek(uint256 timestamp) external view returns (uint256) {\\n        if (timestamp == 0) {\\n            timestamp = block.timestamp;\\n        }\\n        if (timestamp < emissionsStartTime) return 0;\\n\\n        return _timestampToWeek(timestamp);\\n    }\\n\\n    /// @notice Returns the current week\\n    function getCurrentWeek() external view returns (uint256) {\\n        return _timestampToWeek(block.timestamp);\\n    }\\n\\n    /// @notice Returns the current week emission\\n    function getCurrentWeekEmission() external view returns (uint256) {\\n        return emissionForWeek[_timestampToWeek(block.timestamp)];\\n    }\\n\\n    ///-- Write methods --\\n    /// @notice Emit the TAP for the current week\\n    function emitForWeek() external notPaused returns (uint256) {\\n        require(_getChainId() == governanceChainIdentifier, 'chain not valid');\\n\\n        uint256 week = _timestampToWeek(block.timestamp);\\n        if (emissionForWeek[week] > 0) return 0;\\n\\n        // Update DSO supply from last minted emissions\\n        dso_supply -= mintedInWeek[week - 1];\\n\\n        // Compute unclaimed emission from last week and add it to the current week emission\\n        uint256 unclaimed = emissionForWeek[week - 1] - mintedInWeek[week - 1];\\n        uint256 emission = uint256(_computeEmission());\\n        emission += unclaimed;\\n        emissionForWeek[week] = emission;\\n\\n        emit Emitted(week, emission);\\n\\n        return emission;\\n    }\\n\\n    /// @notice extracts from the minted TAP\\n    /// @param _to Address to send the minted TAP to\\n    /// @param _amount TAP amount\\n    function extractTAP(address _to, uint256 _amount) external notPaused {\\n        require(msg.sender == minter, 'unauthorized');\\n        require(_amount > 0, 'amount not valid');\\n\\n        uint256 week = _timestampToWeek(block.timestamp);\\n        require(emissionForWeek[week] >= _amount, 'exceeds allowable amount');\\n        _mint(_to, _amount);\\n        mintedInWeek[week] += _amount;\\n        emit Minted(msg.sender, _to, _amount);\\n    }\\n\\n    /// @notice burns TAP\\n    /// @param _amount TAP amount\\n    function removeTAP(uint256 _amount) external notPaused {\\n        _burn(msg.sender, _amount);\\n        emit Burned(msg.sender, _amount);\\n    }\\n\\n    ///-- Internal methods --\\n    function _timestampToWeek(uint256 timestamp) internal view returns (uint256) {\\n        return ((timestamp - emissionsStartTime) / WEEK) + 1; // Starts at week 1\\n    }\\n\\n    ///-- Private methods --\\n    /// @notice Return the current chain ID.\\n    /// @dev Useful for testing.\\n    function _getChainId() private view returns (uint256) {\\n        return block.chainid;\\n    }\\n\\n    /// @notice returns the available emissions for a given supply\\n    function _computeEmission() internal view returns (uint256 result) {\\n        result = (dso_supply * decay_rate) / DECAY_RATE_DECIMAL;\\n    }\\n}\\n\",\"keccak256\":\"0x7b0e9107fbb350a91927ad9c17088f487010535b5bc4ae23fd5f6d8956a57950\",\"license\":\"UNLICENSED\"},\"tapioca-sdk/dist/contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xe9617a9f6db351b6ac4c9d5b1097798af59ad7f813e370e8cf69bb44addd8548\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0x909bf72002c91806f39a64172c12b4188219e8649deefbe8d862604d4f9d3faf\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xe3e50134e39aa3c0f916447d36367970c6e4df972d488b794227e0b052ce80d5\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/libraries/LzLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nlibrary LzLib {\\n    // LayerZero communication\\n    struct CallParams {\\n        address payable refundAddress;\\n        address zroPaymentAddress;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // Address type handling\\n\\n    struct AirdropParams {\\n        uint airdropAmount;\\n        bytes32 airdropAddress;\\n    }\\n\\n    function buildAdapterParams(LzLib.AirdropParams memory _airdropParams, uint _uaGasLimit) internal pure returns (bytes memory adapterParams) {\\n        if (_airdropParams.airdropAmount == 0 && _airdropParams.airdropAddress == bytes32(0x0)) {\\n            adapterParams = buildDefaultAdapterParams(_uaGasLimit);\\n        } else {\\n            adapterParams = buildAirdropAdapterParams(_uaGasLimit, _airdropParams);\\n        }\\n    }\\n\\n    // Build Adapter Params\\n    function buildDefaultAdapterParams(uint _uaGas) internal pure returns (bytes memory) {\\n        // txType 1\\n        // bytes  [2       32      ]\\n        // fields [txType  extraGas]\\n        return abi.encodePacked(uint16(1), _uaGas);\\n    }\\n\\n    function buildAirdropAdapterParams(uint _uaGas, AirdropParams memory _params) internal pure returns (bytes memory) {\\n        require(_params.airdropAmount > 0, \\\"Airdrop amount must be greater than 0\\\");\\n        require(_params.airdropAddress != bytes32(0x0), \\\"Airdrop address must be set\\\");\\n\\n        // txType 2\\n        // bytes  [2       32        32            bytes[]         ]\\n        // fields [txType  extraGas  dstNativeAmt  dstNativeAddress]\\n        return abi.encodePacked(uint16(2), _uaGas, _params.airdropAmount, _params.airdropAddress);\\n    }\\n\\n    function getGasLimit(bytes memory _adapterParams) internal pure returns (uint gasLimit) {\\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \\\"Invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    // Decode Adapter Params\\n    function decodeAdapterParams(bytes memory _adapterParams) internal pure returns (uint16 txType, uint uaGas, uint airdropAmount, address payable airdropAddress) {\\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \\\"Invalid adapterParams\\\");\\n        assembly {\\n            txType := mload(add(_adapterParams, 2))\\n            uaGas := mload(add(_adapterParams, 34))\\n        }\\n        require(txType == 1 || txType == 2, \\\"Unsupported txType\\\");\\n        require(uaGas > 0, \\\"Gas too low\\\");\\n\\n        if (txType == 2) {\\n            assembly {\\n                airdropAmount := mload(add(_adapterParams, 66))\\n                airdropAddress := mload(add(_adapterParams, 86))\\n            }\\n        }\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // Address type handling\\n    function bytes32ToAddress(bytes32 _bytes32Address) internal pure returns (address _address) {\\n        return address(uint160(uint(_bytes32Address)));\\n    }\\n\\n    function addressToBytes32(address _address) internal pure returns (bytes32 _bytes32Address) {\\n        return bytes32(uint(uint160(_address)));\\n    }\\n}\\n\",\"keccak256\":\"0xd7ed18db258ec3a628b0c5544eb14704180bfaed848014533ac90c2bd78d52aa\",\"license\":\"BUSL-1.1\"},\"tapioca-sdk/dist/contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"../interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../util/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    using BytesLib for bytes;\\n\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\n    uint constant public DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        _checkPayloadSize(_dstChainId, _payload.length);\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\n        if (payloadSizeLimit == 0) { // use default if not set\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\n        }\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_srcChainId] = _path;\\n        emit SetTrustedRemote(_srcChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\n        require(_minGas > 0, \\\"LzApp: invalid minGas\\\");\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    // if the size is 0, it means default size limit\\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xf7a97c79e0670912e51cfe74a06bf049718640ac764706250a903a63fec6e0b6\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LzApp.sol\\\";\\nimport \\\"../util/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzApp is LzApp {\\n    using ExcessivelySafeCall for address;\\n\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\\n        // try-catch all errors/exceptions\\n        if (!success) {\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\n    }\\n\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n}\\n\",\"keccak256\":\"0x2afd4980a5850f45f2c4d7ec44d77b292a51b80f847566479548f89572065311\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/token/oft/v2/BaseOFTV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OFTCoreV2.sol\\\";\\nimport \\\"./IOFTV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract BaseOFTV2 is OFTCoreV2, ERC165, IOFTV2 {\\n\\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) OFTCoreV2(_sharedDecimals, _lzEndpoint) {\\n    }\\n\\n    /************************************************************************\\n    * public functions\\n    ************************************************************************/\\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, LzCallParams calldata _callParams) public payable virtual override {\\n        _send(_from, _dstChainId, _toAddress, _amount, _callParams.refundAddress, _callParams.zroPaymentAddress, _callParams.adapterParams);\\n    }\\n\\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) public payable virtual override {\\n        _sendAndCall(_from, _dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _callParams.refundAddress, _callParams.zroPaymentAddress, _callParams.adapterParams);\\n    }\\n\\n    /************************************************************************\\n    * public view functions\\n    ************************************************************************/\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IOFTV2).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        return _estimateSendFee(_dstChainId, _toAddress, _amount, _useZro, _adapterParams);\\n    }\\n\\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        return _estimateSendAndCallFee(_dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _useZro, _adapterParams);\\n    }\\n\\n    function circulatingSupply() public view virtual override returns (uint);\\n\\n    function token() public view virtual override returns (address);\\n}\\n\",\"keccak256\":\"0xbf09a6b713f3553a46d19047d172c6524d5615625d1c8fb019fa741c806d52b3\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/token/oft/v2/ICommonOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface ICommonOFT is IERC165 {\\n\\n    struct LzCallParams {\\n        address payable refundAddress;\\n        address zroPaymentAddress;\\n        bytes adapterParams;\\n    }\\n\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1d034ba786436c1fce8057352c87373098bd1d8026b24c8fbc7be28636d0c15d\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/token/oft/v2/IOFTReceiverV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface IOFTReceiverV2 {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes32 _from, uint _amount, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0xf57e437ced3bc10bb333123bb49475dab47c7615b86401c4d872c29ad4928fd5\",\"license\":\"BUSL-1.1\"},\"tapioca-sdk/dist/contracts/token/oft/v2/IOFTV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ICommonOFT.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTV2 is ICommonOFT {\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, LzCallParams calldata _callParams) external payable;\\n\\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\\n}\\n\",\"keccak256\":\"0xb1d31f341715347d49db4e2c0de27c49bbd70b5b3d9b0adb1050b2b3a305ab87\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/token/oft/v2/OFTCoreV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../lzApp/NonblockingLzApp.sol\\\";\\nimport \\\"../../../util/ExcessivelySafeCall.sol\\\";\\nimport \\\"./ICommonOFT.sol\\\";\\nimport \\\"./IOFTReceiverV2.sol\\\";\\n\\nabstract contract OFTCoreV2 is NonblockingLzApp {\\n    using BytesLib for bytes;\\n    using ExcessivelySafeCall for address;\\n\\n    uint public constant NO_EXTRA_GAS = 0;\\n\\n    // packet type\\n    uint8 public constant PT_SEND = 0;\\n    uint8 public constant PT_SEND_AND_CALL = 1;\\n\\n    uint8 public immutable sharedDecimals;\\n\\n    bool public useCustomAdapterParams;\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bool))) public creditedPackets;\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes32 indexed _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n\\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\\n\\n    event NonContractAddress(address _address);\\n\\n    // _sharedDecimals should be the minimum decimals on all chains\\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {\\n        sharedDecimals = _sharedDecimals;\\n    }\\n\\n    /************************************************************************\\n    * public functions\\n    ************************************************************************/\\n    function callOnOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes32 _from, address _to, uint _amount, bytes calldata _payload, uint _gasForCall) public virtual {\\n        require(_msgSender() == address(this), \\\"OFTCore: caller must be OFTCore\\\");\\n\\n        // send\\n        _amount = _transferFrom(address(this), _to, _amount);\\n        emit ReceiveFromChain(_srcChainId, _to, _amount);\\n\\n        // call\\n        IOFTReceiverV2(_to).onOFTReceived{gas: _gasForCall}(_srcChainId, _srcAddress, _nonce, _from, _amount, _payload);\\n    }\\n\\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) public virtual onlyOwner {\\n        useCustomAdapterParams = _useCustomAdapterParams;\\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\\n    }\\n\\n    /************************************************************************\\n    * internal functions\\n    ************************************************************************/\\n    function _estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes memory _adapterParams) internal view virtual returns (uint nativeFee, uint zroFee) {\\n        // mock the payload for sendFrom()\\n        bytes memory payload = _encodeSendPayload(_toAddress, _ld2sd(_amount));\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    function _estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes memory _payload, uint64 _dstGasForCall, bool _useZro, bytes memory _adapterParams) internal view virtual returns (uint nativeFee, uint zroFee) {\\n        // mock the payload for sendAndCall()\\n        bytes memory payload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(_amount), _payload, _dstGasForCall);\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        uint8 packetType = _payload.toUint8(0);\\n\\n        if (packetType == PT_SEND) {\\n            _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\\n        } else if (packetType == PT_SEND_AND_CALL) {\\n            _sendAndCallAck(_srcChainId, _srcAddress, _nonce, _payload);\\n        } else {\\n            revert(\\\"OFTCore: unknown packet type\\\");\\n        }\\n    }\\n\\n    function _send(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual returns (uint amount) {\\n        _checkAdapterParams(_dstChainId, PT_SEND, _adapterParams, NO_EXTRA_GAS);\\n\\n        (amount,) = _removeDust(_amount);\\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount); // amount returned should not have dust\\n        require(amount > 0, \\\"OFTCore: amount too small\\\");\\n\\n        bytes memory lzPayload = _encodeSendPayload(_toAddress, _ld2sd(amount));\\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\\n\\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\\n    }\\n\\n    function _sendAck(uint16 _srcChainId, bytes memory, uint64, bytes memory _payload) internal virtual {\\n        (address to, uint64 amountSD) = _decodeSendPayload(_payload);\\n        if (to == address(0)) {\\n            to = address(0xdead);\\n        }\\n\\n        uint amount = _sd2ld(amountSD);\\n        amount = _creditTo(_srcChainId, to, amount);\\n\\n        emit ReceiveFromChain(_srcChainId, to, amount);\\n    }\\n\\n    function _sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes memory _payload, uint64 _dstGasForCall, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual returns (uint amount) {\\n        _checkAdapterParams(_dstChainId, PT_SEND_AND_CALL, _adapterParams, _dstGasForCall);\\n\\n        (amount,) = _removeDust(_amount);\\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount);\\n        require(amount > 0, \\\"OFTCore: amount too small\\\");\\n\\n        // encode the msg.sender into the payload instead of _from\\n        bytes memory lzPayload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(amount), _payload, _dstGasForCall);\\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\\n\\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\\n    }\\n\\n    function _sendAndCallAck(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual {\\n        (bytes32 from, address to, uint64 amountSD, bytes memory payloadForCall, uint64 gasForCall) = _decodeSendAndCallPayload(_payload);\\n\\n        bool credited = creditedPackets[_srcChainId][_srcAddress][_nonce];\\n        uint amount = _sd2ld(amountSD);\\n\\n        // credit to this contract first, and then transfer to receiver only if callOnOFTReceived() succeeds\\n        if (!credited) {\\n            amount = _creditTo(_srcChainId, address(this), amount);\\n            creditedPackets[_srcChainId][_srcAddress][_nonce] = true;\\n        }\\n\\n        if (!_isContract(to)) {\\n            emit NonContractAddress(to);\\n            return;\\n        }\\n\\n        // workaround for stack too deep\\n        uint16 srcChainId = _srcChainId;\\n        bytes memory srcAddress = _srcAddress;\\n        uint64 nonce = _nonce;\\n        bytes memory payload = _payload;\\n        bytes32 from_ = from;\\n        address to_ = to;\\n        uint amount_ = amount;\\n        bytes memory payloadForCall_ = payloadForCall;\\n\\n        // no gas limit for the call if retry\\n        uint gas = credited ? gasleft() : gasForCall;\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.callOnOFTReceived.selector, srcChainId, srcAddress, nonce, from_, to_, amount_, payloadForCall_, gas));\\n\\n        if (success) {\\n            bytes32 hash = keccak256(payload);\\n            emit CallOFTReceivedSuccess(srcChainId, srcAddress, nonce, hash);\\n        } else {\\n            // store the failed message into the nonblockingLzApp\\n            _storeFailedMessage(srcChainId, srcAddress, nonce, payload, reason);\\n        }\\n    }\\n\\n    function _isContract(address _account) internal view returns (bool) {\\n        return _account.code.length > 0;\\n    }\\n\\n    function _checkAdapterParams(uint16 _dstChainId, uint16 _pkType, bytes memory _adapterParams, uint _extraGas) internal virtual {\\n        if (useCustomAdapterParams) {\\n            _checkGasLimit(_dstChainId, _pkType, _adapterParams, _extraGas);\\n        } else {\\n            require(_adapterParams.length == 0, \\\"OFTCore: _adapterParams must be empty.\\\");\\n        }\\n    }\\n\\n    function _ld2sd(uint _amount) internal virtual view returns (uint64) {\\n        uint amountSD = _amount / _ld2sdRate();\\n        require(amountSD <= type(uint64).max, \\\"OFTCore: amountSD overflow\\\");\\n        return uint64(amountSD);\\n    }\\n\\n    function _sd2ld(uint64 _amountSD) internal virtual view returns (uint) {\\n        return _amountSD * _ld2sdRate();\\n    }\\n\\n    function _removeDust(uint _amount) internal virtual view returns (uint amountAfter, uint dust) {\\n        dust = _amount % _ld2sdRate();\\n        amountAfter = _amount - dust;\\n    }\\n\\n    function _encodeSendPayload(bytes32 _toAddress, uint64 _amountSD) internal virtual view returns (bytes memory) {\\n        return abi.encodePacked(PT_SEND, _toAddress, _amountSD);\\n    }\\n\\n    function _decodeSendPayload(bytes memory _payload) internal virtual view returns (address to, uint64 amountSD) {\\n        require(_payload.toUint8(0) == PT_SEND && _payload.length == 41, \\\"OFTCore: invalid payload\\\");\\n\\n        to = _payload.toAddress(13); // drop the first 12 bytes of bytes32\\n        amountSD = _payload.toUint64(33);\\n    }\\n\\n    function _encodeSendAndCallPayload(address _from, bytes32 _toAddress, uint64 _amountSD, bytes memory _payload, uint64 _dstGasForCall) internal virtual view returns (bytes memory) {\\n        return abi.encodePacked(\\n            PT_SEND_AND_CALL,\\n            _toAddress,\\n            _amountSD,\\n            _addressToBytes32(_from),\\n            _dstGasForCall,\\n            _payload\\n        );\\n    }\\n\\n    function _decodeSendAndCallPayload(bytes memory _payload) internal virtual view returns (bytes32 from, address to, uint64 amountSD, bytes memory payload, uint64 dstGasForCall) {\\n        require(_payload.toUint8(0) == PT_SEND_AND_CALL, \\\"OFTCore: invalid payload\\\");\\n\\n        to = _payload.toAddress(13); // drop the first 12 bytes of bytes32\\n        amountSD = _payload.toUint64(33);\\n        from = _payload.toBytes32(41);\\n        dstGasForCall = _payload.toUint64(73);\\n        payload = _payload.slice(81, _payload.length - 81);\\n    }\\n\\n    function _addressToBytes32(address _address) internal pure virtual returns (bytes32) {\\n        return bytes32(uint(uint160(_address)));\\n    }\\n\\n    function _debitFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount) internal virtual returns (uint);\\n\\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _amount) internal virtual returns (uint);\\n\\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual returns (uint);\\n\\n    function _ld2sdRate() internal view virtual returns (uint);\\n}\\n\",\"keccak256\":\"0x89fa0c1355ae4173bac750ffde5e5a4e53723f4d1d0738fcac3e0780cc54f57d\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/token/oft/v2/OFTV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./BaseOFTV2.sol\\\";\\n\\ncontract OFTV2 is BaseOFTV2, ERC20 {\\n\\n    uint internal immutable ld2sdRate;\\n\\n    constructor(string memory _name, string memory _symbol, uint8 _sharedDecimals, address _lzEndpoint) ERC20(_name, _symbol) BaseOFTV2(_sharedDecimals, _lzEndpoint) {\\n        uint8 decimals = decimals();\\n        require(_sharedDecimals <= decimals, \\\"OFT: sharedDecimals must be <= decimals\\\");\\n        ld2sdRate = 10 ** (decimals - _sharedDecimals);\\n    }\\n\\n    /************************************************************************\\n    * public functions\\n    ************************************************************************/\\n    function circulatingSupply() public view virtual override returns (uint) {\\n        return totalSupply();\\n    }\\n\\n    function token() public view virtual override returns (address) {\\n        return address(this);\\n    }\\n\\n    /************************************************************************\\n    * internal functions\\n    ************************************************************************/\\n    function _debitFrom(address _from, uint16, bytes32, uint _amount) internal virtual override returns (uint) {\\n        address spender = _msgSender();\\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\\n        _burn(_from, _amount);\\n        return _amount;\\n    }\\n\\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override returns (uint) {\\n        _mint(_toAddress, _amount);\\n        return _amount;\\n    }\\n\\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual override returns (uint) {\\n        address spender = _msgSender();\\n        // if transfer from this contract, no need to check allowance\\n        if (_from != address(this) && _from != spender) _spendAllowance(_from, spender, _amount);\\n        _transfer(_from, _to, _amount);\\n        return _amount;\\n    }\\n\\n    function _ld2sdRate() internal view virtual override returns (uint) {\\n        return ld2sdRate;\\n    }\\n}\\n\",\"keccak256\":\"0x0232fca007068612a9d212de6245701b9f343647b76cd00baea62695f4f7216c\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/util/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n        // Store the length of the first bytes array at the beginning of\\n        // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n        // Maintain a memory counter for the current write location in the\\n        // temp bytes array by adding the 32 bytes for the array length to\\n        // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n        // Stop copying when the memory counter reaches the length of the\\n        // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n            // Initialize a copy counter to the start of the _preBytes data,\\n            // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n            // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\n            // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Add the length of _postBytes to the current length of tempBytes\\n        // and store it as the new length in the first 32 bytes of the\\n        // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n        // Move the memory counter back from a multiple of 0x20 to the\\n        // actual end of the _preBytes data.\\n            mc := end\\n        // Stop copying when the memory counter reaches the new combined\\n        // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Update the free-memory pointer by padding our last write location\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n        // next 32 byte block, then round down to the nearest multiple of\\n        // 32. If the sum of the length of the two arrays is zero then add\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n            not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\n        // of the array. (We don't need to use the offset into the slot\\n        // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n        // Arrays of 31 bytes or less have an even value in their slot,\\n        // while longer arrays have an odd value. The actual length is\\n        // the slot divided by two for odd values, and the lowest order\\n        // byte divided by two for even values.\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\n        // two to get the length. If the slot is odd, bitwise and the slot\\n        // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n            // Since the new array still fits in the slot, we just need to\\n            // update the contents of the slot.\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                _preBytes.slot,\\n                // all the modifications to the slot are inside this\\n                // next block\\n                add(\\n                // we can just add to the slot contents because the\\n                // bytes we want to change are the LSBs\\n                fslot,\\n                add(\\n                mul(\\n                div(\\n                // load the bytes from memory\\n                mload(add(_postBytes, 0x20)),\\n                // zero all bytes to the right\\n                exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n                ),\\n                // increase length by the double of the memory\\n                // bytes length\\n                mul(mlength, 2)\\n                )\\n                )\\n                )\\n            }\\n            case 1 {\\n            // The stored value fits in the slot, but the combined value\\n            // will exceed it.\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // The contents of the _postBytes array start 32 bytes into\\n            // the structure. Our first read should obtain the `submod`\\n            // bytes that can fit into the unused space in the last word\\n            // of the stored array. To get this, we read 32 bytes starting\\n            // from `submod`, so the data we read overlaps with the array\\n            // contents by `submod` bytes. Masking the lowest-order\\n            // `submod` bytes allows us to add that value directly to the\\n            // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                sc,\\n                add(\\n                and(\\n                fslot,\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                ),\\n                and(mload(mc), mask)\\n                )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n            // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // Copy over the first `submod` bytes of the new data as in\\n            // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n            // The first word of the slice result is potentially a partial\\n            // word read from the original array. To read it, we calculate\\n            // the length of that partial word and start copying that many\\n            // bytes into the array. The first word we copy will start with\\n            // data we don't care about, but the last `lengthmod` bytes will\\n            // land at the beginning of the contents of the new array. When\\n            // we're done copying, we overwrite the full first word with\\n            // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n            // The multiplication in the next line is necessary\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\n            // the following copy loop was copying the origin's length\\n            // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                // The multiplication in the next line has the same exact purpose\\n                // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n            //update free-memory pointer\\n            //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n            //zero out the 32 bytes slice we are about to return\\n            //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                    // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n        // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n        // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                    // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                        // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                        let cb := 1\\n\\n                    // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                            // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x2255aadad70e87ed42b158776330175644b07fbbc7e77ed32cd6330974abbcee\",\"license\":\"Unlicense\"},\"tapioca-sdk/dist/contracts/util/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint256 constant LOW_28_MASK =\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n            _gas, // gas\\n            _target, // recipient\\n            0, // ether value\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n            _gas, // gas\\n            _target, // recipient\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\n    internal\\n    pure\\n    {\\n        require(_buf.length >= 4);\\n        uint256 _mask = LOW_28_MASK;\\n        assembly {\\n        // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n        // mask out the top 4 bytes\\n        // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23942250ddd277c443fa27c6b4ab51e6b3b5e654548b6b9e8d785a88ebec4dfe\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162003a3138038062003a318339810160408190526200003491620000c8565b600080546001600160a81b031916610100339081029190911782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600b80546001600160a01b0319166001600160a01b03928316179055928316608052821660a0521660c05262000125565b80516001600160a01b0381168114620000c357600080fd5b919050565b60008060008060808587031215620000df57600080fd5b620000ea85620000ab565b9350620000fa60208601620000ab565b92506200010a60408601620000ab565b91506200011a60608601620000ab565b905092959194509250565b60805160a05160c051613834620001fd600039600081816102dd01528181610a0301528181610beb01528181610cec01528181610e2f0152818161110c015281816116c60152818161182501528181611ed3015261210c0152600081816103ad01528181610764015281816108080152612b030152600081816104750152818161064e01528181610d750152818161118b01528181611254015281816113b20152818161146c015281816118c901528181611b0601528181611f5d015281816122770152818161254401526125dd01526138346000f3fe608060405234801561001057600080fd5b506004361061018f5760003560e01c8063845c9306116100e457806397d63d431161009257806397d63d4314610403578063a1bef73414610416578063c3b88b4214610429578063c9eed5461461044a578063e30c39781461045d578063e482120014610470578063e4ed31f814610497578063f13d1774146104aa57600080fd5b8063845c9306146103645780638590f413146103775780638676950f1461039f5780638b0c2dfc146103a85780638da5cb5b146103cf578063900cf0cf146103e7578063933f6da5146103f057600080fd5b806335c1d3491161014157806335c1d34914610252578063376e08bd146102a55780634e71e0c8146102d05780635ad70387146102d85780635c975abb1461030c578063752dcf831461032357806378dc90591461035157600080fd5b8063078dfbe71461019457806310f95fbe146101a957806318f5e0ab146101b15780631b8fb9f5146101c45780631f767581146101cc5780631fe802371461022657806320b86b831461023b575b600080fd5b6101a76101a2366004612ca4565b6104bd565b005b6101a76105ea565b6101a76101bf366004612d37565b61096a565b6101a7610a01565b6102016101da366004612d8b565b600c6020526000908152604090208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080015b60405180910390f35b61022e610a76565b60405161021d9190612df1565b61024460055481565b60405190815260200161021d565b610286610260366004612d8b565b60076020526000908152604090208054600182015460029092015460ff91821692911683565b604080519315158452602084019290925215159082015260600161021d565b6102446102b3366004612e04565b600960209081526000928352604080842090915290825290205481565b6101a7610b04565b6102ff7f000000000000000000000000000000000000000000000000000000000000000081565b60405161021d9190612e26565b60005460ff165b604051901515815260200161021d565b610313610331366004612e04565b600860209081526000928352604080842090915290825290205460ff1681565b6101a761035f366004612d8b565b610bd5565b610244610372366004612d8b565b61124d565b61038a610385366004612e3a565b61181e565b6040805192835260208301919091520161021d565b61024460045481565b6102ff7f000000000000000000000000000000000000000000000000000000000000000081565b6000546102ff9061010090046001600160a01b031681565b61024460065481565b6003546102ff906001600160a01b031681565b6101a7610411366004612e72565b611cd7565b6101a7610424366004612e3a565b611eba565b61043c610437366004612ee6565b612391565b60405161021d929190612f03565b6101a7610458366004612ee6565b612440565b6001546102ff906001600160a01b031681565b6102ff7f000000000000000000000000000000000000000000000000000000000000000081565b6101a76104a5366004612f27565b612491565b600b546102ff906001600160a01b031681565b60005461010090046001600160a01b031633146104f55760405162461bcd60e51b81526004016104ec90612f8b565b60405180910390fd5b81156105c8576001600160a01b03831615158061050f5750805b6105535760405162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b60448201526064016104ec565b600080546040516001600160a01b038087169361010090930416917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b03851661010002610100600160a81b0319909116179055600180546001600160a01b0319169055505050565b600180546001600160a01b0385166001600160a01b0319909116179055505050565b62093a806004546105fb9190612fd6565b42101561064a5760405162461bcd60e51b815260206004820152601d60248201527f546170696f63614f7074696f6e42726f6b65723a20746f6f20736f6f6e00000060448201526064016104ec565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a7bffffc6040518163ffffffff1660e01b815260040160006040518083038186803b1580156106a557600080fd5b505afa1580156106b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106e1919081019061307f565b905060008151116107495760405162461bcd60e51b815260206004820152602c60248201527f546170696f63614f7074696f6e42726f6b65723a204e6f20616374697665207360448201526b696e67756c6172697469657360a01b60648201526084016104ec565b426004556006805490600061075d83613114565b91905055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a2a4b99b6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156107bd57600080fd5b505af11580156107d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f5919061312f565b506040516370a0823160e01b81526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b038116916370a082319161084491600401612e26565b60206040518083038186803b15801561085c57600080fd5b505afa158015610870573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610894919061312f565b905061089f81612540565b60035460405163d6d7d52560e01b81526001600160a01b039091169063d6d7d525906108d09060029060040161317d565b6040805180830381600087803b1580156108e957600080fd5b505af11580156108fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109219190613225565b60058190556006546040805185815260208101939093529092507f3bb7b347508b7c148ec2094ac60d2e3d8b7595421025643f08b45cb78b326b58910160405180910390a25050565b60005461010090046001600160a01b031633146109995760405162461bcd60e51b81526004016104ec90612f8b565b600380546001600160a01b0319166001600160a01b0385161790556109c060028383612be5565b507f9b50fe786df475d101ca932bdbd73b94ccd27d5ca5677a776bca1d6dc52afb768383836040516109f49392919061327c565b60405180910390a1505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631eac071c6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a5c57600080fd5b505af1158015610a70573d6000803e3d6000fd5b50505050565b60028054610a8390613148565b80601f0160208091040260200160405190810160405280929190818152602001828054610aaf90613148565b8015610afc5780601f10610ad157610100808354040283529160200191610afc565b820191906000526020600020905b815481529060010190602001808311610adf57829003601f168201915b505050505081565b6001546001600160a01b0316338114610b5f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e657260448201526064016104ec565b600080546040516001600160a01b038085169361010090930416917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0390921661010002610100600160a81b0319909216919091179055600180546001600160a01b0319169055565b604051634f558e7960e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634f558e799060240160206040518083038186803b158015610c3557600080fd5b505afa158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d91906132aa565b610cd35760405162461bcd60e51b815260206004820152603160248201527f546170696f63614f7074696f6e42726f6b65723a206f54415020706f736974696044820152701bdb88191bd95cc81b9bdd08195e1a5cdd607a1b60648201526084016104ec565b60405163682ee63560e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d05dcc6a9060240160806040518083038186803b158015610d3657600080fd5b505afa158015610d4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6e91906132de565b91505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d68f4dd183604001516040518263ffffffff1660e01b8152600401610dc591815260200190565b60a06040518083038186803b158015610ddd57600080fd5b505afa158015610df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e15919061334c565b60405163430c208160e01b81529092506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016915063430c208190610e6790339087906004016133f1565b60206040518083038186803b158015610e7f57600080fd5b505afa158015610e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb791906132aa565b610ed35760405162461bcd60e51b81526004016104ec9061340a565b80606001518160400151610ee79190613454565b6001600160801b0316421015610f4d5760405162461bcd60e51b815260206004820152602560248201527f546170696f63614f7074696f6e42726f6b65723a204c6f636b206e6f742065786044820152641c1a5c995960da1b60648201526084016104ec565b604080830151600090815260076020908152908290208251606081018452815460ff90811615801583526001840154948301949094526002909201549091161515928101929092526110c95781516001600160801b03166000908152600c6020908152604091829020825160808101845281548152600182015492810192909252600281015482840152600301546060820152908201516110015781602001518160600151610ffc9190612fd6565b611015565b81602001518160600151611015919061347f565b606082015260208301516040820180516001600160801b039092169161103c90839061347f565b90525080518161104b82613496565b90525082516001600160801b03166000908152600c6020908152604091829020835180825584830151600183018190558585015160028401556060860151600390930183905560065494519182529391927f879d967178645d9838c4868b727eeb76eac7b58b1704a13c79003756f09f0993910160405180910390a4505b60408381015160009081526007602052818120805460ff19908116825560018201929092556002018054909116905551630852cd8d60e31b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b15801561115857600080fd5b505af115801561116c573d6000803e3d6000fd5b50505060408085015190516323b872dd60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692506323b872dd916111c391309133916004016134ad565b600060405180830381600087803b1580156111dd57600080fd5b505af11580156111f1573d6000803e3d6000fd5b5050505082604001516006547f074ff0268facdff7c3074627a72c36bcf0f19d46cea0f1fc395ae81dffcc3e68846020015160405161123f91906001600160801b0391909116815260200190565b60405180910390a350505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d68f4dd1856040518263ffffffff1660e01b81526004016112a091815260200190565b60a06040518083038186803b1580156112b857600080fd5b505afa1580156112cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f0919061334c565b91509150816113555760405162461bcd60e51b815260206004820152602b60248201527f546170696f63614f7074696f6e42726f6b65723a20506f736974696f6e20697360448201526a206e6f742061637469766560a81b60648201526084016104ec565b80516001600160801b03166000908152600c6020908152604091829020825160808101845281548152600182015492810192909252600281015482840152600301546060820152905163430c208160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063430c2081906113e990339089906004016133f1565b60206040518083038186803b15801561140157600080fd5b505afa158015611415573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143991906132aa565b6114555760405162461bcd60e51b81526004016104ec9061340a565b6040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906114a590339030908a906004016134ad565b600060405180830381600087803b1580156114bf57600080fd5b505af11580156114d3573d6000803e3d6000fd5b5050505060006114f483606001516001600160801b03168360600151612704565b905060008061150e61c3506207a120858760600151612740565b905060006115218560400151600a61278f565b60208701516001600160801b031610801591506116545784518561154482613114565b90525084516020860151611559908690612fd6565b61156391906134d1565b6020860152606080860151908701516001600160801b03161192508261159c5784602001518560600151611597919061347f565b6115b0565b846020015185606001516115b09190612fd6565b606086015260208601516040860180516001600160801b03909216916115d7908390612fd6565b90525085516001600160801b03166000908152600c60209081526040918290208751808255888301516001830181905589850151600284015560608a0151600390930183905560065494519182529391927f879d967178645d9838c4868b727eeb76eac7b58b1704a13c79003756f09f0993910160405180910390a45b6040805160608082018352831515825260208881015181840190815287151584860190815260008f81526007909352918590209351845490151560ff19918216178555905160018501559051600290930180549315159390911692909217909155870151908701516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691631239824c9133916116f891613454565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526001600160801b03908116602483015285166044820152606481018c9052608401602060405180830381600087803b15801561175757600080fd5b505af115801561176b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178f919061312f565b865160065460408089015181519081528a516001600160801b039081166020808401919091528c0151811682840152918b015182166060808301919091528b01518216608082015260a08101879052939b50909116917fa3d578f3f93b76c208e2ce5b52fc1c1293b97a982af8f900c3d04f924fad02f69060c00160405180910390a350505050505050919050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d05dcc6a876040518263ffffffff1660e01b815260040161187191815260200190565b60806040518083038186803b15801561188957600080fd5b505afa15801561189d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c191906132de565b9150506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d68f4dd184604001516040518263ffffffff1660e01b815260040161191991815260200190565b60a06040518083038186803b15801561193157600080fd5b505afa158015611945573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611969919061334c565b6006546001600160a01b03808b166000908152600a6020908152604080832081518083019092528054909416815260018401805497995095975093959194908401916119b490613148565b80601f01602080910402602001604051908101604052809291908181526020018280546119e090613148565b8015611a2d5780601f10611a0257610100808354040283529160200191611a2d565b820191906000526020600020905b815481529060010190602001808311611a1057829003601f168201915b5050509190925250508151919250506001600160a01b0316611a615760405162461bcd60e51b81526004016104ec906134f3565b60008a815260086020908152604080832085845290915290205460ff1615611a9b5760405162461bcd60e51b81526004016104ec90613543565b83611ab85760405162461bcd60e51b81526004016104ec90613589565b600082815260096020908152604080832086516001600160801b03908116855290835292819020549186015186519151632fcd25c160e21b815291841660048301529192611b8e92169083907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063bf349704906024015b60206040518083038186803b158015611b5157600080fd5b505afa158015611b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b89919061312f565b6127ba565b975060006005548a600014611ba3578a611ba5565b895b611baf91906135cc565b8351602085015160405163eeb8a8d360e01b81529293506000926001600160a01b039092169163eeb8a8d391611be791600401612df1565b604080518083038186803b158015611bfe57600080fd5b505afa158015611c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c369190613225565b915050611cc582828a602001516001600160801b03168f6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8557600080fd5b505afa158015611c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbd91906135eb565b60ff16612936565b98505050505050505050935093915050565b60005461010090046001600160a01b03163314611d065760405162461bcd60e51b81526004016104ec90612f8b565b600b546001600160a01b0316611d7d5760405162461bcd60e51b815260206004820152603660248201527f546170696f63614f7074696f6e42726f6b65723a205061796d656e7420746f6b604482015275195b8818995b99599a58da585c9e481b9bdd081cd95d60521b60648201526084016104ec565b8060005b81811015610a70576000848483818110611d9d57611d9d61360e565b9050602002016020810190611db29190612ee6565b600b546040516370a0823160e01b81529192506001600160a01b038084169263a9059cbb929091169083906370a0823190611df1903090600401612e26565b60206040518083038186803b158015611e0957600080fd5b505afa158015611e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e41919061312f565b6040518363ffffffff1660e01b8152600401611e5e9291906133f1565b602060405180830381600087803b158015611e7857600080fd5b505af1158015611e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb091906132aa565b5050600101611d81565b60405163682ee63560e11b8152600481018490526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d05dcc6a9060240160806040518083038186803b158015611f1d57600080fd5b505afa158015611f31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5591906132de565b9150506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d68f4dd184604001516040518263ffffffff1660e01b8152600401611fad91815260200190565b60a06040518083038186803b158015611fc557600080fd5b505afa158015611fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffd919061334c565b6006546001600160a01b038089166000908152600a60209081526040808320815180830190925280549094168152600184018054979950959750939591949084019161204890613148565b80601f016020809104026020016040519081016040528092919081815260200182805461207490613148565b80156120c15780601f10612096576101008083540402835291602001916120c1565b820191906000526020600020905b8154815290600101906020018083116120a457829003601f168201915b5050509190925250508151919250506001600160a01b03166120f55760405162461bcd60e51b81526004016104ec906134f3565b60405163430c208160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063430c2081906121439033908c906004016133f1565b60206040518083038186803b15801561215b57600080fd5b505afa15801561216f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219391906132aa565b6121af5760405162461bcd60e51b81526004016104ec9061340a565b600088815260086020908152604080832085845290915290205460ff16156121e95760405162461bcd60e51b81526004016104ec90613543565b836122065760405162461bcd60e51b81526004016104ec90613589565b60008881526008602090815260408083208584528252808320805460ff191660011790556009825280832086516001600160801b039081168552908352818420549287015187519251632fcd25c160e21b815292821660048401529293926122a69291169084906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063bf34970490602401611b39565b9050808811156123115760405162461bcd60e51b815260206004820152603060248201527f546170696f63614f7074696f6e42726f6b65723a20416d6f756e74206578636560448201526f065647320656c696769626c65205441560841b60648201526084016104ec565b6000881561231f5788612321565b815b905061233c8a85838b602001516001600160801b0316612989565b604080518c8152602081018390526001600160a01b038c1691339188917fad9eeb6ac9c439fe4e01f186d3a05d5d27ec1f2449bd4042ec40224b5894b8dd910160405180910390a45050505050505050505050565b600a60205260009081526040902080546001820180546001600160a01b0390921692916123bd90613148565b80601f01602080910402602001604051908101604052809291908181526020018280546123e990613148565b80156124365780601f1061240b57610100808354040283529160200191612436565b820191906000526020600020905b81548152906001019060200180831161241957829003601f168201915b5050505050905082565b60005461010090046001600160a01b0316331461246f5760405162461bcd60e51b81526004016104ec90612f8b565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b60005461010090046001600160a01b031633146124c05760405162461bcd60e51b81526004016104ec90612f8b565b6001600160a01b038481166000908152600a6020526040902080546001600160a01b0319169185169190911781556124fc906001018383612be5565b507fd70ea94304204d2530588b0d70f2ee633331140b793571367a494b7709768a62848484846040516125329493929190613624565b60405180910390a150505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635d9b9bba6040518163ffffffff1660e01b815260040160006040518083038186803b15801561259b57600080fd5b505afa1580156125af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125d79190810190613651565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631678e4f66040518163ffffffff1660e01b815260040160206040518083038186803b15801561263457600080fd5b505afa158015612648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266c919061312f565b825190915060005b818110156126fd5760008482815181106126905761269061360e565b602002602001015160400151905060006126ab8288876127ba565b90508060096000600654815260200190815260200160002060008886815181106126d7576126d761360e565b602090810291909101810151518252810191909152604001600020555050600101612674565b5050505050565b60008161272d61271482806135cc565b61271e86806135cc565b6127289190612fd6565b612b75565b612737919061347f565b90505b92915050565b60008161274e575082612787565b60008261275b86866135cc565b61276591906134d1565b90508481116127815785811061277b5780612783565b85612783565b845b9150505b949350505050565b60008061279c83856135cc565b90506127108110156127ae5783612787565b612787612710826134d1565b60008082116127c857600080fd5b60008060001985870985870292508281108382030391505080600014156127f45750829004905061292f565b83811061280057600080fd5b600084868809808403938111909203919050600061282086196001612fd6565b861695869004959384900493600081900304600101905061284181846135cc565b9093179260006128528760036135cc565b600218905061286181886135cc565b61286c90600261347f565b61287690826135cc565b905061288281886135cc565b61288d90600261347f565b61289790826135cc565b90506128a381886135cc565b6128ae90600261347f565b6128b890826135cc565b90506128c481886135cc565b6128cf90600261347f565b6128d990826135cc565b90506128e581886135cc565b6128f090600261347f565b6128fa90826135cc565b905061290681886135cc565b61291190600261347f565b61291b90826135cc565b905061292781866135cc565b955050505050505b9392505050565b60008061294385876134d1565b90506129538185620f42406127ba565b61295d908261347f565b915061296a83601261347f565b61297590600a6137f2565b61297f90836134d1565b9695505050505050565b60006005548361299991906135cc565b8451602086015160405163d6d7d52560e01b81529293506000926001600160a01b039092169163d6d7d525916129d191600401612df1565b6040805180830381600087803b1580156129ea57600080fd5b505af11580156129fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a229190613225565b9150506000612a668383868a6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8557600080fd5b6040516323b872dd60e01b81529091506001600160a01b038816906323b872dd90612a99903390309086906004016134ad565b602060405180830381600087803b158015612ab357600080fd5b505af1158015612ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aeb91906132aa565b506040516309d7186160e31b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634eb8c30890612b3a90339089906004016133f1565b600060405180830381600087803b158015612b5457600080fd5b505af1158015612b68573d6000803e3d6000fd5b5050505050505050505050565b60006003821115612bd65750806000612b8f6002836134d1565b612b9a906001612fd6565b90505b81811015612bd057905080600281612bb581866134d1565b612bbf9190612fd6565b612bc991906134d1565b9050612b9d565b50919050565b8115612be0575060015b919050565b828054612bf190613148565b90600052602060002090601f016020900481019282612c135760008555612c59565b82601f10612c2c5782800160ff19823516178555612c59565b82800160010185558215612c59579182015b82811115612c59578235825591602001919060010190612c3e565b50612c65929150612c69565b5090565b5b80821115612c655760008155600101612c6a565b6001600160a01b0381168114612c9357600080fd5b50565b8015158114612c9357600080fd5b600080600060608486031215612cb957600080fd5b8335612cc481612c7e565b92506020840135612cd481612c96565b91506040840135612ce481612c96565b809150509250925092565b60008083601f840112612d0157600080fd5b5081356001600160401b03811115612d1857600080fd5b602083019150836020828501011115612d3057600080fd5b9250929050565b600080600060408486031215612d4c57600080fd5b8335612d5781612c7e565b925060208401356001600160401b03811115612d7257600080fd5b612d7e86828701612cef565b9497909650939450505050565b600060208284031215612d9d57600080fd5b5035919050565b6000815180845260005b81811015612dca57602081850181015186830182015201612dae565b81811115612ddc576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006127376020830184612da4565b60008060408385031215612e1757600080fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b600080600060608486031215612e4f57600080fd5b833592506020840135612e6181612c7e565b929592945050506040919091013590565b60008060208385031215612e8557600080fd5b82356001600160401b0380821115612e9c57600080fd5b818501915085601f830112612eb057600080fd5b813581811115612ebf57600080fd5b8660208260051b8501011115612ed457600080fd5b60209290920196919550909350505050565b600060208284031215612ef857600080fd5b813561292f81612c7e565b6001600160a01b038316815260406020820181905260009061278790830184612da4565b60008060008060608587031215612f3d57600080fd5b8435612f4881612c7e565b93506020850135612f5881612c7e565b925060408501356001600160401b03811115612f7357600080fd5b612f7f87828801612cef565b95989497509550505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115612fe957612fe9612fc0565b500190565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171561302657613026612fee565b60405290565b604051601f8201601f191681016001600160401b038111828210171561305457613054612fee565b604052919050565b60006001600160401b0382111561307557613075612fee565b5060051b60200190565b6000602080838503121561309257600080fd5b82516001600160401b038111156130a857600080fd5b8301601f810185136130b957600080fd5b80516130cc6130c78261305c565b61302c565b81815260059190911b820183019083810190878311156130eb57600080fd5b928401925b82841015613109578351825292840192908401906130f0565b979650505050505050565b600060001982141561312857613128612fc0565b5060010190565b60006020828403121561314157600080fd5b5051919050565b600181811c9082168061315c57607f821691505b60208210811415612bd057634e487b7160e01b600052602260045260246000fd5b600060208083526000845481600182811c91508083168061319f57607f831692505b8583108114156131bd57634e487b7160e01b85526022600452602485fd5b8786018381526020018180156131da57600181146131eb57613216565b60ff19861682528782019650613216565b60008b81526020902060005b86811015613210578154848201529085019089016131f7565b83019750505b50949998505050505050505050565b6000806040838503121561323857600080fd5b825161324381612c96565b6020939093015192949293505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03841681526040602082018190526000906132a19083018486613253565b95945050505050565b6000602082840312156132bc57600080fd5b815161292f81612c96565b80516001600160801b0381168114612be057600080fd5b60008082840360808112156132f257600080fd5b83516132fd81612c7e565b92506060601f198201121561331157600080fd5b5061331a613004565b613326602085016132c7565b8152613334604085016132c7565b60208201526060939093015160408401525092909150565b60008082840360a081121561336057600080fd5b835161336b81612c96565b92506080601f198201121561337f57600080fd5b50604051608081018181106001600160401b03821117156133a2576133a2612fee565b6040526133b1602085016132c7565b81526133bf604085016132c7565b60208201526133d0606085016132c7565b60408201526133e1608085016132c7565b6060820152809150509250929050565b6001600160a01b03929092168252602082015260400190565b6020808252602a908201527f546170696f63614f7074696f6e42726f6b65723a204e6f7420617070726f7665604082015269321037b91037bbb732b960b11b606082015260800190565b60006001600160801b0382811684821680830382111561347657613476612fc0565b01949350505050565b60008282101561349157613491612fc0565b500390565b6000816134a5576134a5612fc0565b506000190190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000826134ee57634e487b7160e01b600052601260045260246000fd5b500490565b60208082526030908201527f546170696f63614f7074696f6e42726f6b65723a205061796d656e7420746f6b60408201526f195b881b9bdd081cdd5c1c1bdc9d195960821b606082015260800190565b60208082526026908201527f546170696f63614f7074696f6e42726f6b65723a20416c7265616479206578656040820152651c98da5cd95960d21b606082015260800190565b60208082526023908201527f546170696f63614f7074696f6e42726f6b65723a204f7074696f6e20657870696040820152621c995960ea1b606082015260800190565b60008160001904831182151516156135e6576135e6612fc0565b500290565b6000602082840312156135fd57600080fd5b815160ff8116811461292f57600080fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0385811682528416602082015260606040820181905260009061297f9083018486613253565b6000602080838503121561366457600080fd5b82516001600160401b0381111561367a57600080fd5b8301601f8101851361368b57600080fd5b80516136996130c78261305c565b818152606091820283018401918482019190888411156136b857600080fd5b938501935b838510156137025780858a0312156136d55760008081fd5b6136dd613004565b85518152868601518782015260408087015190820152835293840193918501916136bd565b50979650505050505050565b600181815b8085111561374957816000190482111561372f5761372f612fc0565b8085161561373c57918102915b93841c9390800290613713565b509250929050565b6000826137605750600161273a565b8161376d5750600061273a565b8160018114613783576002811461378d576137a9565b600191505061273a565b60ff84111561379e5761379e612fc0565b50506001821b61273a565b5060208310610133831016604e8410600b84101617156137cc575081810a61273a565b6137d6838361370e565b80600019048211156137ea576137ea612fc0565b029392505050565b6000612737838361375156fea2646970667358221220d9a458c442db647126b5b5619fa7c90655bcf815a0c77d2355d039e60fbb5c2664736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018f5760003560e01c8063845c9306116100e457806397d63d431161009257806397d63d4314610403578063a1bef73414610416578063c3b88b4214610429578063c9eed5461461044a578063e30c39781461045d578063e482120014610470578063e4ed31f814610497578063f13d1774146104aa57600080fd5b8063845c9306146103645780638590f413146103775780638676950f1461039f5780638b0c2dfc146103a85780638da5cb5b146103cf578063900cf0cf146103e7578063933f6da5146103f057600080fd5b806335c1d3491161014157806335c1d34914610252578063376e08bd146102a55780634e71e0c8146102d05780635ad70387146102d85780635c975abb1461030c578063752dcf831461032357806378dc90591461035157600080fd5b8063078dfbe71461019457806310f95fbe146101a957806318f5e0ab146101b15780631b8fb9f5146101c45780631f767581146101cc5780631fe802371461022657806320b86b831461023b575b600080fd5b6101a76101a2366004612ca4565b6104bd565b005b6101a76105ea565b6101a76101bf366004612d37565b61096a565b6101a7610a01565b6102016101da366004612d8b565b600c6020526000908152604090208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080015b60405180910390f35b61022e610a76565b60405161021d9190612df1565b61024460055481565b60405190815260200161021d565b610286610260366004612d8b565b60076020526000908152604090208054600182015460029092015460ff91821692911683565b604080519315158452602084019290925215159082015260600161021d565b6102446102b3366004612e04565b600960209081526000928352604080842090915290825290205481565b6101a7610b04565b6102ff7f000000000000000000000000000000000000000000000000000000000000000081565b60405161021d9190612e26565b60005460ff165b604051901515815260200161021d565b610313610331366004612e04565b600860209081526000928352604080842090915290825290205460ff1681565b6101a761035f366004612d8b565b610bd5565b610244610372366004612d8b565b61124d565b61038a610385366004612e3a565b61181e565b6040805192835260208301919091520161021d565b61024460045481565b6102ff7f000000000000000000000000000000000000000000000000000000000000000081565b6000546102ff9061010090046001600160a01b031681565b61024460065481565b6003546102ff906001600160a01b031681565b6101a7610411366004612e72565b611cd7565b6101a7610424366004612e3a565b611eba565b61043c610437366004612ee6565b612391565b60405161021d929190612f03565b6101a7610458366004612ee6565b612440565b6001546102ff906001600160a01b031681565b6102ff7f000000000000000000000000000000000000000000000000000000000000000081565b6101a76104a5366004612f27565b612491565b600b546102ff906001600160a01b031681565b60005461010090046001600160a01b031633146104f55760405162461bcd60e51b81526004016104ec90612f8b565b60405180910390fd5b81156105c8576001600160a01b03831615158061050f5750805b6105535760405162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b60448201526064016104ec565b600080546040516001600160a01b038087169361010090930416917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b03851661010002610100600160a81b0319909116179055600180546001600160a01b0319169055505050565b600180546001600160a01b0385166001600160a01b0319909116179055505050565b62093a806004546105fb9190612fd6565b42101561064a5760405162461bcd60e51b815260206004820152601d60248201527f546170696f63614f7074696f6e42726f6b65723a20746f6f20736f6f6e00000060448201526064016104ec565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a7bffffc6040518163ffffffff1660e01b815260040160006040518083038186803b1580156106a557600080fd5b505afa1580156106b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106e1919081019061307f565b905060008151116107495760405162461bcd60e51b815260206004820152602c60248201527f546170696f63614f7074696f6e42726f6b65723a204e6f20616374697665207360448201526b696e67756c6172697469657360a01b60648201526084016104ec565b426004556006805490600061075d83613114565b91905055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a2a4b99b6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156107bd57600080fd5b505af11580156107d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f5919061312f565b506040516370a0823160e01b81526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b038116916370a082319161084491600401612e26565b60206040518083038186803b15801561085c57600080fd5b505afa158015610870573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610894919061312f565b905061089f81612540565b60035460405163d6d7d52560e01b81526001600160a01b039091169063d6d7d525906108d09060029060040161317d565b6040805180830381600087803b1580156108e957600080fd5b505af11580156108fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109219190613225565b60058190556006546040805185815260208101939093529092507f3bb7b347508b7c148ec2094ac60d2e3d8b7595421025643f08b45cb78b326b58910160405180910390a25050565b60005461010090046001600160a01b031633146109995760405162461bcd60e51b81526004016104ec90612f8b565b600380546001600160a01b0319166001600160a01b0385161790556109c060028383612be5565b507f9b50fe786df475d101ca932bdbd73b94ccd27d5ca5677a776bca1d6dc52afb768383836040516109f49392919061327c565b60405180910390a1505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631eac071c6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a5c57600080fd5b505af1158015610a70573d6000803e3d6000fd5b50505050565b60028054610a8390613148565b80601f0160208091040260200160405190810160405280929190818152602001828054610aaf90613148565b8015610afc5780601f10610ad157610100808354040283529160200191610afc565b820191906000526020600020905b815481529060010190602001808311610adf57829003601f168201915b505050505081565b6001546001600160a01b0316338114610b5f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e657260448201526064016104ec565b600080546040516001600160a01b038085169361010090930416917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0390921661010002610100600160a81b0319909216919091179055600180546001600160a01b0319169055565b604051634f558e7960e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634f558e799060240160206040518083038186803b158015610c3557600080fd5b505afa158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d91906132aa565b610cd35760405162461bcd60e51b815260206004820152603160248201527f546170696f63614f7074696f6e42726f6b65723a206f54415020706f736974696044820152701bdb88191bd95cc81b9bdd08195e1a5cdd607a1b60648201526084016104ec565b60405163682ee63560e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d05dcc6a9060240160806040518083038186803b158015610d3657600080fd5b505afa158015610d4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6e91906132de565b91505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d68f4dd183604001516040518263ffffffff1660e01b8152600401610dc591815260200190565b60a06040518083038186803b158015610ddd57600080fd5b505afa158015610df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e15919061334c565b60405163430c208160e01b81529092506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016915063430c208190610e6790339087906004016133f1565b60206040518083038186803b158015610e7f57600080fd5b505afa158015610e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb791906132aa565b610ed35760405162461bcd60e51b81526004016104ec9061340a565b80606001518160400151610ee79190613454565b6001600160801b0316421015610f4d5760405162461bcd60e51b815260206004820152602560248201527f546170696f63614f7074696f6e42726f6b65723a204c6f636b206e6f742065786044820152641c1a5c995960da1b60648201526084016104ec565b604080830151600090815260076020908152908290208251606081018452815460ff90811615801583526001840154948301949094526002909201549091161515928101929092526110c95781516001600160801b03166000908152600c6020908152604091829020825160808101845281548152600182015492810192909252600281015482840152600301546060820152908201516110015781602001518160600151610ffc9190612fd6565b611015565b81602001518160600151611015919061347f565b606082015260208301516040820180516001600160801b039092169161103c90839061347f565b90525080518161104b82613496565b90525082516001600160801b03166000908152600c6020908152604091829020835180825584830151600183018190558585015160028401556060860151600390930183905560065494519182529391927f879d967178645d9838c4868b727eeb76eac7b58b1704a13c79003756f09f0993910160405180910390a4505b60408381015160009081526007602052818120805460ff19908116825560018201929092556002018054909116905551630852cd8d60e31b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b15801561115857600080fd5b505af115801561116c573d6000803e3d6000fd5b50505060408085015190516323b872dd60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692506323b872dd916111c391309133916004016134ad565b600060405180830381600087803b1580156111dd57600080fd5b505af11580156111f1573d6000803e3d6000fd5b5050505082604001516006547f074ff0268facdff7c3074627a72c36bcf0f19d46cea0f1fc395ae81dffcc3e68846020015160405161123f91906001600160801b0391909116815260200190565b60405180910390a350505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d68f4dd1856040518263ffffffff1660e01b81526004016112a091815260200190565b60a06040518083038186803b1580156112b857600080fd5b505afa1580156112cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f0919061334c565b91509150816113555760405162461bcd60e51b815260206004820152602b60248201527f546170696f63614f7074696f6e42726f6b65723a20506f736974696f6e20697360448201526a206e6f742061637469766560a81b60648201526084016104ec565b80516001600160801b03166000908152600c6020908152604091829020825160808101845281548152600182015492810192909252600281015482840152600301546060820152905163430c208160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063430c2081906113e990339089906004016133f1565b60206040518083038186803b15801561140157600080fd5b505afa158015611415573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143991906132aa565b6114555760405162461bcd60e51b81526004016104ec9061340a565b6040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906114a590339030908a906004016134ad565b600060405180830381600087803b1580156114bf57600080fd5b505af11580156114d3573d6000803e3d6000fd5b5050505060006114f483606001516001600160801b03168360600151612704565b905060008061150e61c3506207a120858760600151612740565b905060006115218560400151600a61278f565b60208701516001600160801b031610801591506116545784518561154482613114565b90525084516020860151611559908690612fd6565b61156391906134d1565b6020860152606080860151908701516001600160801b03161192508261159c5784602001518560600151611597919061347f565b6115b0565b846020015185606001516115b09190612fd6565b606086015260208601516040860180516001600160801b03909216916115d7908390612fd6565b90525085516001600160801b03166000908152600c60209081526040918290208751808255888301516001830181905589850151600284015560608a0151600390930183905560065494519182529391927f879d967178645d9838c4868b727eeb76eac7b58b1704a13c79003756f09f0993910160405180910390a45b6040805160608082018352831515825260208881015181840190815287151584860190815260008f81526007909352918590209351845490151560ff19918216178555905160018501559051600290930180549315159390911692909217909155870151908701516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691631239824c9133916116f891613454565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526001600160801b03908116602483015285166044820152606481018c9052608401602060405180830381600087803b15801561175757600080fd5b505af115801561176b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178f919061312f565b865160065460408089015181519081528a516001600160801b039081166020808401919091528c0151811682840152918b015182166060808301919091528b01518216608082015260a08101879052939b50909116917fa3d578f3f93b76c208e2ce5b52fc1c1293b97a982af8f900c3d04f924fad02f69060c00160405180910390a350505050505050919050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d05dcc6a876040518263ffffffff1660e01b815260040161187191815260200190565b60806040518083038186803b15801561188957600080fd5b505afa15801561189d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c191906132de565b9150506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d68f4dd184604001516040518263ffffffff1660e01b815260040161191991815260200190565b60a06040518083038186803b15801561193157600080fd5b505afa158015611945573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611969919061334c565b6006546001600160a01b03808b166000908152600a6020908152604080832081518083019092528054909416815260018401805497995095975093959194908401916119b490613148565b80601f01602080910402602001604051908101604052809291908181526020018280546119e090613148565b8015611a2d5780601f10611a0257610100808354040283529160200191611a2d565b820191906000526020600020905b815481529060010190602001808311611a1057829003601f168201915b5050509190925250508151919250506001600160a01b0316611a615760405162461bcd60e51b81526004016104ec906134f3565b60008a815260086020908152604080832085845290915290205460ff1615611a9b5760405162461bcd60e51b81526004016104ec90613543565b83611ab85760405162461bcd60e51b81526004016104ec90613589565b600082815260096020908152604080832086516001600160801b03908116855290835292819020549186015186519151632fcd25c160e21b815291841660048301529192611b8e92169083907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063bf349704906024015b60206040518083038186803b158015611b5157600080fd5b505afa158015611b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b89919061312f565b6127ba565b975060006005548a600014611ba3578a611ba5565b895b611baf91906135cc565b8351602085015160405163eeb8a8d360e01b81529293506000926001600160a01b039092169163eeb8a8d391611be791600401612df1565b604080518083038186803b158015611bfe57600080fd5b505afa158015611c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c369190613225565b915050611cc582828a602001516001600160801b03168f6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8557600080fd5b505afa158015611c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbd91906135eb565b60ff16612936565b98505050505050505050935093915050565b60005461010090046001600160a01b03163314611d065760405162461bcd60e51b81526004016104ec90612f8b565b600b546001600160a01b0316611d7d5760405162461bcd60e51b815260206004820152603660248201527f546170696f63614f7074696f6e42726f6b65723a205061796d656e7420746f6b604482015275195b8818995b99599a58da585c9e481b9bdd081cd95d60521b60648201526084016104ec565b8060005b81811015610a70576000848483818110611d9d57611d9d61360e565b9050602002016020810190611db29190612ee6565b600b546040516370a0823160e01b81529192506001600160a01b038084169263a9059cbb929091169083906370a0823190611df1903090600401612e26565b60206040518083038186803b158015611e0957600080fd5b505afa158015611e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e41919061312f565b6040518363ffffffff1660e01b8152600401611e5e9291906133f1565b602060405180830381600087803b158015611e7857600080fd5b505af1158015611e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb091906132aa565b5050600101611d81565b60405163682ee63560e11b8152600481018490526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d05dcc6a9060240160806040518083038186803b158015611f1d57600080fd5b505afa158015611f31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5591906132de565b9150506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d68f4dd184604001516040518263ffffffff1660e01b8152600401611fad91815260200190565b60a06040518083038186803b158015611fc557600080fd5b505afa158015611fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffd919061334c565b6006546001600160a01b038089166000908152600a60209081526040808320815180830190925280549094168152600184018054979950959750939591949084019161204890613148565b80601f016020809104026020016040519081016040528092919081815260200182805461207490613148565b80156120c15780601f10612096576101008083540402835291602001916120c1565b820191906000526020600020905b8154815290600101906020018083116120a457829003601f168201915b5050509190925250508151919250506001600160a01b03166120f55760405162461bcd60e51b81526004016104ec906134f3565b60405163430c208160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063430c2081906121439033908c906004016133f1565b60206040518083038186803b15801561215b57600080fd5b505afa15801561216f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219391906132aa565b6121af5760405162461bcd60e51b81526004016104ec9061340a565b600088815260086020908152604080832085845290915290205460ff16156121e95760405162461bcd60e51b81526004016104ec90613543565b836122065760405162461bcd60e51b81526004016104ec90613589565b60008881526008602090815260408083208584528252808320805460ff191660011790556009825280832086516001600160801b039081168552908352818420549287015187519251632fcd25c160e21b815292821660048401529293926122a69291169084906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063bf34970490602401611b39565b9050808811156123115760405162461bcd60e51b815260206004820152603060248201527f546170696f63614f7074696f6e42726f6b65723a20416d6f756e74206578636560448201526f065647320656c696769626c65205441560841b60648201526084016104ec565b6000881561231f5788612321565b815b905061233c8a85838b602001516001600160801b0316612989565b604080518c8152602081018390526001600160a01b038c1691339188917fad9eeb6ac9c439fe4e01f186d3a05d5d27ec1f2449bd4042ec40224b5894b8dd910160405180910390a45050505050505050505050565b600a60205260009081526040902080546001820180546001600160a01b0390921692916123bd90613148565b80601f01602080910402602001604051908101604052809291908181526020018280546123e990613148565b80156124365780601f1061240b57610100808354040283529160200191612436565b820191906000526020600020905b81548152906001019060200180831161241957829003601f168201915b5050505050905082565b60005461010090046001600160a01b0316331461246f5760405162461bcd60e51b81526004016104ec90612f8b565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b60005461010090046001600160a01b031633146124c05760405162461bcd60e51b81526004016104ec90612f8b565b6001600160a01b038481166000908152600a6020526040902080546001600160a01b0319169185169190911781556124fc906001018383612be5565b507fd70ea94304204d2530588b0d70f2ee633331140b793571367a494b7709768a62848484846040516125329493929190613624565b60405180910390a150505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635d9b9bba6040518163ffffffff1660e01b815260040160006040518083038186803b15801561259b57600080fd5b505afa1580156125af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125d79190810190613651565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631678e4f66040518163ffffffff1660e01b815260040160206040518083038186803b15801561263457600080fd5b505afa158015612648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266c919061312f565b825190915060005b818110156126fd5760008482815181106126905761269061360e565b602002602001015160400151905060006126ab8288876127ba565b90508060096000600654815260200190815260200160002060008886815181106126d7576126d761360e565b602090810291909101810151518252810191909152604001600020555050600101612674565b5050505050565b60008161272d61271482806135cc565b61271e86806135cc565b6127289190612fd6565b612b75565b612737919061347f565b90505b92915050565b60008161274e575082612787565b60008261275b86866135cc565b61276591906134d1565b90508481116127815785811061277b5780612783565b85612783565b845b9150505b949350505050565b60008061279c83856135cc565b90506127108110156127ae5783612787565b612787612710826134d1565b60008082116127c857600080fd5b60008060001985870985870292508281108382030391505080600014156127f45750829004905061292f565b83811061280057600080fd5b600084868809808403938111909203919050600061282086196001612fd6565b861695869004959384900493600081900304600101905061284181846135cc565b9093179260006128528760036135cc565b600218905061286181886135cc565b61286c90600261347f565b61287690826135cc565b905061288281886135cc565b61288d90600261347f565b61289790826135cc565b90506128a381886135cc565b6128ae90600261347f565b6128b890826135cc565b90506128c481886135cc565b6128cf90600261347f565b6128d990826135cc565b90506128e581886135cc565b6128f090600261347f565b6128fa90826135cc565b905061290681886135cc565b61291190600261347f565b61291b90826135cc565b905061292781866135cc565b955050505050505b9392505050565b60008061294385876134d1565b90506129538185620f42406127ba565b61295d908261347f565b915061296a83601261347f565b61297590600a6137f2565b61297f90836134d1565b9695505050505050565b60006005548361299991906135cc565b8451602086015160405163d6d7d52560e01b81529293506000926001600160a01b039092169163d6d7d525916129d191600401612df1565b6040805180830381600087803b1580156129ea57600080fd5b505af11580156129fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a229190613225565b9150506000612a668383868a6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8557600080fd5b6040516323b872dd60e01b81529091506001600160a01b038816906323b872dd90612a99903390309086906004016134ad565b602060405180830381600087803b158015612ab357600080fd5b505af1158015612ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aeb91906132aa565b506040516309d7186160e31b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634eb8c30890612b3a90339089906004016133f1565b600060405180830381600087803b158015612b5457600080fd5b505af1158015612b68573d6000803e3d6000fd5b5050505050505050505050565b60006003821115612bd65750806000612b8f6002836134d1565b612b9a906001612fd6565b90505b81811015612bd057905080600281612bb581866134d1565b612bbf9190612fd6565b612bc991906134d1565b9050612b9d565b50919050565b8115612be0575060015b919050565b828054612bf190613148565b90600052602060002090601f016020900481019282612c135760008555612c59565b82601f10612c2c5782800160ff19823516178555612c59565b82800160010185558215612c59579182015b82811115612c59578235825591602001919060010190612c3e565b50612c65929150612c69565b5090565b5b80821115612c655760008155600101612c6a565b6001600160a01b0381168114612c9357600080fd5b50565b8015158114612c9357600080fd5b600080600060608486031215612cb957600080fd5b8335612cc481612c7e565b92506020840135612cd481612c96565b91506040840135612ce481612c96565b809150509250925092565b60008083601f840112612d0157600080fd5b5081356001600160401b03811115612d1857600080fd5b602083019150836020828501011115612d3057600080fd5b9250929050565b600080600060408486031215612d4c57600080fd5b8335612d5781612c7e565b925060208401356001600160401b03811115612d7257600080fd5b612d7e86828701612cef565b9497909650939450505050565b600060208284031215612d9d57600080fd5b5035919050565b6000815180845260005b81811015612dca57602081850181015186830182015201612dae565b81811115612ddc576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006127376020830184612da4565b60008060408385031215612e1757600080fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b600080600060608486031215612e4f57600080fd5b833592506020840135612e6181612c7e565b929592945050506040919091013590565b60008060208385031215612e8557600080fd5b82356001600160401b0380821115612e9c57600080fd5b818501915085601f830112612eb057600080fd5b813581811115612ebf57600080fd5b8660208260051b8501011115612ed457600080fd5b60209290920196919550909350505050565b600060208284031215612ef857600080fd5b813561292f81612c7e565b6001600160a01b038316815260406020820181905260009061278790830184612da4565b60008060008060608587031215612f3d57600080fd5b8435612f4881612c7e565b93506020850135612f5881612c7e565b925060408501356001600160401b03811115612f7357600080fd5b612f7f87828801612cef565b95989497509550505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115612fe957612fe9612fc0565b500190565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171561302657613026612fee565b60405290565b604051601f8201601f191681016001600160401b038111828210171561305457613054612fee565b604052919050565b60006001600160401b0382111561307557613075612fee565b5060051b60200190565b6000602080838503121561309257600080fd5b82516001600160401b038111156130a857600080fd5b8301601f810185136130b957600080fd5b80516130cc6130c78261305c565b61302c565b81815260059190911b820183019083810190878311156130eb57600080fd5b928401925b82841015613109578351825292840192908401906130f0565b979650505050505050565b600060001982141561312857613128612fc0565b5060010190565b60006020828403121561314157600080fd5b5051919050565b600181811c9082168061315c57607f821691505b60208210811415612bd057634e487b7160e01b600052602260045260246000fd5b600060208083526000845481600182811c91508083168061319f57607f831692505b8583108114156131bd57634e487b7160e01b85526022600452602485fd5b8786018381526020018180156131da57600181146131eb57613216565b60ff19861682528782019650613216565b60008b81526020902060005b86811015613210578154848201529085019089016131f7565b83019750505b50949998505050505050505050565b6000806040838503121561323857600080fd5b825161324381612c96565b6020939093015192949293505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03841681526040602082018190526000906132a19083018486613253565b95945050505050565b6000602082840312156132bc57600080fd5b815161292f81612c96565b80516001600160801b0381168114612be057600080fd5b60008082840360808112156132f257600080fd5b83516132fd81612c7e565b92506060601f198201121561331157600080fd5b5061331a613004565b613326602085016132c7565b8152613334604085016132c7565b60208201526060939093015160408401525092909150565b60008082840360a081121561336057600080fd5b835161336b81612c96565b92506080601f198201121561337f57600080fd5b50604051608081018181106001600160401b03821117156133a2576133a2612fee565b6040526133b1602085016132c7565b81526133bf604085016132c7565b60208201526133d0606085016132c7565b60408201526133e1608085016132c7565b6060820152809150509250929050565b6001600160a01b03929092168252602082015260400190565b6020808252602a908201527f546170696f63614f7074696f6e42726f6b65723a204e6f7420617070726f7665604082015269321037b91037bbb732b960b11b606082015260800190565b60006001600160801b0382811684821680830382111561347657613476612fc0565b01949350505050565b60008282101561349157613491612fc0565b500390565b6000816134a5576134a5612fc0565b506000190190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000826134ee57634e487b7160e01b600052601260045260246000fd5b500490565b60208082526030908201527f546170696f63614f7074696f6e42726f6b65723a205061796d656e7420746f6b60408201526f195b881b9bdd081cdd5c1c1bdc9d195960821b606082015260800190565b60208082526026908201527f546170696f63614f7074696f6e42726f6b65723a20416c7265616479206578656040820152651c98da5cd95960d21b606082015260800190565b60208082526023908201527f546170696f63614f7074696f6e42726f6b65723a204f7074696f6e20657870696040820152621c995960ea1b606082015260800190565b60008160001904831182151516156135e6576135e6612fc0565b500290565b6000602082840312156135fd57600080fd5b815160ff8116811461292f57600080fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0385811682528416602082015260606040820181905260009061297f9083018486613253565b6000602080838503121561366457600080fd5b82516001600160401b0381111561367a57600080fd5b8301601f8101851361368b57600080fd5b80516136996130c78261305c565b818152606091820283018401918482019190888411156136b857600080fd5b938501935b838510156137025780858a0312156136d55760008081fd5b6136dd613004565b85518152868601518782015260408087015190820152835293840193918501916136bd565b50979650505050505050565b600181815b8085111561374957816000190482111561372f5761372f612fc0565b8085161561373c57918102915b93841c9390800290613713565b509250929050565b6000826137605750600161273a565b8161376d5750600061273a565b8160018114613783576002811461378d576137a9565b600191505061273a565b60ff84111561379e5761379e612fc0565b50506001821b61273a565b5060208310610133831016604e8410600b84101617156137cc575081810a61273a565b6137d6838361370e565b80600019048211156137ea576137ea612fc0565b029392505050565b6000612737838361375156fea2646970667358221220d9a458c442db647126b5b5619fa7c90655bcf815a0c77d2355d039e60fbb5c2664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "collectPaymentTokens(address[])": {
        "params": {
          "_paymentTokens": "The payment tokens to collect"
        }
      },
      "exerciseOption(uint256,address,uint256)": {
        "params": {
          "_oTAPTokenID": "tokenId of the oTAP position, position must be active",
          "_paymentToken": "Address of the payment token to use, must be whitelisted",
          "_tapAmount": "Amount of TAP to exercise. If 0, the full amount is exercised"
        }
      },
      "exitPosition(uint256)": {
        "params": {
          "_oTAPTokenID": "The tokenId of the oTAP position"
        }
      },
      "getOTCDealDetails(uint256,address,uint256)": {
        "params": {
          "_oTAPTokenID": "The oTAP token ID",
          "_paymentToken": "The payment token",
          "_tapAmount": "The amount of TAP to be exchanged. If 0 it will use the full amount of TAP eligible for the deal"
        },
        "returns": {
          "eligibleTapAmount": "The amount of TAP eligible for the deal",
          "paymentTokenAmount": "The amount of payment tokens required for the deal"
        }
      },
      "participate(uint256)": {
        "params": {
          "_tOLPTokenID": "The tokenId of the tOLP position"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "setPaymentToken(address,address,bytes)": {
        "details": "set the oracle to address(0) to deactivate, expect the same decimal precision as TAP oracle"
      },
      "setPaymentTokenBeneficiary(address)": {
        "params": {
          "_paymentTokenBeneficiary": "The new payment token beneficiary"
        }
      },
      "setTapOracle(address,bytes)": {
        "params": {
          "_tapOracle": "The new TapOFT Oracle address",
          "_tapOracleData": "The new TapOFT Oracle data"
        }
      },
      "transferOwnership(address,bool,bool)": {
        "params": {
          "direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
          "newOwner": "Address of the new owner.",
          "renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimOwnership()": {
        "notice": "Needs to be called by `pendingOwner` to claim ownership."
      },
      "collectPaymentTokens(address[])": {
        "notice": "Collect the payment tokens from the OTC deals"
      },
      "constructor": {
        "notice": "=====-------======"
      },
      "exerciseOption(uint256,address,uint256)": {
        "notice": "Exercise an oTAP position"
      },
      "exitPosition(uint256)": {
        "notice": "Exit a twAML participation and delete the voting power if existing"
      },
      "getOTCDealDetails(uint256,address,uint256)": {
        "notice": "Returns the details of an OTC deal for a given oTAP token ID and a payment token.         The oracle uses the last peeked value, and not the latest one, so the payment amount may be different."
      },
      "newEpoch()": {
        "notice": "Start a new epoch, extract TAP from the TapOFT contract,         emit it to the active singularities and get the price of TAP for the epoch."
      },
      "oTAPBrokerClaim()": {
        "notice": "Claim the Broker role of the oTAP contract"
      },
      "participate(uint256)": {
        "notice": "Participate in twAMl voting and mint an oTAP position"
      },
      "setPaymentToken(address,address,bytes)": {
        "notice": "Activate or deactivate a payment token"
      },
      "setPaymentTokenBeneficiary(address)": {
        "notice": "Set the payment token beneficiary"
      },
      "setTapOracle(address,bytes)": {
        "notice": "Set the TapOFT Oracle address and data"
      },
      "transferOwnership(address,bool,bool)": {
        "notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
      },
      "twAML(uint256)": {
        "notice": "===== TWAML ======"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1867,
        "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 229,
        "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
        "label": "owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 231,
        "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8548,
        "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
        "label": "tapOracleData",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      },
      {
        "astId": 8557,
        "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
        "label": "tapOracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IOracle)6184"
      },
      {
        "astId": 8559,
        "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
        "label": "lastEpochUpdate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 8561,
        "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
        "label": "epochTAPValuation",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 8563,
        "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
        "label": "epoch",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 8568,
        "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
        "label": "participants",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Participation)8522_storage)"
      },
      {
        "astId": 8574,
        "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
        "label": "oTAPCalls",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 8580,
        "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
        "label": "singularityGauges",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 8586,
        "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
        "label": "paymentTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_contract(ERC20)2761,t_struct(PaymentTokenOracle)8537_storage)"
      },
      {
        "astId": 8588,
        "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
        "label": "paymentTokenBeneficiary",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 8594,
        "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
        "label": "twAML",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(TWAMLPool)8531_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20)2761": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)6184": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(ERC20)2761,t_struct(PaymentTokenOracle)8537_storage)": {
        "encoding": "mapping",
        "key": "t_contract(ERC20)2761",
        "label": "mapping(contract ERC20 => struct PaymentTokenOracle)",
        "numberOfBytes": "32",
        "value": "t_struct(PaymentTokenOracle)8537_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Participation)8522_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Participation)",
        "numberOfBytes": "32",
        "value": "t_struct(Participation)8522_storage"
      },
      "t_mapping(t_uint256,t_struct(TWAMLPool)8531_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TWAMLPool)",
        "numberOfBytes": "32",
        "value": "t_struct(TWAMLPool)8531_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Participation)8522_storage": {
        "encoding": "inplace",
        "label": "struct Participation",
        "members": [
          {
            "astId": 8517,
            "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
            "label": "hasVotingPower",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 8519,
            "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
            "label": "averageMagnitude",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8521,
            "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
            "label": "divergenceForce",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PaymentTokenOracle)8537_storage": {
        "encoding": "inplace",
        "label": "struct PaymentTokenOracle",
        "members": [
          {
            "astId": 8534,
            "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
            "label": "oracle",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IOracle)6184"
          },
          {
            "astId": 8536,
            "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
            "label": "oracleData",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TWAMLPool)8531_storage": {
        "encoding": "inplace",
        "label": "struct TWAMLPool",
        "members": [
          {
            "astId": 8524,
            "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
            "label": "totalParticipants",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8526,
            "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
            "label": "averageMagnitude",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8528,
            "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
            "label": "totalDeposited",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8530,
            "contract": "contracts/options/mocks/TapiocaOptionBrokerMock.sol:TapiocaOptionBrokerMock",
            "label": "cumulative",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}