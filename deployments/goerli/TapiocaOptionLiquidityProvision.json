{
  "address": "0x8514f907386C4dd6bf214d7c3178c15C9954877f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_yieldBox",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint128",
          "name": "sglAssetID",
          "type": "uint128"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "sglAssetID",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lockTime",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lockDuration",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct LockPosition",
          "name": "lockPosition",
          "type": "tuple"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint128",
          "name": "sglAssetID",
          "type": "uint128"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "sglAssetID",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lockTime",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lockDuration",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct LockPosition",
          "name": "lockPosition",
          "type": "tuple"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sgl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetID",
          "type": "uint256"
        }
      ],
      "name": "RegisterSingularity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sgl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolWeight",
          "type": "uint256"
        }
      ],
      "name": "SetSGLPoolWeight",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sgl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetID",
          "type": "uint256"
        }
      ],
      "name": "UnregisterSingularity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSingularityPoolWeights",
          "type": "uint256"
        }
      ],
      "name": "UpdateTotalSingularityPoolWeights",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activeSingularities",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sglAssetID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDeposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolWeight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getLock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "sglAssetID",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lockTime",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lockDuration",
              "type": "uint128"
            }
          ],
          "internalType": "struct LockPosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSingularities",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSingularityPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sglAssetID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "poolWeight",
              "type": "uint256"
            }
          ],
          "internalType": "struct SingularityPool[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sglAssetId",
          "type": "uint256"
        }
      ],
      "name": "getTotalPoolDeposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isApprovedOrOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_singularity",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_lockDuration",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_amount",
          "type": "uint128"
        }
      ],
      "name": "lock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockPositions",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "sglAssetID",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "lockTime",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "lockDuration",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "singularity",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "registerSingularity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "singularity",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "setSGLPoolWEight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sglAssetIDToAddress",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "singularities",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSingularityPoolWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_singularity",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "unlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sharesOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "singularity",
          "type": "address"
        }
      ],
      "name": "unregisterSingularity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldBox",
      "outputs": [
        {
          "internalType": "contract IYieldBox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xee7827cddd79864660fc63ca22bee0dc0709685e41b29d963d9cdea632a5ff3c",
  "receipt": {
    "to": null,
    "from": "0xEAF9f533871B07B151883908B4Fb6eeF4b51A95F",
    "contractAddress": "0x8514f907386C4dd6bf214d7c3178c15C9954877f",
    "transactionIndex": 53,
    "gasUsed": "2545547",
    "logsBloom": "0x
    "blockHash": "0x7ff5cb9f7e13224ac6c897fb60c9c52d23f2779ff47267d8729a19906103af3e",
    "transactionHash": "0xee7827cddd79864660fc63ca22bee0dc0709685e41b29d963d9cdea632a5ff3c",
    "logs": [
      {
        "transactionIndex": 53,
        "blockNumber": 8442416,
        "transactionHash": "0xee7827cddd79864660fc63ca22bee0dc0709685e41b29d963d9cdea632a5ff3c",
        "address": "0x8514f907386C4dd6bf214d7c3178c15C9954877f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000eaf9f533871b07b151883908b4fb6eef4b51a95f"
        ],
        "data": "0x",
        "logIndex": 122,
        "blockHash": "0x7ff5cb9f7e13224ac6c897fb60c9c52d23f2779ff47267d8729a19906103af3e"
      }
    ],
    "blockNumber": 8442416,
    "cumulativeGasUsed": "9356303",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCA3604D7Df34a785D20Cbe7A0Bbd0AF54E9FeF9e"
  ],
  "numDeployments": 1,
  "solcInputHash": "d79516b0d913dedf942c967799e79a5a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yieldBox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"sglAssetID\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"sglAssetID\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockDuration\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct LockPosition\",\"name\":\"lockPosition\",\"type\":\"tuple\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"sglAssetID\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"sglAssetID\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockDuration\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct LockPosition\",\"name\":\"lockPosition\",\"type\":\"tuple\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sgl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetID\",\"type\":\"uint256\"}],\"name\":\"RegisterSingularity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sgl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolWeight\",\"type\":\"uint256\"}],\"name\":\"SetSGLPoolWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sgl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetID\",\"type\":\"uint256\"}],\"name\":\"UnregisterSingularity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSingularityPoolWeights\",\"type\":\"uint256\"}],\"name\":\"UpdateTotalSingularityPoolWeights\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeSingularities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sglAssetID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"sglAssetID\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockDuration\",\"type\":\"uint128\"}],\"internalType\":\"struct LockPosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSingularities\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSingularityPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sglAssetID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolWeight\",\"type\":\"uint256\"}],\"internalType\":\"struct SingularityPool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sglAssetId\",\"type\":\"uint256\"}],\"name\":\"getTotalPoolDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_singularity\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_lockDuration\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockPositions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"sglAssetID\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockDuration\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"singularity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"registerSingularity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"singularity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"setSGLPoolWEight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sglAssetIDToAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"singularities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSingularityPoolWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_singularity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"singularity\",\"type\":\"address\"}],\"name\":\"unregisterSingularity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldBox\",\"outputs\":[{\"internalType\":\"contract IYieldBox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getLock(uint256)\":{\"params\":{\"_tokenId\":\"tOLP NFT ID\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"lock(address,address,address,uint128,uint128)\":{\"params\":{\"_amount\":\"Amount of tOLR tokens to lock\",\"_from\":\"Address to transfer the SGL tokens from\",\"_lockDuration\":\"Duration of the lock\",\"_singularity\":\"Singularity market address\",\"_to\":\"Address to mint the tOLP NFT to\"},\"returns\":{\"tokenId\":\"The ID of the minted NFT\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"registerSingularity(address,uint256,uint256)\":{\"params\":{\"assetID\":\"YieldBox asset ID of the singularity market\",\"singularity\":\"Singularity market address\",\"weight\":\"Weight of the pool\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setSGLPoolWEight(address,uint256)\":{\"params\":{\"singularity\":\"Singularity market address\",\"weight\":\"Weight of the pool\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}},\"unlock(uint256,address,address)\":{\"details\":\"We purposefully don't burn the `tokenID` and `lockPosition`, \\u03b1.      We can rely on lockPosition.time and lockPosition.duration to check if the lock is expired.\",\"params\":{\"_singularity\":\"Singularity market address\",\"_to\":\"Address to send the tokens to\",\"_tokenId\":\"ID of the position to unlock\"}},\"unregisterSingularity(address)\":{\"params\":{\"singularity\":\"Singularity market address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"getLock(uint256)\":{\"notice\":\"Returns the lock position of a given tOLP NFT and if it's active\"},\"getSingularities()\":{\"notice\":\"Returns the active singularity YieldBox ID markets\"},\"getSingularityPools()\":{\"notice\":\"Returns the active singularity pool data\"},\"getTotalPoolDeposited(uint256)\":{\"notice\":\"Returns the total amount of locked tokens for a given singularity market\"},\"lock(address,address,address,uint128,uint128)\":{\"notice\":\"Locks tOLR tokens for a given duration\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"ERC1155 compliance\"},\"registerSingularity(address,uint256,uint256)\":{\"notice\":\"Registers a new singularity market\"},\"setSGLPoolWEight(address,uint256)\":{\"notice\":\"Sets the pool weight of a given singularity market\"},\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"},\"unlock(uint256,address,address)\":{\"notice\":\"Unlocks tOLP tokens\"},\"unregisterSingularity(address)\":{\"notice\":\"Un-registers a singularity market\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/options/TapiocaOptionLiquidityProvision.sol\":\"TapiocaOptionLiquidityProvision\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@boringcrypto/boring-solidity/contracts/BoringOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Simplified by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x5c95af9d26812f279c232d8908c3e2e4ab5054ec1a76275589be4b40857a281c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/IYieldBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title TokenType\\n/// @author BoringCrypto (@Boring_Crypto)\\n/// @notice The YieldBox can hold different types of tokens:\\n/// Native: These are ERC1155 tokens native to YieldBox.\\n///     Protocols using YieldBox should use these is possible when simple token creation is needed.\\n/// ERC20: ERC20 tokens (including rebasing tokens) can be added to the YieldBox.\\n/// ERC1155: ERC1155 tokens are also supported.\\n///     This can also be used to add YieldBox Native tokens to strategies since they are ERC1155 tokens.\\nenum TokenType {\\n    Native,\\n    ERC20,\\n    ERC721,\\n    ERC1155,\\n    None\\n}\\n\\ninterface IYieldBox {\\n    function wrappedNative() external view returns (address wrappedNative);\\n\\n    function balanceOf(address to, uint256 assetId) external view returns (uint256 balance);\\n\\n    function deposit(\\n        TokenType tokenType,\\n        address contractAddress,\\n        address strategy,\\n        uint256 tokenId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function assets(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            TokenType tokenType,\\n            address contractAddress,\\n            address strategy,\\n            uint256 tokenId\\n        );\\n\\n    function nativeTokens(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory symbol,\\n            uint8 decimals\\n        );\\n\\n    function owner(uint256 assetId) external view returns (address owner);\\n\\n    function totalSupply(uint256 assetId) external view returns (uint256 totalSupply);\\n\\n    function depositAsset(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function withdraw(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 assetId,\\n        uint256 share\\n    ) external;\\n\\n    function batchTransfer(\\n        address from,\\n        address to,\\n        uint256[] calldata assetIds_,\\n        uint256[] calldata shares_\\n    ) external;\\n\\n    function transferMultiple(\\n        address from,\\n        address[] calldata tos,\\n        uint256 assetId,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    function toShare(\\n        uint256 assetId,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    function toAmount(\\n        uint256 assetId,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x2ab9578ecaa3962e72229a157f6f445ad89b722c72856b9b32beb359cdc8418c\",\"license\":\"MIT\"},\"contracts/options/TapiocaOptionLiquidityProvision.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol';\\nimport '@boringcrypto/boring-solidity/contracts/BoringOwnable.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport '../interfaces/IYieldBox.sol';\\n\\n//\\n//                 .(%%%%%%%%%%%%*       *\\n//             #%%%%%%%%%%%%%%%%%%%%*  ####*\\n//          #%%%%%%%%%%%%%%%%%%%%%#  /####\\n//       ,%%%%%%%%%%%%%%%%%%%%%%%   ####.  %\\n//                                #####\\n//                              #####\\n//   #####%#####              *####*  ####%#####*\\n//  (#########(              #####     ##########.\\n//  ##########             #####.      .##########\\n//                       ,####/\\n//                      #####\\n//  %%%%%%%%%%        (####.           *%%%%%%%%%#\\n//  .%%%%%%%%%%     *####(            .%%%%%%%%%%\\n//   *%%%%%%%%%%   #####             #%%%%%%%%%%\\n//               (####.\\n//      ,((((  ,####(          /(((((((((((((\\n//        *,  #####  ,(((((((((((((((((((((\\n//          (####   ((((((((((((((((((((/\\n//         ####*  (((((((((((((((((((\\n//                     ,**//*,.\\n\\nstruct LockPosition {\\n    uint128 sglAssetID; // Singularity market YieldBox asset ID\\n    uint128 amount; // amount of tOLR tokens locked.\\n    uint128 lockTime; // time when the tokens were locked\\n    uint128 lockDuration; // duration of the lock\\n}\\n\\nstruct SingularityPool {\\n    uint256 sglAssetID; // Singularity market YieldBox asset ID\\n    uint256 totalDeposited; // total amount of tOLR tokens deposited, used for pool share calculation\\n    uint256 poolWeight; // Pool weight to calculate emission\\n}\\n\\ncontract TapiocaOptionLiquidityProvision is ERC721, Pausable, BoringOwnable {\\n    uint256 public tokenCounter; // Counter for token IDs\\n    mapping(uint256 => LockPosition) public lockPositions; // TokenID => LockPosition\\n\\n    IYieldBox public immutable yieldBox;\\n\\n    // Singularity market address => SingularityPool (YieldBox Asset ID is 0 if not active)\\n    mapping(IERC20 => SingularityPool) public activeSingularities;\\n    mapping(uint256 => IERC20) public sglAssetIDToAddress; // Singularity market YieldBox asset ID => Singularity market address\\n    uint256[] public singularities; // Array of active singularity asset IDs\\n\\n    uint256 public totalSingularityPoolWeights; // Total weight of all active singularity pools\\n\\n    constructor(address _yieldBox) ERC721('TapiocaOptionLiquidityProvision', 'tOLP') {\\n        yieldBox = IYieldBox(_yieldBox);\\n    }\\n\\n    // ==========\\n    //   EVENTS\\n    // ==========\\n    event Mint(address indexed to, uint128 indexed sglAssetID, LockPosition lockPosition);\\n    event Burn(address indexed to, uint128 indexed sglAssetID, LockPosition lockPosition);\\n    event UpdateTotalSingularityPoolWeights(uint256 totalSingularityPoolWeights);\\n    event SetSGLPoolWeight(address sgl, uint256 poolWeight);\\n    event RegisterSingularity(address sgl, uint256 assetID);\\n    event UnregisterSingularity(address sgl, uint256 assetID);\\n\\n    // ===============\\n    //    MODIFIERS\\n    // ===============\\n    modifier updateTotalSGLPoolWeights() {\\n        _;\\n        totalSingularityPoolWeights = _computeSGLPoolWeights();\\n        emit UpdateTotalSingularityPoolWeights(totalSingularityPoolWeights);\\n    }\\n\\n    // =========\\n    //    READ\\n    // =========\\n    /// @notice Returns the lock position of a given tOLP NFT and if it's active\\n    /// @param _tokenId tOLP NFT ID\\n    function getLock(uint256 _tokenId) external view returns (bool, LockPosition memory) {\\n        LockPosition memory lockPosition = lockPositions[_tokenId];\\n\\n        return (_isPositionActive(_tokenId), lockPosition);\\n    }\\n\\n    /// @notice Returns the active singularity YieldBox ID markets\\n    function getSingularities() external view returns (uint256[] memory) {\\n        return singularities;\\n    }\\n\\n    /// @notice Returns the active singularity pool data\\n    function getSingularityPools() external view returns (SingularityPool[] memory) {\\n        uint256 len = singularities.length;\\n\\n        SingularityPool[] memory pools = new SingularityPool[](len);\\n        unchecked {\\n            for (uint256 i = 0; i < len; ++i) {\\n                pools[i] = activeSingularities[sglAssetIDToAddress[singularities[i]]];\\n            }\\n        }\\n        return pools;\\n    }\\n\\n    /// @notice Returns the total amount of locked tokens for a given singularity market\\n    function getTotalPoolDeposited(uint256 _sglAssetId) external view returns (uint256) {\\n        return activeSingularities[sglAssetIDToAddress[_sglAssetId]].totalDeposited;\\n    }\\n\\n    function isApprovedOrOwner(address _spender, uint256 _tokenId) external view returns (bool) {\\n        return _isApprovedOrOwner(_spender, _tokenId);\\n    }\\n\\n    // ==========\\n    //    WRITE\\n    // ==========\\n\\n    /// @notice Locks tOLR tokens for a given duration\\n    /// @param _from Address to transfer the SGL tokens from\\n    /// @param _to Address to mint the tOLP NFT to\\n    /// @param _singularity Singularity market address\\n    /// @param _lockDuration Duration of the lock\\n    /// @param _amount Amount of tOLR tokens to lock\\n    /// @return tokenId The ID of the minted NFT\\n    function lock(\\n        address _from,\\n        address _to,\\n        IERC20 _singularity,\\n        uint128 _lockDuration,\\n        uint128 _amount\\n    ) external returns (uint256 tokenId) {\\n        require(_lockDuration > 0, 'tOLP: lock duration must be > 0');\\n        require(_amount > 0, 'tOLP: amount must be > 0');\\n\\n        uint256 sglAssetID = activeSingularities[_singularity].sglAssetID;\\n        require(sglAssetID > 0, 'tOLP: singularity not active');\\n\\n        // Transfer the Singularity position to this contract\\n        uint256 sharesIn = yieldBox.toShare(sglAssetID, _amount, false);\\n\\n        yieldBox.transfer(_from, address(this), sglAssetID, sharesIn);\\n        activeSingularities[_singularity].totalDeposited += _amount;\\n\\n        // Mint the tOLP NFT position\\n        tokenId = ++tokenCounter;\\n        _safeMint(_to, tokenId);\\n\\n        // Create the lock position\\n        LockPosition storage lockPosition = lockPositions[tokenId];\\n        lockPosition.lockTime = uint128(block.timestamp);\\n        lockPosition.sglAssetID = uint128(sglAssetID);\\n        lockPosition.lockDuration = _lockDuration;\\n        lockPosition.amount = _amount;\\n\\n        emit Mint(_to, uint128(sglAssetID), lockPosition);\\n    }\\n\\n    /// @notice Unlocks tOLP tokens\\n    /// @dev We purposefully don't burn the `tokenID` and `lockPosition`, \\u03b1.\\n    ///      We can rely on lockPosition.time and lockPosition.duration to check if the lock is expired.\\n    /// @param _tokenId ID of the position to unlock\\n    /// @param _singularity Singularity market address\\n    /// @param _to Address to send the tokens to\\n    function unlock(\\n        uint256 _tokenId,\\n        IERC20 _singularity,\\n        address _to\\n    ) external returns (uint256 sharesOut) {\\n        LockPosition memory lockPosition = lockPositions[_tokenId];\\n        require(block.timestamp >= lockPosition.lockTime + lockPosition.lockDuration, 'tOLP: Lock not expired');\\n        require(activeSingularities[_singularity].sglAssetID == lockPosition.sglAssetID, 'tOLP: Invalid singularity');\\n\\n        require(_isApprovedOrOwner(msg.sender, _tokenId), 'tOLP: not owner nor approved');\\n\\n        // _burn(_tokenId);\\n        // delete lockPositions[_tokenId];\\n\\n        // Transfer the tOLR tokens back to the owner\\n        sharesOut = yieldBox.toShare(lockPosition.sglAssetID, lockPosition.amount, false);\\n\\n        yieldBox.transfer(address(this), _to, lockPosition.sglAssetID, sharesOut);\\n        activeSingularities[_singularity].totalDeposited -= lockPosition.amount;\\n\\n        emit Burn(_to, lockPosition.sglAssetID, lockPosition);\\n    }\\n\\n    // =========\\n    //   OWNER\\n    // =========\\n\\n    /// @notice Sets the pool weight of a given singularity market\\n    /// @param singularity Singularity market address\\n    /// @param weight Weight of the pool\\n    function setSGLPoolWEight(IERC20 singularity, uint256 weight) external onlyOwner updateTotalSGLPoolWeights {\\n        require(activeSingularities[singularity].sglAssetID > 0, 'TapiocaOptions: not registered');\\n        activeSingularities[singularity].poolWeight = weight;\\n\\n        emit SetSGLPoolWeight(address(singularity), weight);\\n    }\\n\\n    /// @notice Registers a new singularity market\\n    /// @param singularity Singularity market address\\n    /// @param assetID YieldBox asset ID of the singularity market\\n    /// @param weight Weight of the pool\\n    function registerSingularity(\\n        IERC20 singularity,\\n        uint256 assetID,\\n        uint256 weight\\n    ) external onlyOwner updateTotalSGLPoolWeights {\\n        require(activeSingularities[singularity].sglAssetID == 0, 'TapiocaOptions: already registered');\\n\\n        activeSingularities[singularity].sglAssetID = assetID;\\n        activeSingularities[singularity].poolWeight = weight > 0 ? weight : 1;\\n        sglAssetIDToAddress[assetID] = singularity;\\n        singularities.push(assetID);\\n\\n        emit RegisterSingularity(address(singularity), assetID);\\n    }\\n\\n    /// @notice Un-registers a singularity market\\n    /// @param singularity Singularity market address\\n    function unregisterSingularity(IERC20 singularity) external onlyOwner updateTotalSGLPoolWeights {\\n        uint256 sglAssetID = activeSingularities[singularity].sglAssetID;\\n        require(sglAssetID > 0, 'TapiocaOptions: not registered');\\n\\n        unchecked {\\n            uint256[] memory _singularities = singularities;\\n            uint256 sglLength = _singularities.length;\\n            uint256 sglLastIndex = sglLength - 1;\\n\\n            for (uint256 i = 0; i < sglLength; i++) {\\n                // If in the middle, delete data and move last element to the deleted position, then pop\\n                if (_singularities[i] == sglAssetID && i < sglLastIndex) {\\n                    delete activeSingularities[singularity];\\n                    delete sglAssetIDToAddress[sglAssetID];\\n                    delete singularities[i];\\n\\n                    singularities[i] = _singularities[sglLastIndex];\\n                    singularities.pop();\\n\\n                    break;\\n                } else {\\n                    // If last element, just pop\\n                    delete activeSingularities[singularity];\\n                    delete sglAssetIDToAddress[sglAssetID];\\n                    delete singularities[sglLastIndex];\\n                    singularities.pop();\\n                }\\n            }\\n        }\\n\\n        emit UnregisterSingularity(address(singularity), sglAssetID);\\n    }\\n\\n    // =========\\n    //  INTERNAL\\n    // =========\\n\\n    /// @notice Compute the total pool weight of all active singularity markets\\n    function _computeSGLPoolWeights() internal view returns (uint256) {\\n        uint256 total;\\n        uint256 len = singularities.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            total += activeSingularities[sglAssetIDToAddress[singularities[i]]].poolWeight;\\n        }\\n\\n        return total;\\n    }\\n\\n    /// @notice Checks if the lock position is still active\\n    function _isPositionActive(uint256 tokenId) internal view returns (bool) {\\n        LockPosition memory lockPosition = lockPositions[tokenId];\\n\\n        return (lockPosition.lockTime + lockPosition.lockDuration) >= block.timestamp;\\n    }\\n\\n    /// @notice ERC1155 compliance\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return bytes4(keccak256('onERC1155Received(address,address,uint256,uint256,bytes)'));\\n    }\\n}\\n\",\"keccak256\":\"0x3148c9b64a0f335175ef968caa3c4e8d29f84866c6223b0d1d01807219bcd5be\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002e0a38038062002e0a8339810160408190526200003491620001af565b604080518082018252601f81527f546170696f63614f7074696f6e4c697175696469747950726f766973696f6e006020808301918252835180850190945260048452630744f4c560e41b908401528151919291620000959160009162000109565b508051620000ab90600190602084019062000109565b5050600680546001600160a81b03191661010033908102919091179091556040519091506000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600160a01b03166080526200021e565b8280546200011790620001e1565b90600052602060002090601f0160209004810192826200013b576000855562000186565b82601f106200015657805160ff191683800117855562000186565b8280016001018555821562000186579182015b828111156200018657825182559160200191906001019062000169565b506200019492915062000198565b5090565b5b8082111562000194576000815560010162000199565b600060208284031215620001c257600080fd5b81516001600160a01b0381168114620001da57600080fd5b9392505050565b600181811c90821680620001f657607f821691505b602082108114156200021857634e487b7160e01b600052602260045260246000fd5b50919050565b608051612bb4620002566000396000818161054401528181610d6001528181610e180152818161135501526114180152612bb46000f3fe608060405234801561001057600080fd5b50600436106101dc5760003560e01c806363ef67b111610105578063bf3497041161009d578063bf349704146104b6578063c87b56dd146104ef578063d082e38114610502578063d487206f1461050b578063d68f4dd11461051e578063de4065771461053f578063e30c397814610566578063e985e9c514610579578063f23a6e611461058c57600080fd5b806363ef67b1146103f957806370a082311461040c57806389fd39701461041f5780638da5cb5b1461044857806395d89b4114610460578063a22cb46514610468578063a7bffffc1461047b578063b222e09514610490578063b88d4fde146104a357600080fd5b806331df8d141161017857806331df8d14146103285780633873b0cd1461033b57806342842e0e14610385578063430c2081146103985780634e71e0c8146103ab5780635c975abb146103b35780635d9b9bba146103be57806361b9cd1e146103d35780636352211e146103e657600080fd5b806301ffc9a7146101e157806306fdde0314610209578063078dfbe71461021e578063081812fc14610233578063095ea7b31461025e5780631678e4f61461027157806317655090146102885780631b7567101461030257806323b872dd14610315575b600080fd5b6101f46101ef3660046122a9565b6105de565b60405190151581526020015b60405180910390f35b610211610630565b604051610200919061231e565b61023161022c36600461235b565b6106c2565b005b6102466102413660046123a0565b6107ef565b6040516001600160a01b039091168152602001610200565b61023161026c3660046123b9565b610816565b61027a600d5481565b604051908152602001610200565b6102cf6102963660046123a0565b600960205260009081526040902080546001909101546001600160801b0380831692600160801b90819004821692808316929190041684565b604080516001600160801b0395861681529385166020850152918416918301919091529091166060820152608001610200565b6102316103103660046123e5565b610927565b610231610323366004612402565b610bec565b61027a61033636600461245a565b610c1d565b61036a6103493660046123e5565b600a6020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610200565b610231610393366004612402565b610f87565b6101f46103a63660046123b9565b610fa2565b610231610fb5565b60065460ff166101f4565b6103c6611087565b60405161020091906124c5565b61027a6103e136600461251e565b6111ab565b6102466103f43660046123a0565b611517565b61027a6104073660046123a0565b61154c565b61027a61041a3660046123e5565b61156d565b61024661042d3660046123a0565b600b602052600090815260409020546001600160a01b031681565b6006546102469061010090046001600160a01b031681565b6102116115f3565b610231610476366004612560565b611602565b610483611611565b6040516102009190612595565b61023161049e3660046123b9565b611668565b6102316104b13660046125ef565b611756565b61027a6104c43660046123a0565b6000908152600b60209081526040808320546001600160a01b03168352600a90915290206001015490565b6102116104fd3660046123a0565b61178e565b61027a60085481565b6102316105193660046126cf565b611801565b61053161052c3660046123a0565b6119a4565b604051610200929190612737565b6102467f000000000000000000000000000000000000000000000000000000000000000081565b600754610246906001600160a01b031681565b6101f461058736600461274d565b611a2c565b6105c561059a366004612786565b7ff23a6e612e1ff4830e658fe43f4e3cb4a5f8170bd5d9e69fb5d7a7fa9e4fdf979695505050505050565b6040516001600160e01b03199091168152602001610200565b60006001600160e01b031982166380ac58cd60e01b148061060f57506001600160e01b03198216635b5e139f60e01b145b8061062a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461063f90612830565b80601f016020809104026020016040519081016040528092919081815260200182805461066b90612830565b80156106b85780601f1061068d576101008083540402835291602001916106b8565b820191906000526020600020905b81548152906001019060200180831161069b57829003601f168201915b5050505050905090565b60065461010090046001600160a01b031633146106fa5760405162461bcd60e51b81526004016106f19061286b565b60405180910390fd5b81156107ce576001600160a01b0383161515806107145750805b6107585760405162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b60448201526064016106f1565b6006546040516001600160a01b0380861692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b03851661010002610100600160a81b0319909116179055600780546001600160a01b0319169055505050565b600780546001600160a01b0319166001600160a01b0385161790555b505050565b60006107fa82611a5a565b506000908152600460205260409020546001600160a01b031690565b600061082182611517565b9050806001600160a01b0316836001600160a01b0316141561088f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106f1565b336001600160a01b03821614806108ab57506108ab8133611a2c565b61091d5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016106f1565b6107ea8383611a91565b60065461010090046001600160a01b031633146109565760405162461bcd60e51b81526004016106f19061286b565b6001600160a01b0381166000908152600a60205260409020548061098c5760405162461bcd60e51b81526004016106f1906128a0565b6000600c8054806020026020016040519081016040528092919081815260200182805480156109da57602002820191906000526020600020905b8154815260200190600101908083116109c6575b505083519394505060001983019150600090505b82811015610b7d5784848281518110610a0957610a096128d7565b6020026020010151148015610a1d57508181105b15610aec576001600160a01b0386166000908152600a6020908152604080832083815560018101849055600201839055878352600b909152902080546001600160a01b0319169055600c805482908110610a7957610a796128d7565b9060005260206000200160009055838281518110610a9957610a996128d7565b6020026020010151600c8281548110610ab457610ab46128d7565b600091825260209091200155600c805480610ad157610ad16128ed565b60019003818190600052602060002001600090559055610b7d565b6001600160a01b0386166000908152600a6020908152604080832083815560018101849055600201839055878352600b909152902080546001600160a01b0319169055600c805483908110610b4357610b436128d7565b6000918252602082200155600c805480610b5f57610b5f6128ed565b600190038181906000526020600020016000905590556001016109ee565b505050507f650727fb147d404992e2dd3fc82d96fd303e09a64075e7d5092d1361bb7befd18282604051610bb2929190612903565b60405180910390a150610bc3611aff565b600d819055604051908152600080516020612b5f8339815191529060200160405180910390a150565b610bf63382611b8b565b610c125760405162461bcd60e51b81526004016106f19061291c565b6107ea838383611bea565b600080836001600160801b031611610c775760405162461bcd60e51b815260206004820152601f60248201527f744f4c503a206c6f636b206475726174696f6e206d757374206265203e20300060448201526064016106f1565b6000826001600160801b031611610ccb5760405162461bcd60e51b81526020600482015260186024820152770744f4c503a20616d6f756e74206d757374206265203e20360441b60448201526064016106f1565b6001600160a01b0384166000908152600a602052604090205480610d315760405162461bcd60e51b815260206004820152601c60248201527f744f4c503a2073696e67756c6172697479206e6f74206163746976650000000060448201526064016106f1565b604051638eb22cdd60e01b8152600481018290526001600160801b0384166024820152600060448201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638eb22cdd9060640160206040518083038186803b158015610daa57600080fd5b505afa158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de2919061296a565b604051630208d92960e11b81526001600160a01b038a8116600483015230602483015260448201859052606482018390529192507f000000000000000000000000000000000000000000000000000000000000000090911690630411b25290608401600060405180830381600087803b158015610e5e57600080fd5b505af1158015610e72573d6000803e3d6000fd5b505050506001600160a01b0386166000908152600a6020526040812060010180546001600160801b0387169290610eaa908490612999565b909155505060088054600090610ebf906129b1565b91829055509250610ed08784611d86565b600083815260096020526040908190206001600160801b03878116600160801b90810242831617600184015587821602908516908117825591519091906001600160a01b038a16907f0ecba5daa08a4b1cbd80676383ad5fdb38bd304cfb87375527c23e841f21f70790610f7390859081546001600160801b038082168352608091821c6020840152600190930154928316604083015291821c60608201520190565b60405180910390a350505095945050505050565b6107ea83838360405180602001604052806000815250611756565b6000610fae8383611b8b565b9392505050565b6007546001600160a01b03163381146110105760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e657260448201526064016106f1565b6006546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0390921661010002610100600160a81b0319909216919091179055600780546001600160a01b0319169055565b600c5460609060008167ffffffffffffffff8111156110a8576110a86125d9565b6040519080825280602002602001820160405280156110fd57816020015b6110ea60405180606001604052806000815260200160008152602001600081525090565b8152602001906001900390816110c65790505b50905060005b828110156111a457600a6000600b6000600c8581548110611126576111266128d7565b600091825260208083209091015483528281019390935260409182018120546001600160a01b031684528383019490945291820190922081516060810183528154815260018201549381019390935260020154908201528251839083908110611191576111916128d7565b6020908102919091010152600101611103565b5092915050565b6000838152600960209081526040808320815160808101835281546001600160801b038082168352600160801b91829004811695830195909552600190920154808516938201849052919091049092166060830181905261120b916129cc565b6001600160801b031642101561125c5760405162461bcd60e51b81526020600482015260166024820152751d13d3140e88131bd8dac81b9bdd08195e1c1a5c995960521b60448201526064016106f1565b80516001600160a01b0385166000908152600a60205260409020546001600160801b03909116146112cb5760405162461bcd60e51b8152602060048201526019602482015278744f4c503a20496e76616c69642073696e67756c617269747960381b60448201526064016106f1565b6112d53386611b8b565b6113215760405162461bcd60e51b815260206004820152601c60248201527f744f4c503a206e6f74206f776e6572206e6f7220617070726f7665640000000060448201526064016106f1565b80516020820151604051638eb22cdd60e01b81526001600160801b03928316600482015291166024820152600060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638eb22cdd9060640160206040518083038186803b15801561139f57600080fd5b505afa1580156113b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d7919061296a565b8151604051630208d92960e11b81523060048201526001600160a01b0386811660248301526001600160801b039092166044820152606481018390529193507f00000000000000000000000000000000000000000000000000000000000000001690630411b25290608401600060405180830381600087803b15801561145c57600080fd5b505af1158015611470573d6000803e3d6000fd5b5050505080602001516001600160801b0316600a6000866001600160a01b03166001600160a01b0316815260200190815260200160002060010160008282546114b991906129f7565b9250508190555080600001516001600160801b0316836001600160a01b03167f49a51d755b4ec7c1bd939eabd0addff55713d7d5d146dc35b9781f0ca704131c836040516115079190612a0e565b60405180910390a3509392505050565b6000818152600260205260408120546001600160a01b03168061062a5760405162461bcd60e51b81526004016106f190612a1c565b600c818154811061155c57600080fd5b600091825260209091200154905081565b60006001600160a01b0382166115d75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016106f1565b506001600160a01b031660009081526003602052604090205490565b60606001805461063f90612830565b61160d338383611da0565b5050565b6060600c8054806020026020016040519081016040528092919081815260200182805480156106b857602002820191906000526020600020905b81548152602001906001019080831161164b575050505050905090565b60065461010090046001600160a01b031633146116975760405162461bcd60e51b81526004016106f19061286b565b6001600160a01b0382166000908152600a60205260409020546116cc5760405162461bcd60e51b81526004016106f1906128a0565b6001600160a01b0382166000908152600a602052604090819020600201829055517f0c1acb72620e2739824c28ca1a4d6ff1c976623c0cb1b55718c00ba54d6b58d29061171c9084908490612903565b60405180910390a161172c611aff565b600d819055604051908152600080516020612b5f8339815191529060200160405180910390a15050565b6117603383611b8b565b61177c5760405162461bcd60e51b81526004016106f19061291c565b61178884848484611e6b565b50505050565b606061179982611a5a565b60006117b060408051602081019091526000815290565b905060008151116117d05760405180602001604052806000815250610fae565b806117da84611e9e565b6040516020016117eb929190612a4e565b6040516020818303038152906040529392505050565b60065461010090046001600160a01b031633146118305760405162461bcd60e51b81526004016106f19061286b565b6001600160a01b0383166000908152600a6020526040902054156118a15760405162461bcd60e51b815260206004820152602260248201527f546170696f63614f7074696f6e733a20616c7265616479207265676973746572604482015261195960f21b60648201526084016106f1565b6001600160a01b0383166000908152600a60205260409020829055806118c85760016118ca565b805b6001600160a01b0384166000818152600a6020908152604080832060020194909455858252600b905282812080546001600160a01b031916909217909155600c805460018101825591527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701839055517ff7c8e4ce85d8395b55ee446757029d0926764b38025301b06b35bb4abd9cd9b6906119699085908590612903565b60405180910390a1611979611aff565b600d819055604051908152600080516020612b5f8339815191529060200160405180910390a1505050565b6040805160808101825260008082526020820181905291810182905260608101829052600083815260096020908152604091829020825160808101845281546001600160801b038082168352600160801b91829004811694830194909452600190920154808416948201949094529204166060820152611a2384611f9c565b94909350915050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000818152600260205260409020546001600160a01b0316611a8e5760405162461bcd60e51b81526004016106f190612a1c565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611ac682611517565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600c546000908190815b81811015611b8357600a6000600b6000600c8581548110611b2c57611b2c6128d7565b600091825260208083209091015483528281019390935260409182018120546001600160a01b03168452918301939093529101902060020154611b6f9084612999565b925080611b7b816129b1565b915050611b09565b509092915050565b600080611b9783611517565b9050806001600160a01b0316846001600160a01b03161480611bbe5750611bbe8185611a2c565b80611be25750836001600160a01b0316611bd7846107ef565b6001600160a01b0316145b949350505050565b826001600160a01b0316611bfd82611517565b6001600160a01b031614611c615760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016106f1565b6001600160a01b038216611cc35760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106f1565b611cce600082611a91565b6001600160a01b0383166000908152600360205260408120805460019290611cf79084906129f7565b90915550506001600160a01b0382166000908152600360205260408120805460019290611d25908490612999565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61160d828260405180602001604052806000815250612011565b816001600160a01b0316836001600160a01b03161415611dfe5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016106f1565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611e76848484611bea565b611e8284848484612044565b6117885760405162461bcd60e51b81526004016106f190612a74565b606081611ec25750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611eec5780611ed6816129b1565b9150611ee59050600a83612adc565b9150611ec6565b60008167ffffffffffffffff811115611f0757611f076125d9565b6040519080825280601f01601f191660200182016040528015611f31576020820181803683370190505b5090505b8415611be257611f466001836129f7565b9150611f53600a86612af0565b611f5e906030612999565b60f81b818381518110611f7357611f736128d7565b60200101906001600160f81b031916908160001a905350611f95600a86612adc565b9450611f35565b6000818152600960209081526040808320815160808101835281546001600160801b038082168352600160801b9182900481169583019590955260019092015480851693820184905291909104909216606083018190524291611fff91906129cc565b6001600160801b031610159392505050565b61201b8383612151565b6120286000848484612044565b6107ea5760405162461bcd60e51b81526004016106f190612a74565b60006001600160a01b0384163b1561214657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612088903390899088908890600401612b04565b602060405180830381600087803b1580156120a257600080fd5b505af19250505080156120d2575060408051601f3d908101601f191682019092526120cf91810190612b41565b60015b61212c573d808015612100576040519150601f19603f3d011682016040523d82523d6000602084013e612105565b606091505b5080516121245760405162461bcd60e51b81526004016106f190612a74565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611be2565b506001949350505050565b6001600160a01b0382166121a75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106f1565b6000818152600260205260409020546001600160a01b03161561220c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106f1565b6001600160a01b0382166000908152600360205260408120805460019290612235908490612999565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b031981168114611a8e57600080fd5b6000602082840312156122bb57600080fd5b8135610fae81612293565b60005b838110156122e15781810151838201526020016122c9565b838111156117885750506000910152565b6000815180845261230a8160208601602086016122c6565b601f01601f19169290920160200192915050565b602081526000610fae60208301846122f2565b6001600160a01b0381168114611a8e57600080fd5b8035801515811461235657600080fd5b919050565b60008060006060848603121561237057600080fd5b833561237b81612331565b925061238960208501612346565b915061239760408501612346565b90509250925092565b6000602082840312156123b257600080fd5b5035919050565b600080604083850312156123cc57600080fd5b82356123d781612331565b946020939093013593505050565b6000602082840312156123f757600080fd5b8135610fae81612331565b60008060006060848603121561241757600080fd5b833561242281612331565b9250602084013561243281612331565b929592945050506040919091013590565b80356001600160801b038116811461235657600080fd5b600080600080600060a0868803121561247257600080fd5b853561247d81612331565b9450602086013561248d81612331565b9350604086013561249d81612331565b92506124ab60608701612443565b91506124b960808701612443565b90509295509295909350565b602080825282518282018190526000919060409081850190868401855b8281101561251157815180518552868101518786015285015185850152606090930192908501906001016124e2565b5091979650505050505050565b60008060006060848603121561253357600080fd5b83359250602084013561254581612331565b9150604084013561255581612331565b809150509250925092565b6000806040838503121561257357600080fd5b823561257e81612331565b915061258c60208401612346565b90509250929050565b6020808252825182820181905260009190848201906040850190845b818110156125cd578351835292840192918401916001016125b1565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561260557600080fd5b843561261081612331565b9350602085013561262081612331565b925060408501359150606085013567ffffffffffffffff8082111561264457600080fd5b818701915087601f83011261265857600080fd5b81358181111561266a5761266a6125d9565b604051601f8201601f19908116603f01168101908382118183101715612692576126926125d9565b816040528281528a60208487010111156126ab57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806000606084860312156126e457600080fd5b83356126ef81612331565b95602085013595506040909401359392505050565b80516001600160801b03908116835260208083015182169084015260408083015182169084015260609182015116910152565b821515815260a08101610fae6020830184612704565b6000806040838503121561276057600080fd5b823561276b81612331565b9150602083013561277b81612331565b809150509250929050565b60008060008060008060a0878903121561279f57600080fd5b86356127aa81612331565b955060208701356127ba81612331565b94506040870135935060608701359250608087013567ffffffffffffffff808211156127e557600080fd5b818901915089601f8301126127f957600080fd5b81358181111561280857600080fd5b8a602082850101111561281a57600080fd5b6020830194508093505050509295509295509295565b600181811c9082168061284457607f821691505b6020821081141561286557634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f546170696f63614f7074696f6e733a206e6f7420726567697374657265640000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6001600160a01b03929092168252602082015260400190565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b60006020828403121561297c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156129ac576129ac612983565b500190565b60006000198214156129c5576129c5612983565b5060010190565b60006001600160801b038281168482168083038211156129ee576129ee612983565b01949350505050565b600082821015612a0957612a09612983565b500390565b6080810161062a8284612704565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b60008351612a608184602088016122c6565b8351908301906129ee8183602088016122c6565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b600082612aeb57612aeb612ac6565b500490565b600082612aff57612aff612ac6565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612b37908301846122f2565b9695505050505050565b600060208284031215612b5357600080fd5b8151610fae8161229356fe1ef56a7764f084304233be079eb668c64baf9aaeb0348be5e25c356ce11353c7a26469706673582212207ca485ae3e45fb9c299f146718d08377e4a29b1c61ea58e8ec6b1b43b058d00c64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getLock(uint256)": {
        "params": {
          "_tokenId": "tOLP NFT ID"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "lock(address,address,address,uint128,uint128)": {
        "params": {
          "_amount": "Amount of tOLR tokens to lock",
          "_from": "Address to transfer the SGL tokens from",
          "_lockDuration": "Duration of the lock",
          "_singularity": "Singularity market address",
          "_to": "Address to mint the tOLP NFT to"
        },
        "returns": {
          "tokenId": "The ID of the minted NFT"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "registerSingularity(address,uint256,uint256)": {
        "params": {
          "assetID": "YieldBox asset ID of the singularity market",
          "singularity": "Singularity market address",
          "weight": "Weight of the pool"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setSGLPoolWEight(address,uint256)": {
        "params": {
          "singularity": "Singularity market address",
          "weight": "Weight of the pool"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address,bool,bool)": {
        "params": {
          "direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
          "newOwner": "Address of the new owner.",
          "renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
        }
      },
      "unlock(uint256,address,address)": {
        "details": "We purposefully don't burn the `tokenID` and `lockPosition`, α.      We can rely on lockPosition.time and lockPosition.duration to check if the lock is expired.",
        "params": {
          "_singularity": "Singularity market address",
          "_to": "Address to send the tokens to",
          "_tokenId": "ID of the position to unlock"
        }
      },
      "unregisterSingularity(address)": {
        "params": {
          "singularity": "Singularity market address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimOwnership()": {
        "notice": "Needs to be called by `pendingOwner` to claim ownership."
      },
      "getLock(uint256)": {
        "notice": "Returns the lock position of a given tOLP NFT and if it's active"
      },
      "getSingularities()": {
        "notice": "Returns the active singularity YieldBox ID markets"
      },
      "getSingularityPools()": {
        "notice": "Returns the active singularity pool data"
      },
      "getTotalPoolDeposited(uint256)": {
        "notice": "Returns the total amount of locked tokens for a given singularity market"
      },
      "lock(address,address,address,uint128,uint128)": {
        "notice": "Locks tOLR tokens for a given duration"
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "notice": "ERC1155 compliance"
      },
      "registerSingularity(address,uint256,uint256)": {
        "notice": "Registers a new singularity market"
      },
      "setSGLPoolWEight(address,uint256)": {
        "notice": "Sets the pool weight of a given singularity market"
      },
      "transferOwnership(address,bool,bool)": {
        "notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
      },
      "unlock(uint256,address,address)": {
        "notice": "Unlocks tOLP tokens"
      },
      "unregisterSingularity(address)": {
        "notice": "Un-registers a singularity market"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3136,
        "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 3138,
        "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3142,
        "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3146,
        "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3150,
        "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3156,
        "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1851,
        "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
        "label": "_paused",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 229,
        "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
        "label": "owner",
        "offset": 1,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 231,
        "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 6856,
        "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
        "label": "tokenCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6861,
        "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
        "label": "lockPositions",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(LockPosition)6841_storage)"
      },
      {
        "astId": 6870,
        "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
        "label": "activeSingularities",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_contract(IERC20)2768,t_struct(SingularityPool)6848_storage)"
      },
      {
        "astId": 6875,
        "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
        "label": "sglAssetIDToAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_contract(IERC20)2768)"
      },
      {
        "astId": 6878,
        "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
        "label": "singularities",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6880,
        "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
        "label": "totalSingularityPoolWeights",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2768": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)2768,t_struct(SingularityPool)6848_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)2768",
        "label": "mapping(contract IERC20 => struct SingularityPool)",
        "numberOfBytes": "32",
        "value": "t_struct(SingularityPool)6848_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_contract(IERC20)2768)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract IERC20)",
        "numberOfBytes": "32",
        "value": "t_contract(IERC20)2768"
      },
      "t_mapping(t_uint256,t_struct(LockPosition)6841_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LockPosition)",
        "numberOfBytes": "32",
        "value": "t_struct(LockPosition)6841_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LockPosition)6841_storage": {
        "encoding": "inplace",
        "label": "struct LockPosition",
        "members": [
          {
            "astId": 6834,
            "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
            "label": "sglAssetID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6836,
            "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
            "label": "amount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6838,
            "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
            "label": "lockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6840,
            "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
            "label": "lockDuration",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SingularityPool)6848_storage": {
        "encoding": "inplace",
        "label": "struct SingularityPool",
        "members": [
          {
            "astId": 6843,
            "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
            "label": "sglAssetID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6845,
            "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
            "label": "totalDeposited",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6847,
            "contract": "contracts/options/TapiocaOptionLiquidityProvision.sol:TapiocaOptionLiquidityProvision",
            "label": "poolWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}