{
  "address": "0xFD85D457De0532a7241abb34bee35b3Ee1e2c61c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencySave",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "old",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardsDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_of",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "emergencySave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gaugeDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reward",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gaugeDistributor",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isKilled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reward",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardsDuration",
          "type": "uint256"
        }
      ],
      "name": "updateRewardDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4dbc0f514f05057a89508092b5ac3685e2273f8fb1ccf8390756978d48ea8e9e",
  "receipt": {
    "to": null,
    "from": "0x40282d3Cf4890D9806BC1853e97a59C93D813653",
    "contractAddress": "0xFD85D457De0532a7241abb34bee35b3Ee1e2c61c",
    "transactionIndex": 61,
    "gasUsed": "1392093",
    "logsBloom": "0x
    "blockHash": "0x77469e8fab9ce982cb0753738cc4a5d6211b697e729d557ef67840f65c901171",
    "transactionHash": "0x4dbc0f514f05057a89508092b5ac3685e2273f8fb1ccf8390756978d48ea8e9e",
    "logs": [],
    "blockNumber": 7801173,
    "cumulativeGasUsed": "20084851",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4526ca29d0ddf27b570edf5c5cf379cc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencySave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencySave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeDistributor\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isKilled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"updateRewardDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addRewards(uint256)\":{\"params\":{\"_amount\":\"new rewards amount\"}},\"balanceOf(address)\":{\"params\":{\"_of\":\"user address\"}},\"claimRewards()\":{\"details\":\"updates user's rewards\"},\"deposit(uint256)\":{\"details\":\"updates user's rewards\",\"params\":{\"_amount\":\"deposited amount\"}},\"earned(address)\":{\"params\":{\"_user\":\"user's address\"}},\"emergencySave(address,uint256)\":{\"params\":{\"_amount\":\"amount to be saved\",\"_token\":\"token's address\"}},\"exit()\":{\"details\":\"updates user's rewards\"},\"init(address,address,address,address)\":{\"params\":{\"_gaugeDistributor\":\"the gauge distributor address\",\"_owner\":\"contract's owner\",\"_reward\":\"reward token address\",\"_token\":\"deposit token address\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"updateRewardDuration(uint256)\":{\"params\":{\"_rewardsDuration\":\"the new timestamp\"}},\"withdraw(uint256)\":{\"details\":\"updates user's rewards\",\"params\":{\"_amount\":\"amount to withdraw\"}}},\"stateVariables\":{\"periodFinish\":{\"details\":\"gets increased by 'rewardsDuration' everytime new rewards are added\"},\"reward\":{\"details\":\"it should be te TAP token\"}},\"version\":1},\"userdoc\":{\"events\":{\"Claimed(address,uint256)\":{\"notice\":\"event emitted when user claimed rewards\"},\"Deposited(address,uint256)\":{\"notice\":\"event emitted when user deposited\"},\"EmergencySave(address,uint256)\":{\"notice\":\"event emitted when some random tokens are withdrawn from the contract\"},\"OwnerUpdated(address,address)\":{\"notice\":\"event emitted when the new owner is updated\"},\"RewardAdded(uint256)\":{\"notice\":\"event emitted when new rewards were added to the pool\"},\"RewardsDurationUpdated(uint256)\":{\"notice\":\"event emitted when the rewards duration was updated\"},\"Withdrawn(address,uint256)\":{\"notice\":\"event emitted when user withdrawn\"}},\"kind\":\"user\",\"methods\":{\"addRewards(uint256)\":{\"notice\":\"adds more rewards to the contract\"},\"balanceOf(address)\":{\"notice\":\"returns total invested amount for an user\"},\"claimRewards()\":{\"notice\":\"claims rewards for msg.sender\"},\"deposit(uint256)\":{\"notice\":\"-- Write methods --locks token into the gauge\"},\"earned(address)\":{\"notice\":\"rewards accrued rewards for user\"},\"emergencySave(address,uint256)\":{\"notice\":\"saves tokens from contract\"},\"exit()\":{\"notice\":\"withdraws the entire investment and claims rewards\"},\"gaugeDistributor()\":{\"notice\":\"GaugeDistributor address\"},\"getRewardForDuration()\":{\"notice\":\"returns reward amount for a specific time range\"},\"isKilled()\":{\"notice\":\"return the kill status\"},\"kill()\":{\"notice\":\"kills the contract\"},\"lastTimeRewardApplicable()\":{\"notice\":\"returns the last time rewards were applicable\"},\"lastUpdateTime()\":{\"notice\":\"last reward update timestamp\"},\"owner()\":{\"notice\":\"contract's owner\"},\"pause()\":{\"notice\":\"-- Onwer methods --pause the contract\"},\"periodFinish()\":{\"notice\":\"returns contract's end time\"},\"reward()\":{\"notice\":\"returns reward token\"},\"rewardPerToken()\":{\"notice\":\"returns rewards per deposited token\"},\"rewardPerTokenStored()\":{\"notice\":\"reward-token share\"},\"rewardRate()\":{\"notice\":\"rewards per second\"},\"rewards(address)\":{\"notice\":\"accrued rewards per gauge user\"},\"rewardsDuration()\":{\"notice\":\"returns the timespan when rewards are to be distributed\"},\"token()\":{\"notice\":\"returns the receipt token allowed for deposits\"},\"totalSupply()\":{\"notice\":\"-- View methods --returns the total deposited token supply\"},\"unpause()\":{\"notice\":\"unpause the contract\"},\"updateRewardDuration(uint256)\":{\"notice\":\"updates rewards duration with a new value\"},\"userRewardPerTokenPaid(address)\":{\"notice\":\"rewards paid to users so far\"},\"withdraw(uint256)\":{\"notice\":\"withdraws from the gauge\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/gauges/TimedGauge.sol\":\"TimedGauge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/gauges/TimedGauge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\r\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\r\\n\\r\\ncontract TimedGauge is Pausable, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // ==========\\r\\n    // *DATA*\\r\\n    // ==========\\r\\n\\r\\n    /// @notice returns the receipt token allowed for deposits\\r\\n    address public token;\\r\\n\\r\\n    /// @notice returns reward token\\r\\n    /// @dev it should be te TAP token\\r\\n    address public reward;\\r\\n\\r\\n    /// @notice rewards per second\\r\\n    uint256 public rewardRate = 0;\\r\\n\\r\\n    /// @notice last reward update timestamp\\r\\n    uint256 public lastUpdateTime;\\r\\n\\r\\n    /// @notice reward-token share\\r\\n    uint256 public rewardPerTokenStored;\\r\\n\\r\\n    /// @notice returns contract's end time\\r\\n    /// @dev gets increased by 'rewardsDuration' everytime new rewards are added\\r\\n    uint256 public periodFinish;\\r\\n\\r\\n    /// @notice returns the timespan when rewards are to be distributed\\r\\n    uint256 public rewardsDuration = 4 * 365 days;\\r\\n\\r\\n    /// @notice rewards paid to users so far\\r\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\r\\n\\r\\n    /// @notice accrued rewards per gauge user\\r\\n    mapping(address => uint256) public rewards;\\r\\n\\r\\n    /// @notice contract's owner\\r\\n    address public owner;\\r\\n\\r\\n    /// @notice GaugeDistributor address\\r\\n    address public gaugeDistributor;\\r\\n\\r\\n    /// @notice return the kill status\\r\\n    bool public isKilled;\\r\\n\\r\\n    /// @notice total supply of the contract\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    /// @notice balances per gauge user\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    /// @notice indicates if the contract has been initialized\\r\\n    bool private _initialized;\\r\\n\\r\\n    // ==========\\r\\n    // *EVENTS*\\r\\n    // ==========\\r\\n    /// @notice event emitted when some random tokens are withdrawn from the contract\\r\\n    event EmergencySave(address indexed token, uint256 amount);\\r\\n    /// @notice event emitted when the rewards duration was updated\\r\\n    event RewardsDurationUpdated(uint256 newDuration);\\r\\n    /// @notice event emitted when new rewards were added to the pool\\r\\n    event RewardAdded(uint256 reward);\\r\\n    /// @notice event emitted when user deposited\\r\\n    event Deposited(address indexed user, uint256 amount);\\r\\n    /// @notice event emitted when user withdrawn\\r\\n    event Withdrawn(address indexed user, uint256 amount);\\r\\n    /// @notice event emitted when user claimed rewards\\r\\n    event Claimed(address indexed user, uint256 reward);\\r\\n    /// @notice event emitted when the new owner is updated\\r\\n    event OwnerUpdated(address indexed old, address indexed newOwner);\\r\\n\\r\\n    // ==========\\r\\n    // * METHODS *\\r\\n    // ==========\\r\\n    //@notice initializes a new TimedGauge\\r\\n    /// @param _token deposit token address\\r\\n    /// @param _reward reward token address\\r\\n    /// @param _owner contract's owner\\r\\n    /// @param _gaugeDistributor the gauge distributor address\\r\\n    function init(\\r\\n        address _token,\\r\\n        address _reward,\\r\\n        address _owner,\\r\\n        address _gaugeDistributor\\r\\n    ) external {\\r\\n        require(!_initialized, 'unauthorized');\\r\\n        require(_token != address(0), 'token not valid');\\r\\n        require(_reward != address(0), 'reward token not valid');\\r\\n        require(_gaugeDistributor != address(0), 'distributor not valid');\\r\\n\\r\\n        token = _token;\\r\\n        reward = _reward;\\r\\n        gaugeDistributor = _gaugeDistributor;\\r\\n        periodFinish = block.timestamp + rewardsDuration;\\r\\n        _pause();\\r\\n\\r\\n        _initialized = true;\\r\\n        owner = _owner;\\r\\n    }\\r\\n\\r\\n    ///-- Onwer methods --\\r\\n    /// @notice pause the contract\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /// @notice unpause the contract\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /// @notice kills the contract\\r\\n    function kill() external onlyOwner {\\r\\n        isKilled = true;\\r\\n    }\\r\\n\\r\\n    /// @notice saves tokens from contract\\r\\n    /// @param _token token's address\\r\\n    /// @param _amount amount to be saved\\r\\n    function emergencySave(address _token, uint256 _amount) external onlyOwner {\\r\\n        require(_token != address(token), 'unauthorized');\\r\\n        require(_amount > 0, 'amount not valid');\\r\\n        IERC20(_token).safeTransfer(owner, _amount);\\r\\n        emit EmergencySave(_token, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice updates rewards duration with a new value\\r\\n    /// @param _rewardsDuration the new timestamp\\r\\n    function updateRewardDuration(uint256 _rewardsDuration) external onlyOwner {\\r\\n        rewardsDuration = _rewardsDuration;\\r\\n        emit RewardsDurationUpdated(rewardsDuration);\\r\\n    }\\r\\n\\r\\n    /// @notice adds more rewards to the contract\\r\\n    /// @param _amount new rewards amount\\r\\n    function addRewards(uint256 _amount) external updateReward(address(0)) {\\r\\n        require(msg.sender == owner || msg.sender == gaugeDistributor, 'unauthorized');\\r\\n        require(rewardsDuration > 0, 'reward duration not set');\\r\\n        require(!isKilled, 'contract killed');\\r\\n        if (block.timestamp >= periodFinish) {\\r\\n            rewardRate = _amount / rewardsDuration;\\r\\n        } else {\\r\\n            uint256 remaining = periodFinish - block.timestamp;\\r\\n            uint256 leftover = remaining * rewardRate;\\r\\n            rewardRate = (_amount + leftover) / rewardsDuration;\\r\\n        }\\r\\n\\r\\n        IERC20(reward).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n        // prevent overflows\\r\\n        uint256 balance = IERC20(reward).balanceOf(address(this));\\r\\n        require(rewardRate <= (balance / rewardsDuration), 'reward rate not valid');\\r\\n\\r\\n        lastUpdateTime = block.timestamp;\\r\\n        periodFinish = block.timestamp + rewardsDuration;\\r\\n        emit RewardAdded(_amount);\\r\\n    }\\r\\n\\r\\n    ///-- View methods --\\r\\n    /// @notice returns the total deposited token supply\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /// @notice returns total invested amount for an user\\r\\n    /// @param _of user address\\r\\n    function balanceOf(address _of) external view returns (uint256) {\\r\\n        return _balances[_of];\\r\\n    }\\r\\n\\r\\n    /// @notice returns the last time rewards were applicable\\r\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\r\\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\r\\n    }\\r\\n\\r\\n    /// @notice returns rewards per deposited token\\r\\n    function rewardPerToken() public view returns (uint256) {\\r\\n        if (_totalSupply == 0) {\\r\\n            return rewardPerTokenStored;\\r\\n        }\\r\\n\\r\\n        return rewardPerTokenStored + (((lastTimeRewardApplicable() - lastUpdateTime) * rewardRate * 1e18) / _totalSupply);\\r\\n    }\\r\\n\\r\\n    /// @notice rewards accrued rewards for user\\r\\n    /// @param _user user's address\\r\\n    function earned(address _user) public view returns (uint256) {\\r\\n        return ((_balances[_user] * (rewardPerToken() - userRewardPerTokenPaid[_user])) / 1e18) + rewards[_user];\\r\\n    }\\r\\n\\r\\n    /// @notice returns reward amount for a specific time range\\r\\n    function getRewardForDuration() external view returns (uint256) {\\r\\n        return rewardRate * rewardsDuration;\\r\\n    }\\r\\n\\r\\n    ///-- Write methods --\\r\\n    /// @notice locks token into the gauge\\r\\n    /// @dev updates user's rewards\\r\\n    /// @param _amount deposited amount\\r\\n    function deposit(uint256 _amount) external nonReentrant whenNotPaused updateReward(msg.sender) {\\r\\n        require(_amount > 0, 'amount not valid');\\r\\n\\r\\n        _totalSupply += _amount;\\r\\n        _balances[msg.sender] += _amount;\\r\\n\\r\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        emit Deposited(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice withdraws from the gauge\\r\\n    /// @dev updates user's rewards\\r\\n    /// @param _amount amount to withdraw\\r\\n    function withdraw(uint256 _amount) public nonReentrant updateReward(msg.sender) {\\r\\n        require(_amount > 0, 'amount not valid');\\r\\n        _withdraw(_amount);\\r\\n    }\\r\\n\\r\\n    /// @notice claims rewards for msg.sender\\r\\n    /// @dev updates user's rewards\\r\\n    function claimRewards() public nonReentrant whenNotPaused updateReward(msg.sender) {\\r\\n        _claim();\\r\\n    }\\r\\n\\r\\n    /// @notice withdraws the entire investment and claims rewards\\r\\n    /// @dev updates user's rewards\\r\\n    function exit() external nonReentrant whenNotPaused updateReward(msg.sender) {\\r\\n        _withdraw(_balances[msg.sender]);\\r\\n        _claim();\\r\\n    }\\r\\n\\r\\n    // @notice sets a new owner for the contract\\r\\n    function transferOwnership(address _newOwner) external onlyOwner {\\r\\n        require(_newOwner != address(0), 'address not valid');\\r\\n        emit OwnerUpdated(owner, _newOwner);\\r\\n        owner = _newOwner;\\r\\n    }\\r\\n\\r\\n    ///-- Internal methods --\\r\\n    function _claim() internal {\\r\\n        if(isKilled) return;\\r\\n        uint256 _rewards = rewards[msg.sender];\\r\\n        if (_rewards > 0) {\\r\\n            rewards[msg.sender] = 0;\\r\\n            IERC20(reward).safeTransfer(msg.sender, _rewards);\\r\\n            emit Claimed(msg.sender, _rewards);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _withdraw(uint256 _amount) internal {\\r\\n        _totalSupply -= _amount;\\r\\n        _balances[msg.sender] = _balances[msg.sender] - _amount;\\r\\n        IERC20(token).safeTransfer(msg.sender, _amount);\\r\\n        emit Withdrawn(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    // -- Modifiers --\\r\\n    modifier updateReward(address account) {\\r\\n        rewardPerTokenStored = rewardPerToken();\\r\\n        lastUpdateTime = lastTimeRewardApplicable();\\r\\n        if (account != address(0)) {\\r\\n            rewards[account] = earned(account);\\r\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, 'caller is not the owner');\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x533923959e559dab02a10d1d0788cb9357d5b32734d8b8be757ec15091943ac6\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addRewards(uint256)": {
        "params": {
          "_amount": "new rewards amount"
        }
      },
      "balanceOf(address)": {
        "params": {
          "_of": "user address"
        }
      },
      "claimRewards()": {
        "details": "updates user's rewards"
      },
      "deposit(uint256)": {
        "details": "updates user's rewards",
        "params": {
          "_amount": "deposited amount"
        }
      },
      "earned(address)": {
        "params": {
          "_user": "user's address"
        }
      },
      "emergencySave(address,uint256)": {
        "params": {
          "_amount": "amount to be saved",
          "_token": "token's address"
        }
      },
      "exit()": {
        "details": "updates user's rewards"
      },
      "init(address,address,address,address)": {
        "params": {
          "_gaugeDistributor": "the gauge distributor address",
          "_owner": "contract's owner",
          "_reward": "reward token address",
          "_token": "deposit token address"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "updateRewardDuration(uint256)": {
        "params": {
          "_rewardsDuration": "the new timestamp"
        }
      },
      "withdraw(uint256)": {
        "details": "updates user's rewards",
        "params": {
          "_amount": "amount to withdraw"
        }
      }
    },
    "stateVariables": {
      "periodFinish": {
        "details": "gets increased by 'rewardsDuration' everytime new rewards are added"
      },
      "reward": {
        "details": "it should be te TAP token"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Claimed(address,uint256)": {
        "notice": "event emitted when user claimed rewards"
      },
      "Deposited(address,uint256)": {
        "notice": "event emitted when user deposited"
      },
      "EmergencySave(address,uint256)": {
        "notice": "event emitted when some random tokens are withdrawn from the contract"
      },
      "OwnerUpdated(address,address)": {
        "notice": "event emitted when the new owner is updated"
      },
      "RewardAdded(uint256)": {
        "notice": "event emitted when new rewards were added to the pool"
      },
      "RewardsDurationUpdated(uint256)": {
        "notice": "event emitted when the rewards duration was updated"
      },
      "Withdrawn(address,uint256)": {
        "notice": "event emitted when user withdrawn"
      }
    },
    "kind": "user",
    "methods": {
      "addRewards(uint256)": {
        "notice": "adds more rewards to the contract"
      },
      "balanceOf(address)": {
        "notice": "returns total invested amount for an user"
      },
      "claimRewards()": {
        "notice": "claims rewards for msg.sender"
      },
      "deposit(uint256)": {
        "notice": "-- Write methods --locks token into the gauge"
      },
      "earned(address)": {
        "notice": "rewards accrued rewards for user"
      },
      "emergencySave(address,uint256)": {
        "notice": "saves tokens from contract"
      },
      "exit()": {
        "notice": "withdraws the entire investment and claims rewards"
      },
      "gaugeDistributor()": {
        "notice": "GaugeDistributor address"
      },
      "getRewardForDuration()": {
        "notice": "returns reward amount for a specific time range"
      },
      "isKilled()": {
        "notice": "return the kill status"
      },
      "kill()": {
        "notice": "kills the contract"
      },
      "lastTimeRewardApplicable()": {
        "notice": "returns the last time rewards were applicable"
      },
      "lastUpdateTime()": {
        "notice": "last reward update timestamp"
      },
      "owner()": {
        "notice": "contract's owner"
      },
      "pause()": {
        "notice": "-- Onwer methods --pause the contract"
      },
      "periodFinish()": {
        "notice": "returns contract's end time"
      },
      "reward()": {
        "notice": "returns reward token"
      },
      "rewardPerToken()": {
        "notice": "returns rewards per deposited token"
      },
      "rewardPerTokenStored()": {
        "notice": "reward-token share"
      },
      "rewardRate()": {
        "notice": "rewards per second"
      },
      "rewards(address)": {
        "notice": "accrued rewards per gauge user"
      },
      "rewardsDuration()": {
        "notice": "returns the timespan when rewards are to be distributed"
      },
      "token()": {
        "notice": "returns the receipt token allowed for deposits"
      },
      "totalSupply()": {
        "notice": "-- View methods --returns the total deposited token supply"
      },
      "unpause()": {
        "notice": "unpause the contract"
      },
      "updateRewardDuration(uint256)": {
        "notice": "updates rewards duration with a new value"
      },
      "userRewardPerTokenPaid(address)": {
        "notice": "rewards paid to users so far"
      },
      "withdraw(uint256)": {
        "notice": "withdraws from the gauge"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 799,
        "contract": "contracts/gauges/TimedGauge.sol:TimedGauge",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 900,
        "contract": "contracts/gauges/TimedGauge.sol:TimedGauge",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6639,
        "contract": "contracts/gauges/TimedGauge.sol:TimedGauge",
        "label": "token",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6642,
        "contract": "contracts/gauges/TimedGauge.sol:TimedGauge",
        "label": "reward",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6646,
        "contract": "contracts/gauges/TimedGauge.sol:TimedGauge",
        "label": "rewardRate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6649,
        "contract": "contracts/gauges/TimedGauge.sol:TimedGauge",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 6652,
        "contract": "contracts/gauges/TimedGauge.sol:TimedGauge",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6655,
        "contract": "contracts/gauges/TimedGauge.sol:TimedGauge",
        "label": "periodFinish",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 6661,
        "contract": "contracts/gauges/TimedGauge.sol:TimedGauge",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6666,
        "contract": "contracts/gauges/TimedGauge.sol:TimedGauge",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6671,
        "contract": "contracts/gauges/TimedGauge.sol:TimedGauge",
        "label": "rewards",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6674,
        "contract": "contracts/gauges/TimedGauge.sol:TimedGauge",
        "label": "owner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 6677,
        "contract": "contracts/gauges/TimedGauge.sol:TimedGauge",
        "label": "gaugeDistributor",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 6680,
        "contract": "contracts/gauges/TimedGauge.sol:TimedGauge",
        "label": "isKilled",
        "offset": 20,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 6683,
        "contract": "contracts/gauges/TimedGauge.sol:TimedGauge",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 6688,
        "contract": "contracts/gauges/TimedGauge.sol:TimedGauge",
        "label": "_balances",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6691,
        "contract": "contracts/gauges/TimedGauge.sol:TimedGauge",
        "label": "_initialized",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}