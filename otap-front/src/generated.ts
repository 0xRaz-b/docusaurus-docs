// Generated by @wagmi/cli@0.1.6 on 2/19/2023 at 12:54:13 PM
import {
    readContract,
    ReadContractConfig,
    writeContract,
    WriteContractArgs,
    WriteContractPreparedArgs,
    WriteContractUnpreparedArgs,
} from '@wagmi/core';

import { useContract, UseContractConfig, useContractRead, UseContractReadConfig } from 'wagmi';

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Vesting
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vestingABI = [
    {
        stateMutability: 'nonpayable',
        type: 'constructor',
        inputs: [
            { name: '_token', internalType: 'contract IERC20', type: 'address' },
            { name: '_cliff', internalType: 'uint256', type: 'uint256' },
            { name: '_duration', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'user', internalType: 'address', type: 'address', indexed: true },
            { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'Claimed',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'old', internalType: 'address', type: 'address', indexed: true },
            { name: '_new', internalType: 'address', type: 'address', indexed: true },
        ],
        name: 'ConservatorUpdated',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
            { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
        ],
        name: 'OwnershipTransferred',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'oldState', internalType: 'bool', type: 'bool', indexed: false },
            { name: 'newState', internalType: 'bool', type: 'bool', indexed: false },
        ],
        name: 'PausedUpdated',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'user', internalType: 'address', type: 'address', indexed: true },
            { name: 'timestamp', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'RevokeCompleted',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'user', internalType: 'address', type: 'address', indexed: true },
            { name: 'timestamp', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'RevokeRequested',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'user', internalType: 'address', type: 'address', indexed: true },
            { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'UserRegistered',
    },
    { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'claim', outputs: [] },
    { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'claimOwnership', outputs: [] },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '_user', internalType: 'address', type: 'address' }],
        name: 'claimable',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'claimable',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'cliff',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'conservator',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'duration',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_user', internalType: 'address', type: 'address' }],
        name: 'emergencyRevoke',
        outputs: [],
    },
    { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'emergencyRevoke', outputs: [] },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_seededAmount', internalType: 'uint256', type: 'uint256' }],
        name: 'init',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'owner',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    { stateMutability: 'view', type: 'function', inputs: [], name: 'paused', outputs: [{ name: '', internalType: 'bool', type: 'bool' }] },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'pendingOwner',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_user', internalType: 'address', type: 'address' },
            { name: '_amount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'registerUser',
        outputs: [],
    },
    { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'requestEmergencyRevoke', outputs: [] },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_user', internalType: 'address', type: 'address' }],
        name: 'requestEmergencyRevoke',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'revokeRequestedAt',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'revokeTimeWindow',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    { stateMutability: 'view', type: 'function', inputs: [], name: 'revoked', outputs: [{ name: '', internalType: 'bool', type: 'bool' }] },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'seeded',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_conservator', internalType: 'address', type: 'address' }],
        name: 'setConservator',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'start',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'token',
        outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'totalClaimed',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'newOwner', internalType: 'address', type: 'address' },
            { name: 'direct', internalType: 'bool', type: 'bool' },
            { name: 'renounce', internalType: 'bool', type: 'bool' },
        ],
        name: 'transferOwnership',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: 'val', internalType: 'bool', type: 'bool' }],
        name: 'updatePause',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'address', type: 'address' }],
        name: 'users',
        outputs: [
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
            { name: 'claimed', internalType: 'uint256', type: 'uint256' },
            { name: 'latestClaimTimestamp', internalType: 'uint256', type: 'uint256' },
            { name: 'revoked', internalType: 'bool', type: 'bool' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '_user', internalType: 'address', type: 'address' }],
        name: 'vested',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'vested',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TapiocaOptionBroker
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tapiocaOptionBrokerABI = [
    {
        stateMutability: 'nonpayable',
        type: 'constructor',
        inputs: [
            { name: '_tOLP', internalType: 'address', type: 'address' },
            { name: '_oTAP', internalType: 'address', type: 'address' },
            { name: '_tapOFT', internalType: 'address', type: 'address' },
            { name: '_oracle', internalType: 'contract IOracle', type: 'address' },
            { name: '_paymentTokenBeneficiary', internalType: 'address', type: 'address' },
        ],
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'cumulative', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'averageMagnitude', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'totalParticipants', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'AMLDivergence',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'to', internalType: 'address', type: 'address', indexed: true },
            { name: 'paymentToken', internalType: 'contract IERC20', type: 'address', indexed: true },
            { name: 'oTapTokenID', internalType: 'uint256', type: 'uint256', indexed: false },
            { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'ExerciseOption',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'ExitPosition',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'extractedTAP', internalType: 'uint256', type: 'uint256', indexed: false },
            { name: 'epochTAPValuation', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'NewEpoch',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
            { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
        ],
        name: 'OwnershipTransferred',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'sglAssetID', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'totalDeposited', internalType: 'uint256', type: 'uint256', indexed: false },
            {
                name: 'lock',
                internalType: 'struct LockPosition',
                type: 'tuple',
                components: [
                    { name: 'sglAssetID', internalType: 'uint128', type: 'uint128' },
                    { name: 'amount', internalType: 'uint128', type: 'uint128' },
                    { name: 'lockTime', internalType: 'uint128', type: 'uint128' },
                    { name: 'lockDuration', internalType: 'uint128', type: 'uint128' },
                ],
                indexed: false,
            },
            { name: 'discount', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'Participate',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
        name: 'Paused',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'paymentToken', internalType: 'contract IERC20', type: 'address', indexed: false },
            { name: 'oracle', internalType: 'contract IOracle', type: 'address', indexed: false },
            { name: 'oracleData', internalType: 'bytes', type: 'bytes', indexed: false },
        ],
        name: 'SetPaymentToken',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
        name: 'Unpaused',
    },
    { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'claimOwnership', outputs: [] },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_paymentTokens', internalType: 'address[]', type: 'address[]' }],
        name: 'collectPaymentTokens',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'epoch',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'epochTAPValuation',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_oTAPTokenID', internalType: 'uint256', type: 'uint256' },
            { name: '_paymentToken', internalType: 'contract IERC20', type: 'address' },
            { name: '_tapAmount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'exerciseOption',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_oTAPTokenID', internalType: 'uint256', type: 'uint256' }],
        name: 'exitPosition',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: '_oTAPTokenID', internalType: 'uint256', type: 'uint256' },
            { name: '_paymentToken', internalType: 'contract IERC20', type: 'address' },
            { name: '_tapAmount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'getOTCDealDetails',
        outputs: [
            { name: 'eligibleTapAmount', internalType: 'uint256', type: 'uint256' },
            { name: 'paymentTokenAmount', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'lastEpochUpdate',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'newEpoch', outputs: [] },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'oTAP',
        outputs: [{ name: '', internalType: 'contract OTAP', type: 'address' }],
    },
    { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'oTAPBrokerClaim', outputs: [] },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: '', internalType: 'uint256', type: 'uint256' },
            { name: '', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'oTAPCalls',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'owner',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
        name: 'participants',
        outputs: [
            { name: 'hasVotingPower', internalType: 'bool', type: 'bool' },
            { name: 'averageMagnitude', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_tOLPTokenID', internalType: 'uint256', type: 'uint256' }],
        name: 'participate',
        outputs: [{ name: 'oTAPTokenID', internalType: 'uint256', type: 'uint256' }],
    },
    { stateMutability: 'view', type: 'function', inputs: [], name: 'paused', outputs: [{ name: '', internalType: 'bool', type: 'bool' }] },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'paymentTokenBeneficiary',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
        name: 'paymentTokens',
        outputs: [
            { name: 'oracle', internalType: 'contract IOracle', type: 'address' },
            { name: 'oracleData', internalType: 'bytes', type: 'bytes' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'pendingOwner',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_paymentToken', internalType: 'contract IERC20', type: 'address' },
            { name: '_oracle', internalType: 'contract IOracle', type: 'address' },
            { name: '_oracleData', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'setPaymentToken',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_paymentTokenBeneficiary', internalType: 'address', type: 'address' }],
        name: 'setPaymentTokenBeneficiary',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: '', internalType: 'uint256', type: 'uint256' },
            { name: '', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'singularityGauges',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'tOLP',
        outputs: [{ name: '', internalType: 'contract TapiocaOptionLiquidityProvision', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'tapOFT',
        outputs: [{ name: '', internalType: 'contract TapOFT', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'tapOracle',
        outputs: [{ name: '', internalType: 'contract IOracle', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'tapOracleData',
        outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'newOwner', internalType: 'address', type: 'address' },
            { name: 'direct', internalType: 'bool', type: 'bool' },
            { name: 'renounce', internalType: 'bool', type: 'bool' },
        ],
        name: 'transferOwnership',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
        name: 'twAML',
        outputs: [
            { name: 'totalParticipants', internalType: 'uint256', type: 'uint256' },
            { name: 'averageMagnitude', internalType: 'uint256', type: 'uint256' },
            { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
            { name: 'cumulative', internalType: 'uint256', type: 'uint256' },
        ],
    },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TapiocaOptionLiquidityProvision
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tapiocaOptionLiquidityProvisionABI = [
    { stateMutability: 'nonpayable', type: 'constructor', inputs: [{ name: '_yieldBox', internalType: 'address', type: 'address' }] },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'owner', internalType: 'address', type: 'address', indexed: true },
            { name: 'approved', internalType: 'address', type: 'address', indexed: true },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
        ],
        name: 'Approval',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'owner', internalType: 'address', type: 'address', indexed: true },
            { name: 'operator', internalType: 'address', type: 'address', indexed: true },
            { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
        ],
        name: 'ApprovalForAll',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'to', internalType: 'address', type: 'address', indexed: true },
            { name: 'sglAssetID', internalType: 'uint128', type: 'uint128', indexed: true },
            {
                name: 'lockPosition',
                internalType: 'struct LockPosition',
                type: 'tuple',
                components: [
                    { name: 'sglAssetID', internalType: 'uint128', type: 'uint128' },
                    { name: 'amount', internalType: 'uint128', type: 'uint128' },
                    { name: 'lockTime', internalType: 'uint128', type: 'uint128' },
                    { name: 'lockDuration', internalType: 'uint128', type: 'uint128' },
                ],
                indexed: false,
            },
        ],
        name: 'Burn',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'to', internalType: 'address', type: 'address', indexed: true },
            { name: 'sglAssetID', internalType: 'uint128', type: 'uint128', indexed: true },
            {
                name: 'lockPosition',
                internalType: 'struct LockPosition',
                type: 'tuple',
                components: [
                    { name: 'sglAssetID', internalType: 'uint128', type: 'uint128' },
                    { name: 'amount', internalType: 'uint128', type: 'uint128' },
                    { name: 'lockTime', internalType: 'uint128', type: 'uint128' },
                    { name: 'lockDuration', internalType: 'uint128', type: 'uint128' },
                ],
                indexed: false,
            },
        ],
        name: 'Mint',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
            { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
        ],
        name: 'OwnershipTransferred',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
        name: 'Paused',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'sgl', internalType: 'address', type: 'address', indexed: false },
            { name: 'assetID', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'RegisterSingularity',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'sgl', internalType: 'address', type: 'address', indexed: false },
            { name: 'poolWeight', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'SetSGLPoolWeight',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'from', internalType: 'address', type: 'address', indexed: true },
            { name: 'to', internalType: 'address', type: 'address', indexed: true },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
        ],
        name: 'Transfer',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
        name: 'Unpaused',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'sgl', internalType: 'address', type: 'address', indexed: false },
            { name: 'assetID', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'UnregisterSingularity',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [{ name: 'totalSingularityPoolWeights', internalType: 'uint256', type: 'uint256', indexed: false }],
        name: 'UpdateTotalSingularityPoolWeights',
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
        name: 'activeSingularities',
        outputs: [
            { name: 'sglAssetID', internalType: 'uint256', type: 'uint256' },
            { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
            { name: 'poolWeight', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'approve',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
        name: 'balanceOf',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'claimOwnership', outputs: [] },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
        name: 'getApproved',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
        name: 'getLock',
        outputs: [
            { name: '', internalType: 'bool', type: 'bool' },
            {
                name: '',
                internalType: 'struct LockPosition',
                type: 'tuple',
                components: [
                    { name: 'sglAssetID', internalType: 'uint128', type: 'uint128' },
                    { name: 'amount', internalType: 'uint128', type: 'uint128' },
                    { name: 'lockTime', internalType: 'uint128', type: 'uint128' },
                    { name: 'lockDuration', internalType: 'uint128', type: 'uint128' },
                ],
            },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'getSingularities',
        outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'getSingularityPools',
        outputs: [
            {
                name: '',
                internalType: 'struct SingularityPool[]',
                type: 'tuple[]',
                components: [
                    { name: 'sglAssetID', internalType: 'uint256', type: 'uint256' },
                    { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
                    { name: 'poolWeight', internalType: 'uint256', type: 'uint256' },
                ],
            },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '_sglAssetId', internalType: 'uint256', type: 'uint256' }],
        name: 'getTotalPoolDeposited',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'owner', internalType: 'address', type: 'address' },
            { name: 'operator', internalType: 'address', type: 'address' },
        ],
        name: 'isApprovedForAll',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: '_spender', internalType: 'address', type: 'address' },
            { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'isApprovedOrOwner',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_from', internalType: 'address', type: 'address' },
            { name: '_to', internalType: 'address', type: 'address' },
            { name: '_singularity', internalType: 'contract IERC20', type: 'address' },
            { name: '_lockDuration', internalType: 'uint128', type: 'uint128' },
            { name: '_amount', internalType: 'uint128', type: 'uint128' },
        ],
        name: 'lock',
        outputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
        name: 'lockPositions',
        outputs: [
            { name: 'sglAssetID', internalType: 'uint128', type: 'uint128' },
            { name: 'amount', internalType: 'uint128', type: 'uint128' },
            { name: 'lockTime', internalType: 'uint128', type: 'uint128' },
            { name: 'lockDuration', internalType: 'uint128', type: 'uint128' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'name',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'pure',
        type: 'function',
        inputs: [
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'uint256', type: 'uint256' },
            { name: '', internalType: 'uint256', type: 'uint256' },
            { name: '', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'onERC1155Received',
        outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'owner',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
        name: 'ownerOf',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    { stateMutability: 'view', type: 'function', inputs: [], name: 'paused', outputs: [{ name: '', internalType: 'bool', type: 'bool' }] },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'pendingOwner',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'singularity', internalType: 'contract IERC20', type: 'address' },
            { name: 'assetID', internalType: 'uint256', type: 'uint256' },
            { name: 'weight', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'registerSingularity',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'safeTransferFrom',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
            { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'safeTransferFrom',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'operator', internalType: 'address', type: 'address' },
            { name: 'approved', internalType: 'bool', type: 'bool' },
        ],
        name: 'setApprovalForAll',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'singularity', internalType: 'contract IERC20', type: 'address' },
            { name: 'weight', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'setSGLPoolWEight',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
        name: 'sglAssetIDToAddress',
        outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
        name: 'singularities',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
        name: 'supportsInterface',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'symbol',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'tokenCounter',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
        name: 'tokenURI',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'totalSingularityPoolWeights',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'transferFrom',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'newOwner', internalType: 'address', type: 'address' },
            { name: 'direct', internalType: 'bool', type: 'bool' },
            { name: 'renounce', internalType: 'bool', type: 'bool' },
        ],
        name: 'transferOwnership',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
            { name: '_singularity', internalType: 'contract IERC20', type: 'address' },
            { name: '_to', internalType: 'address', type: 'address' },
        ],
        name: 'unlock',
        outputs: [{ name: 'sharesOut', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: 'singularity', internalType: 'contract IERC20', type: 'address' }],
        name: 'unregisterSingularity',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'yieldBox',
        outputs: [{ name: '', internalType: 'contract IYieldBox', type: 'address' }],
    },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OTAP
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const otapABI = [
    { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'owner', internalType: 'address', type: 'address', indexed: true },
            { name: 'approved', internalType: 'address', type: 'address', indexed: true },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
        ],
        name: 'Approval',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'owner', internalType: 'address', type: 'address', indexed: true },
            { name: 'operator', internalType: 'address', type: 'address', indexed: true },
            { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
        ],
        name: 'ApprovalForAll',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'from', internalType: 'address', type: 'address', indexed: true },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
            {
                name: 'option',
                internalType: 'struct TapOption',
                type: 'tuple',
                components: [
                    { name: 'expiry', internalType: 'uint128', type: 'uint128' },
                    { name: 'discount', internalType: 'uint128', type: 'uint128' },
                    { name: 'tOLP', internalType: 'uint256', type: 'uint256' },
                ],
                indexed: false,
            },
        ],
        name: 'Burn',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'to', internalType: 'address', type: 'address', indexed: true },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
            {
                name: 'option',
                internalType: 'struct TapOption',
                type: 'tuple',
                components: [
                    { name: 'expiry', internalType: 'uint128', type: 'uint128' },
                    { name: 'discount', internalType: 'uint128', type: 'uint128' },
                    { name: 'tOLP', internalType: 'uint256', type: 'uint256' },
                ],
                indexed: false,
            },
        ],
        name: 'Mint',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'from', internalType: 'address', type: 'address', indexed: true },
            { name: 'to', internalType: 'address', type: 'address', indexed: true },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
        ],
        name: 'Transfer',
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'approve',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
        name: 'attributes',
        outputs: [
            { name: '', internalType: 'address', type: 'address' },
            {
                name: '',
                internalType: 'struct TapOption',
                type: 'tuple',
                components: [
                    { name: 'expiry', internalType: 'uint128', type: 'uint128' },
                    { name: 'discount', internalType: 'uint128', type: 'uint128' },
                    { name: 'tOLP', internalType: 'uint256', type: 'uint256' },
                ],
            },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
        name: 'balanceOf',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'broker',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'brokerClaim', outputs: [] },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
        name: 'burn',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
        name: 'exists',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
        name: 'getApproved',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'owner', internalType: 'address', type: 'address' },
            { name: 'operator', internalType: 'address', type: 'address' },
        ],
        name: 'isApprovedForAll',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: '_spender', internalType: 'address', type: 'address' },
            { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'isApprovedOrOwner',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_to', internalType: 'address', type: 'address' },
            { name: '_expiry', internalType: 'uint128', type: 'uint128' },
            { name: '_discount', internalType: 'uint128', type: 'uint128' },
            { name: '_tOLP', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'mint',
        outputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'mintedOTAP',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'mintedTAP',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'name',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
        name: 'options',
        outputs: [
            { name: 'expiry', internalType: 'uint128', type: 'uint128' },
            { name: 'discount', internalType: 'uint128', type: 'uint128' },
            { name: 'tOLP', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
        name: 'ownerOf',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'safeTransferFrom',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
            { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'safeTransferFrom',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'operator', internalType: 'address', type: 'address' },
            { name: 'approved', internalType: 'bool', type: 'bool' },
        ],
        name: 'setApprovalForAll',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
            { name: '_tokenURI', internalType: 'string', type: 'string' },
        ],
        name: 'setTokenURI',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
        name: 'supportsInterface',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'symbol',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
        name: 'tokenURI',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
        name: 'tokenURIs',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'transferFrom',
        outputs: [],
    },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TapOFT
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tapOftABI = [
    {
        stateMutability: 'nonpayable',
        type: 'constructor',
        inputs: [
            { name: '_lzEndpoint', internalType: 'address', type: 'address' },
            { name: '_contributors', internalType: 'address', type: 'address' },
            { name: '_investors', internalType: 'address', type: 'address' },
            { name: '_lbp', internalType: 'address', type: 'address' },
            { name: '_airdrop', internalType: 'address', type: 'address' },
            { name: '_governanceChainId', internalType: 'uint16', type: 'uint16' },
        ],
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'owner', internalType: 'address', type: 'address', indexed: true },
            { name: 'spender', internalType: 'address', type: 'address', indexed: true },
            { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'Approval',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: '_from', internalType: 'address', type: 'address', indexed: true },
            { name: '_amount', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'Burned',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: '_old', internalType: 'uint256', type: 'uint256', indexed: false },
            { name: '_new', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'GovernanceChainIdentifierUpdated',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: '_srcChainId', internalType: 'uint16', type: 'uint16', indexed: false },
            { name: '_srcAddress', internalType: 'bytes', type: 'bytes', indexed: false },
            { name: '_nonce', internalType: 'uint64', type: 'uint64', indexed: false },
            { name: '_payload', internalType: 'bytes', type: 'bytes', indexed: false },
            { name: '_reason', internalType: 'bytes', type: 'bytes', indexed: false },
        ],
        name: 'MessageFailed',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: '_by', internalType: 'address', type: 'address', indexed: true },
            { name: '_to', internalType: 'address', type: 'address', indexed: true },
            { name: '_amount', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'Minted',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: '_old', internalType: 'address', type: 'address', indexed: true },
            { name: '_new', internalType: 'address', type: 'address', indexed: true },
        ],
        name: 'MinterUpdated',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
            { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
        ],
        name: 'OwnershipTransferred',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
        name: 'Paused',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: '_srcChainId', internalType: 'uint16', type: 'uint16', indexed: true },
            { name: '_to', internalType: 'address', type: 'address', indexed: true },
            { name: '_amount', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'ReceiveFromChain',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: '_srcChainId', internalType: 'uint16', type: 'uint16', indexed: false },
            { name: '_srcAddress', internalType: 'bytes', type: 'bytes', indexed: false },
            { name: '_nonce', internalType: 'uint64', type: 'uint64', indexed: false },
            { name: '_payloadHash', internalType: 'bytes32', type: 'bytes32', indexed: false },
        ],
        name: 'RetryMessageSuccess',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: '_dstChainId', internalType: 'uint16', type: 'uint16', indexed: true },
            { name: '_from', internalType: 'address', type: 'address', indexed: true },
            { name: '_toAddress', internalType: 'bytes', type: 'bytes', indexed: false },
            { name: '_amount', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'SendToChain',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: '_dstChainId', internalType: 'uint16', type: 'uint16', indexed: false },
            { name: '_type', internalType: 'uint16', type: 'uint16', indexed: false },
            { name: '_minDstGas', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'SetMinDstGas',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [{ name: 'precrime', internalType: 'address', type: 'address', indexed: false }],
        name: 'SetPrecrime',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: '_remoteChainId', internalType: 'uint16', type: 'uint16', indexed: false },
            { name: '_path', internalType: 'bytes', type: 'bytes', indexed: false },
        ],
        name: 'SetTrustedRemote',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: '_remoteChainId', internalType: 'uint16', type: 'uint16', indexed: false },
            { name: '_remoteAddress', internalType: 'bytes', type: 'bytes', indexed: false },
        ],
        name: 'SetTrustedRemoteAddress',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [{ name: '_useCustomAdapterParams', internalType: 'bool', type: 'bool', indexed: false }],
        name: 'SetUseCustomAdapterParams',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'from', internalType: 'address', type: 'address', indexed: true },
            { name: 'to', internalType: 'address', type: 'address', indexed: true },
            { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'Transfer',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
        name: 'Unpaused',
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'DEFAULT_PAYLOAD_SIZE_LIMIT',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'INITIAL_SUPPLY',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'NO_EXTRA_GAS',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'PT_SEND',
        outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'WEEK',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'owner', internalType: 'address', type: 'address' },
            { name: 'spender', internalType: 'address', type: 'address' },
        ],
        name: 'allowance',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'spender', internalType: 'address', type: 'address' },
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'approve',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
        name: 'balanceOf',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'circulatingSupply',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'pure',
        type: 'function',
        inputs: [],
        name: 'decimals',
        outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'spender', internalType: 'address', type: 'address' },
            { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'decreaseAllowance',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'dso_supply',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'emissionsStartTime',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [],
        name: 'emitForWeek',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: '_dstChainId', internalType: 'uint16', type: 'uint16' },
            { name: '_toAddress', internalType: 'bytes', type: 'bytes' },
            { name: '_amount', internalType: 'uint256', type: 'uint256' },
            { name: '_useZro', internalType: 'bool', type: 'bool' },
            { name: '_adapterParams', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'estimateSendFee',
        outputs: [
            { name: 'nativeFee', internalType: 'uint256', type: 'uint256' },
            { name: 'zroFee', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_to', internalType: 'address', type: 'address' },
            { name: '_amount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'extractTAP',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: '', internalType: 'uint16', type: 'uint16' },
            { name: '', internalType: 'bytes', type: 'bytes' },
            { name: '', internalType: 'uint64', type: 'uint64' },
        ],
        name: 'failedMessages',
        outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
            { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'forceResumeReceive',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: '_version', internalType: 'uint16', type: 'uint16' },
            { name: '_chainId', internalType: 'uint16', type: 'uint16' },
            { name: '', internalType: 'address', type: 'address' },
            { name: '_configType', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'getConfig',
        outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'getCurrentWeekEmission',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '_remoteChainId', internalType: 'uint16', type: 'uint16' }],
        name: 'getTrustedRemoteAddress',
        outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'governanceChainIdentifier',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'spender', internalType: 'address', type: 'address' },
            { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'increaseAllowance',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
            { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'isTrustedRemote',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'lzEndpoint',
        outputs: [{ name: '', internalType: 'contract ILayerZeroEndpoint', type: 'address' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
            { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
            { name: '_nonce', internalType: 'uint64', type: 'uint64' },
            { name: '_payload', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'lzReceive',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: '', internalType: 'uint16', type: 'uint16' },
            { name: '', internalType: 'uint16', type: 'uint16' },
        ],
        name: 'minDstGasLookup',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
        name: 'mintedInWeek',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'minter',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'name',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
            { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
            { name: '_nonce', internalType: 'uint64', type: 'uint64' },
            { name: '_payload', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'nonblockingLzReceive',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'owner',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: 'pause', internalType: 'bool', type: 'bool' }],
        name: 'pauseSendTokens',
        outputs: [],
    },
    { stateMutability: 'view', type: 'function', inputs: [], name: 'paused', outputs: [{ name: '', internalType: 'bool', type: 'bool' }] },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
        name: 'payloadSizeLimitLookup',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'precrime',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
        name: 'removeTAP',
        outputs: [],
    },
    { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
            { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
            { name: '_nonce', internalType: 'uint64', type: 'uint64' },
            { name: '_payload', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'retryMessage',
        outputs: [],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: '_from', internalType: 'address', type: 'address' },
            { name: '_dstChainId', internalType: 'uint16', type: 'uint16' },
            { name: '_toAddress', internalType: 'bytes', type: 'bytes' },
            { name: '_amount', internalType: 'uint256', type: 'uint256' },
            { name: '_refundAddress', internalType: 'address payable', type: 'address' },
            { name: '_zroPaymentAddress', internalType: 'address', type: 'address' },
            { name: '_adapterParams', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'sendFrom',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_version', internalType: 'uint16', type: 'uint16' },
            { name: '_chainId', internalType: 'uint16', type: 'uint16' },
            { name: '_configType', internalType: 'uint256', type: 'uint256' },
            { name: '_config', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'setConfig',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_identifier', internalType: 'uint256', type: 'uint256' }],
        name: 'setGovernanceChainIdentifier',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_dstChainId', internalType: 'uint16', type: 'uint16' },
            { name: '_packetType', internalType: 'uint16', type: 'uint16' },
            { name: '_minGas', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'setMinDstGas',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_minter', internalType: 'address', type: 'address' }],
        name: 'setMinter',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_dstChainId', internalType: 'uint16', type: 'uint16' },
            { name: '_size', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'setPayloadSizeLimit',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_precrime', internalType: 'address', type: 'address' }],
        name: 'setPrecrime',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_version', internalType: 'uint16', type: 'uint16' }],
        name: 'setReceiveVersion',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_version', internalType: 'uint16', type: 'uint16' }],
        name: 'setSendVersion',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
            { name: '_path', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'setTrustedRemote',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_remoteChainId', internalType: 'uint16', type: 'uint16' },
            { name: '_remoteAddress', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'setTrustedRemoteAddress',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_useCustomAdapterParams', internalType: 'bool', type: 'bool' }],
        name: 'setUseCustomAdapterParams',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
        name: 'supportsInterface',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'symbol',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
        name: 'timestampToWeek',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'token',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'totalSupply',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'transfer',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'transferFrom',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
        name: 'transferOwnership',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
        name: 'trustedRemoteLookup',
        outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'useCustomAdapterParams',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OracleMock
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const oracleMockABI = [
    { stateMutability: 'nonpayable', type: 'constructor', inputs: [{ name: '__name', internalType: 'string', type: 'string' }] },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: '_name',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'data', internalType: 'bytes', type: 'bytes' }],
        name: 'get',
        outputs: [
            { name: 'success', internalType: 'bool', type: 'bool' },
            { name: '_rate', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'mockValue',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'data', internalType: 'bytes', type: 'bytes' }],
        name: 'name',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'data', internalType: 'bytes', type: 'bytes' }],
        name: 'peek',
        outputs: [
            { name: 'success', internalType: 'bool', type: 'bool' },
            { name: 'rate', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'data', internalType: 'bytes', type: 'bytes' }],
        name: 'peekSpot',
        outputs: [{ name: 'rate', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_rate', internalType: 'uint256', type: 'uint256' }],
        name: 'setRate',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'data', internalType: 'bytes', type: 'bytes' }],
        name: 'symbol',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TapiocaOptionBrokerMock
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tapiocaOptionBrokerMockABI = [
    {
        stateMutability: 'nonpayable',
        type: 'constructor',
        inputs: [
            { name: '_tOLP', internalType: 'address', type: 'address' },
            { name: '_oTAP', internalType: 'address', type: 'address' },
            { name: '_tapOFT', internalType: 'address', type: 'address' },
            { name: '_oracle', internalType: 'contract IOracle', type: 'address' },
            { name: '_paymentTokenBeneficiary', internalType: 'address', type: 'address' },
        ],
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'cumulative', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'averageMagnitude', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'totalParticipants', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'AMLDivergence',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'to', internalType: 'address', type: 'address', indexed: true },
            { name: 'paymentToken', internalType: 'contract IERC20', type: 'address', indexed: true },
            { name: 'oTapTokenID', internalType: 'uint256', type: 'uint256', indexed: false },
            { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'ExerciseOption',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'ExitPosition',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'extractedTAP', internalType: 'uint256', type: 'uint256', indexed: false },
            { name: 'epochTAPValuation', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'NewEpoch',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
            { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
        ],
        name: 'OwnershipTransferred',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'sglAssetID', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'totalDeposited', internalType: 'uint256', type: 'uint256', indexed: false },
            {
                name: 'lock',
                internalType: 'struct LockPosition',
                type: 'tuple',
                components: [
                    { name: 'sglAssetID', internalType: 'uint128', type: 'uint128' },
                    { name: 'amount', internalType: 'uint128', type: 'uint128' },
                    { name: 'lockTime', internalType: 'uint128', type: 'uint128' },
                    { name: 'lockDuration', internalType: 'uint128', type: 'uint128' },
                ],
                indexed: false,
            },
            { name: 'discount', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'Participate',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
        name: 'Paused',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'paymentToken', internalType: 'contract IERC20', type: 'address', indexed: false },
            { name: 'oracle', internalType: 'contract IOracle', type: 'address', indexed: false },
            { name: 'oracleData', internalType: 'bytes', type: 'bytes', indexed: false },
        ],
        name: 'SetPaymentToken',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
        name: 'Unpaused',
    },
    { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'claimOwnership', outputs: [] },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_paymentTokens', internalType: 'address[]', type: 'address[]' }],
        name: 'collectPaymentTokens',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'epoch',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'epochTAPValuation',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_oTAPTokenID', internalType: 'uint256', type: 'uint256' },
            { name: '_paymentToken', internalType: 'contract IERC20', type: 'address' },
        ],
        name: 'exerciseOption',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_tOLPTokenID', internalType: 'uint256', type: 'uint256' }],
        name: 'exitPosition',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: '_oTAPTokenID', internalType: 'uint256', type: 'uint256' },
            { name: '_paymentToken', internalType: 'contract IERC20', type: 'address' },
        ],
        name: 'getOTCDealDetails',
        outputs: [
            { name: 'eligibleTapAmount', internalType: 'uint256', type: 'uint256' },
            { name: 'paymentTokenAmount', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'lastEpochUpdate',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'newEpoch', outputs: [] },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'oTAP',
        outputs: [{ name: '', internalType: 'contract OTAP', type: 'address' }],
    },
    { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'oTAPBrokerClaim', outputs: [] },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: '', internalType: 'uint256', type: 'uint256' },
            { name: '', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'oTAPCalls',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'owner',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'participants',
        outputs: [
            { name: 'hasParticipated', internalType: 'bool', type: 'bool' },
            { name: 'hasVotingPower', internalType: 'bool', type: 'bool' },
            { name: 'averageMagnitude', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_tOLPTokenID', internalType: 'uint256', type: 'uint256' }],
        name: 'participate',
        outputs: [{ name: 'oTAPTokenID', internalType: 'uint256', type: 'uint256' }],
    },
    { stateMutability: 'view', type: 'function', inputs: [], name: 'paused', outputs: [{ name: '', internalType: 'bool', type: 'bool' }] },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'paymentTokenBeneficiary',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
        name: 'paymentTokens',
        outputs: [
            { name: 'oracle', internalType: 'contract IOracle', type: 'address' },
            { name: 'oracleData', internalType: 'bytes', type: 'bytes' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'pendingOwner',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_paymentToken', internalType: 'contract IERC20', type: 'address' },
            { name: '_oracle', internalType: 'contract IOracle', type: 'address' },
            { name: '_oracleData', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'setPaymentToken',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_paymentTokenBeneficiary', internalType: 'address', type: 'address' }],
        name: 'setPaymentTokenBeneficiary',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: '', internalType: 'uint256', type: 'uint256' },
            { name: '', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'singularityGauges',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'tOLP',
        outputs: [{ name: '', internalType: 'contract TapiocaOptionLiquidityProvision', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'tapOFT',
        outputs: [{ name: '', internalType: 'contract TapOFT', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'tapOracle',
        outputs: [{ name: '', internalType: 'contract IOracle', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'tapOracleData',
        outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'newOwner', internalType: 'address', type: 'address' },
            { name: 'direct', internalType: 'bool', type: 'bool' },
            { name: 'renounce', internalType: 'bool', type: 'bool' },
        ],
        name: 'transferOwnership',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
        name: 'twAML',
        outputs: [
            { name: 'totalParticipants', internalType: 'uint256', type: 'uint256' },
            { name: 'averageMagnitude', internalType: 'uint256', type: 'uint256' },
            { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
            { name: 'cumulative', internalType: 'uint256', type: 'uint256' },
        ],
    },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Mock
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20MockABI = [
    {
        stateMutability: 'nonpayable',
        type: 'constructor',
        inputs: [
            { name: '_name', internalType: 'string', type: 'string' },
            { name: '_symbol', internalType: 'string', type: 'string' },
            { name: '_initialAmount', internalType: 'uint256', type: 'uint256' },
            { name: '_decimals', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'owner', internalType: 'address', type: 'address', indexed: true },
            { name: 'spender', internalType: 'address', type: 'address', indexed: true },
            { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'Approval',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'from', internalType: 'address', type: 'address', indexed: true },
            { name: 'to', internalType: 'address', type: 'address', indexed: true },
            { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'Transfer',
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'DOMAIN_SEPARATOR',
        outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'address', type: 'address' },
        ],
        name: 'allowance',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'spender', internalType: 'address', type: 'address' },
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'approve',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'address', type: 'address' }],
        name: 'balanceOf',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'decimals',
        outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: '_val', internalType: 'uint256', type: 'uint256' }],
        name: 'freeMint',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_to', internalType: 'address', type: 'address' },
            { name: '_amount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'mintTo',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'name',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'address', type: 'address' }],
        name: 'nonces',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'owner',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'owner_', internalType: 'address', type: 'address' },
            { name: 'spender', internalType: 'address', type: 'address' },
            { name: 'value', internalType: 'uint256', type: 'uint256' },
            { name: 'deadline', internalType: 'uint256', type: 'uint256' },
            { name: 'v', internalType: 'uint8', type: 'uint8' },
            { name: 'r', internalType: 'bytes32', type: 'bytes32' },
            { name: 's', internalType: 'bytes32', type: 'bytes32' },
        ],
        name: 'permit',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'symbol',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'totalSupply',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'transfer',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'transferFrom',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// YieldBox
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const yieldBoxABI = [
    {
        stateMutability: 'nonpayable',
        type: 'constructor',
        inputs: [
            { name: 'wrappedNative_', internalType: 'contract IWrappedNative', type: 'address' },
            { name: 'uriBuilder_', internalType: 'contract YieldBoxURIBuilder', type: 'address' },
        ],
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: '_owner', internalType: 'address', type: 'address', indexed: true },
            { name: '_operator', internalType: 'address', type: 'address', indexed: true },
            { name: '_approved', internalType: 'bool', type: 'bool', indexed: false },
        ],
        name: 'ApprovalForAll',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'tokenType', internalType: 'enum TokenType', type: 'uint8', indexed: true },
            { name: 'contractAddress', internalType: 'address', type: 'address', indexed: true },
            { name: 'strategy', internalType: 'contract IStrategy', type: 'address', indexed: false },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'assetId', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'AssetRegistered',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
            { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
            { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
        ],
        name: 'OwnershipTransferred',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: 'creator', internalType: 'address', type: 'address', indexed: true },
            { name: 'name', internalType: 'string', type: 'string', indexed: false },
            { name: 'symbol', internalType: 'string', type: 'string', indexed: false },
            { name: 'decimals', internalType: 'uint8', type: 'uint8', indexed: false },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'TokenCreated',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: '_operator', internalType: 'address', type: 'address', indexed: true },
            { name: '_from', internalType: 'address', type: 'address', indexed: true },
            { name: '_to', internalType: 'address', type: 'address', indexed: true },
            { name: '_ids', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
            { name: '_values', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
        ],
        name: 'TransferBatch',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: '_operator', internalType: 'address', type: 'address', indexed: true },
            { name: '_from', internalType: 'address', type: 'address', indexed: true },
            { name: '_to', internalType: 'address', type: 'address', indexed: true },
            { name: '_id', internalType: 'uint256', type: 'uint256', indexed: false },
            { name: '_value', internalType: 'uint256', type: 'uint256', indexed: false },
        ],
        name: 'TransferSingle',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            { name: '_value', internalType: 'string', type: 'string', indexed: false },
            { name: '_id', internalType: 'uint256', type: 'uint256', indexed: true },
        ],
        name: 'URI',
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'user', internalType: 'address', type: 'address' },
            { name: 'assetId', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'amountOf',
        outputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'assetCount',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'assetId', internalType: 'uint256', type: 'uint256' }],
        name: 'assetTotals',
        outputs: [
            { name: 'totalShare', internalType: 'uint256', type: 'uint256' },
            { name: 'totalAmount', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
        name: 'assets',
        outputs: [
            { name: 'tokenType', internalType: 'enum TokenType', type: 'uint8' },
            { name: 'contractAddress', internalType: 'address', type: 'address' },
            { name: 'strategy', internalType: 'contract IStrategy', type: 'address' },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'balanceOf',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'owners', internalType: 'address[]', type: 'address[]' },
            { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
        ],
        name: 'balanceOfBatch',
        outputs: [{ name: 'balances', internalType: 'uint256[]', type: 'uint256[]' }],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: 'calls', internalType: 'bytes[]', type: 'bytes[]' },
            { name: 'revertOnFail', internalType: 'bool', type: 'bool' },
        ],
        name: 'batch',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
            { name: 'froms', internalType: 'address[]', type: 'address[]' },
            { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
        ],
        name: 'batchBurn',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
            { name: 'tos', internalType: 'address[]', type: 'address[]' },
            { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
        ],
        name: 'batchMint',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'assetIds_', internalType: 'uint256[]', type: 'uint256[]' },
            { name: 'shares_', internalType: 'uint256[]', type: 'uint256[]' },
        ],
        name: 'batchTransfer',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'burn',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
        name: 'claimOwnership',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'name', internalType: 'string', type: 'string' },
            { name: 'symbol', internalType: 'string', type: 'string' },
            { name: 'decimals', internalType: 'uint8', type: 'uint8' },
            { name: 'uri', internalType: 'string', type: 'string' },
        ],
        name: 'createToken',
        outputs: [{ name: 'tokenId', internalType: 'uint32', type: 'uint32' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'assetId', internalType: 'uint256', type: 'uint256' }],
        name: 'decimals',
        outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'tokenType', internalType: 'enum TokenType', type: 'uint8' },
            { name: 'contractAddress', internalType: 'address', type: 'address' },
            { name: 'strategy', internalType: 'contract IStrategy', type: 'address' },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
            { name: 'share', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'deposit',
        outputs: [
            { name: 'amountOut', internalType: 'uint256', type: 'uint256' },
            { name: 'shareOut', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'assetId', internalType: 'uint256', type: 'uint256' },
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
            { name: 'share', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'depositAsset',
        outputs: [
            { name: 'amountOut', internalType: 'uint256', type: 'uint256' },
            { name: 'shareOut', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: 'strategy', internalType: 'contract IStrategy', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'depositETH',
        outputs: [
            { name: 'amountOut', internalType: 'uint256', type: 'uint256' },
            { name: 'shareOut', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [
            { name: 'assetId', internalType: 'uint256', type: 'uint256' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'depositETHAsset',
        outputs: [
            { name: 'amountOut', internalType: 'uint256', type: 'uint256' },
            { name: 'shareOut', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'assetId', internalType: 'uint256', type: 'uint256' },
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
        ],
        name: 'depositNFTAsset',
        outputs: [
            { name: 'amountOut', internalType: 'uint256', type: 'uint256' },
            { name: 'shareOut', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: '', internalType: 'enum TokenType', type: 'uint8' },
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'contract IStrategy', type: 'address' },
            { name: '', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'ids',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'address', type: 'address' },
        ],
        name: 'isApprovedForAll',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'mint',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'assetId', internalType: 'uint256', type: 'uint256' }],
        name: 'name',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
        name: 'nativeTokens',
        outputs: [
            { name: 'name', internalType: 'string', type: 'string' },
            { name: 'symbol', internalType: 'string', type: 'string' },
            { name: 'decimals', internalType: 'uint8', type: 'uint8' },
            { name: 'uri', internalType: 'string', type: 'string' },
        ],
    },
    {
        stateMutability: 'pure',
        type: 'function',
        inputs: [
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'uint256[]', type: 'uint256[]' },
            { name: '', internalType: 'uint256[]', type: 'uint256[]' },
            { name: '', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'onERC1155BatchReceived',
        outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
    },
    {
        stateMutability: 'pure',
        type: 'function',
        inputs: [
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'uint256', type: 'uint256' },
            { name: '', internalType: 'uint256', type: 'uint256' },
            { name: '', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'onERC1155Received',
        outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
    },
    {
        stateMutability: 'pure',
        type: 'function',
        inputs: [
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'uint256', type: 'uint256' },
            { name: '', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'onERC721Received',
        outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
        name: 'owner',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
        name: 'pendingOwner',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'token', internalType: 'contract IERC20', type: 'address' },
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
            { name: 'deadline', internalType: 'uint256', type: 'uint256' },
            { name: 'v', internalType: 'uint8', type: 'uint8' },
            { name: 'r', internalType: 'bytes32', type: 'bytes32' },
            { name: 's', internalType: 'bytes32', type: 'bytes32' },
        ],
        name: 'permitToken',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'tokenType', internalType: 'enum TokenType', type: 'uint8' },
            { name: 'contractAddress', internalType: 'address', type: 'address' },
            { name: 'strategy', internalType: 'contract IStrategy', type: 'address' },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'registerAsset',
        outputs: [{ name: 'assetId', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
            { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
            { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'safeBatchTransferFrom',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'id', internalType: 'uint256', type: 'uint256' },
            { name: 'value', internalType: 'uint256', type: 'uint256' },
            { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'safeTransferFrom',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'operator', internalType: 'address', type: 'address' },
            { name: 'approved', internalType: 'bool', type: 'bool' },
        ],
        name: 'setApprovalForAll',
        outputs: [],
    },
    {
        stateMutability: 'pure',
        type: 'function',
        inputs: [{ name: 'interfaceID', internalType: 'bytes4', type: 'bytes4' }],
        name: 'supportsInterface',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'assetId', internalType: 'uint256', type: 'uint256' }],
        name: 'symbol',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'assetId', internalType: 'uint256', type: 'uint256' },
            { name: 'share', internalType: 'uint256', type: 'uint256' },
            { name: 'roundUp', internalType: 'bool', type: 'bool' },
        ],
        name: 'toAmount',
        outputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'assetId', internalType: 'uint256', type: 'uint256' },
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
            { name: 'roundUp', internalType: 'bool', type: 'bool' },
        ],
        name: 'toShare',
        outputs: [{ name: 'share', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
        name: 'totalSupply',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'assetId', internalType: 'uint256', type: 'uint256' },
            { name: 'share', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'transfer',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'tos', internalType: 'address[]', type: 'address[]' },
            { name: 'assetId', internalType: 'uint256', type: 'uint256' },
            { name: 'shares', internalType: 'uint256[]', type: 'uint256[]' },
        ],
        name: 'transferMultiple',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
            { name: 'newOwner', internalType: 'address', type: 'address' },
            { name: 'direct', internalType: 'bool', type: 'bool' },
            { name: 'renounce', internalType: 'bool', type: 'bool' },
        ],
        name: 'transferOwnership',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'assetId', internalType: 'uint256', type: 'uint256' }],
        name: 'uri',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'uriBuilder',
        outputs: [{ name: '', internalType: 'contract YieldBoxURIBuilder', type: 'address' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'assetId', internalType: 'uint256', type: 'uint256' },
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
            { name: 'share', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'withdraw',
        outputs: [
            { name: 'amountOut', internalType: 'uint256', type: 'uint256' },
            { name: 'shareOut', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'wrappedNative',
        outputs: [{ name: '', internalType: 'contract IWrappedNative', type: 'address' }],
    },
    { stateMutability: 'payable', type: 'receive' },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Core
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link vestingABI}__.
 */
export function readVesting<TAbi extends readonly unknown[] = typeof vestingABI, TFunctionName extends string = string>(
    config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>,
) {
    return readContract({ abi: vestingABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link vestingABI}__.
 */
export function writeVesting<TFunctionName extends string>(
    config:
        | Omit<WriteContractPreparedArgs<typeof vestingABI, TFunctionName>, 'abi'>
        | Omit<WriteContractUnpreparedArgs<typeof vestingABI, TFunctionName>, 'abi'>,
) {
    return writeContract({ abi: vestingABI, ...config } as WriteContractArgs<typeof vestingABI, TFunctionName>);
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__.
 */
export function readTapiocaOptionBroker<
    TAbi extends readonly unknown[] = typeof tapiocaOptionBrokerABI,
    TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
    return readContract({ abi: tapiocaOptionBrokerABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__.
 */
export function writeTapiocaOptionBroker<TFunctionName extends string>(
    config:
        | Omit<WriteContractPreparedArgs<typeof tapiocaOptionBrokerABI, TFunctionName>, 'abi'>
        | Omit<WriteContractUnpreparedArgs<typeof tapiocaOptionBrokerABI, TFunctionName>, 'abi'>,
) {
    return writeContract({ abi: tapiocaOptionBrokerABI, ...config } as WriteContractArgs<typeof tapiocaOptionBrokerABI, TFunctionName>);
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__.
 */
export function readTapiocaOptionLiquidityProvision<
    TAbi extends readonly unknown[] = typeof tapiocaOptionLiquidityProvisionABI,
    TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
    return readContract({ abi: tapiocaOptionLiquidityProvisionABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__.
 */
export function writeTapiocaOptionLiquidityProvision<TFunctionName extends string>(
    config:
        | Omit<WriteContractPreparedArgs<typeof tapiocaOptionLiquidityProvisionABI, TFunctionName>, 'abi'>
        | Omit<WriteContractUnpreparedArgs<typeof tapiocaOptionLiquidityProvisionABI, TFunctionName>, 'abi'>,
) {
    return writeContract({ abi: tapiocaOptionLiquidityProvisionABI, ...config } as WriteContractArgs<
        typeof tapiocaOptionLiquidityProvisionABI,
        TFunctionName
    >);
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link otapABI}__.
 */
export function readOtap<TAbi extends readonly unknown[] = typeof otapABI, TFunctionName extends string = string>(
    config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>,
) {
    return readContract({ abi: otapABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link otapABI}__.
 */
export function writeOtap<TFunctionName extends string>(
    config:
        | Omit<WriteContractPreparedArgs<typeof otapABI, TFunctionName>, 'abi'>
        | Omit<WriteContractUnpreparedArgs<typeof otapABI, TFunctionName>, 'abi'>,
) {
    return writeContract({ abi: otapABI, ...config } as WriteContractArgs<typeof otapABI, TFunctionName>);
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link tapOftABI}__.
 */
export function readTapOft<TAbi extends readonly unknown[] = typeof tapOftABI, TFunctionName extends string = string>(
    config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>,
) {
    return readContract({ abi: tapOftABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link tapOftABI}__.
 */
export function writeTapOft<TFunctionName extends string>(
    config:
        | Omit<WriteContractPreparedArgs<typeof tapOftABI, TFunctionName>, 'abi'>
        | Omit<WriteContractUnpreparedArgs<typeof tapOftABI, TFunctionName>, 'abi'>,
) {
    return writeContract({ abi: tapOftABI, ...config } as WriteContractArgs<typeof tapOftABI, TFunctionName>);
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link oracleMockABI}__.
 */
export function readOracleMock<TAbi extends readonly unknown[] = typeof oracleMockABI, TFunctionName extends string = string>(
    config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>,
) {
    return readContract({ abi: oracleMockABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link oracleMockABI}__.
 */
export function writeOracleMock<TFunctionName extends string>(
    config:
        | Omit<WriteContractPreparedArgs<typeof oracleMockABI, TFunctionName>, 'abi'>
        | Omit<WriteContractUnpreparedArgs<typeof oracleMockABI, TFunctionName>, 'abi'>,
) {
    return writeContract({ abi: oracleMockABI, ...config } as WriteContractArgs<typeof oracleMockABI, TFunctionName>);
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__.
 */
export function readTapiocaOptionBrokerMock<
    TAbi extends readonly unknown[] = typeof tapiocaOptionBrokerMockABI,
    TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
    return readContract({ abi: tapiocaOptionBrokerMockABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__.
 */
export function writeTapiocaOptionBrokerMock<TFunctionName extends string>(
    config:
        | Omit<WriteContractPreparedArgs<typeof tapiocaOptionBrokerMockABI, TFunctionName>, 'abi'>
        | Omit<WriteContractUnpreparedArgs<typeof tapiocaOptionBrokerMockABI, TFunctionName>, 'abi'>,
) {
    return writeContract({ abi: tapiocaOptionBrokerMockABI, ...config } as WriteContractArgs<
        typeof tapiocaOptionBrokerMockABI,
        TFunctionName
    >);
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link erc20MockABI}__.
 */
export function readErc20Mock<TAbi extends readonly unknown[] = typeof erc20MockABI, TFunctionName extends string = string>(
    config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>,
) {
    return readContract({ abi: erc20MockABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link erc20MockABI}__.
 */
export function writeErc20Mock<TFunctionName extends string>(
    config:
        | Omit<WriteContractPreparedArgs<typeof erc20MockABI, TFunctionName>, 'abi'>
        | Omit<WriteContractUnpreparedArgs<typeof erc20MockABI, TFunctionName>, 'abi'>,
) {
    return writeContract({ abi: erc20MockABI, ...config } as WriteContractArgs<typeof erc20MockABI, TFunctionName>);
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link yieldBoxABI}__.
 */
export function readYieldBox<TAbi extends readonly unknown[] = typeof yieldBoxABI, TFunctionName extends string = string>(
    config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>,
) {
    return readContract({ abi: yieldBoxABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>);
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link yieldBoxABI}__.
 */
export function writeYieldBox<TFunctionName extends string>(
    config:
        | Omit<WriteContractPreparedArgs<typeof yieldBoxABI, TFunctionName>, 'abi'>
        | Omit<WriteContractUnpreparedArgs<typeof yieldBoxABI, TFunctionName>, 'abi'>,
) {
    return writeContract({ abi: yieldBoxABI, ...config } as WriteContractArgs<typeof yieldBoxABI, TFunctionName>);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link vestingABI}__.
 */
export function useVesting(config: Omit<UseContractConfig, 'abi'> = {} as any) {
    return useContract({ abi: vestingABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__.
 */
export function useVestingRead<TFunctionName extends string>(
    config: Omit<UseContractReadConfig<typeof vestingABI, TFunctionName>, 'abi'> = {} as any,
) {
    return useContractRead({ abi: vestingABI, ...config } as UseContractReadConfig<typeof vestingABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"claimable"`.
 */
export function useVestingClaimable(
    config: Omit<UseContractReadConfig<typeof vestingABI, 'claimable'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: vestingABI, functionName: 'claimable', ...config } as UseContractReadConfig<
        typeof vestingABI,
        'claimable'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"cliff"`.
 */
export function useVestingCliff(config: Omit<UseContractReadConfig<typeof vestingABI, 'cliff'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: vestingABI, functionName: 'cliff', ...config } as UseContractReadConfig<typeof vestingABI, 'cliff'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"conservator"`.
 */
export function useVestingConservator(
    config: Omit<UseContractReadConfig<typeof vestingABI, 'conservator'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: vestingABI, functionName: 'conservator', ...config } as UseContractReadConfig<
        typeof vestingABI,
        'conservator'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"duration"`.
 */
export function useVestingDuration(config: Omit<UseContractReadConfig<typeof vestingABI, 'duration'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: vestingABI, functionName: 'duration', ...config } as UseContractReadConfig<
        typeof vestingABI,
        'duration'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"owner"`.
 */
export function useVestingOwner(config: Omit<UseContractReadConfig<typeof vestingABI, 'owner'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: vestingABI, functionName: 'owner', ...config } as UseContractReadConfig<typeof vestingABI, 'owner'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"paused"`.
 */
export function useVestingPaused(config: Omit<UseContractReadConfig<typeof vestingABI, 'paused'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: vestingABI, functionName: 'paused', ...config } as UseContractReadConfig<typeof vestingABI, 'paused'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useVestingPendingOwner(
    config: Omit<UseContractReadConfig<typeof vestingABI, 'pendingOwner'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: vestingABI, functionName: 'pendingOwner', ...config } as UseContractReadConfig<
        typeof vestingABI,
        'pendingOwner'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"revokeRequestedAt"`.
 */
export function useVestingRevokeRequestedAt(
    config: Omit<UseContractReadConfig<typeof vestingABI, 'revokeRequestedAt'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: vestingABI, functionName: 'revokeRequestedAt', ...config } as UseContractReadConfig<
        typeof vestingABI,
        'revokeRequestedAt'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"revokeTimeWindow"`.
 */
export function useVestingRevokeTimeWindow(
    config: Omit<UseContractReadConfig<typeof vestingABI, 'revokeTimeWindow'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: vestingABI, functionName: 'revokeTimeWindow', ...config } as UseContractReadConfig<
        typeof vestingABI,
        'revokeTimeWindow'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"revoked"`.
 */
export function useVestingRevoked(config: Omit<UseContractReadConfig<typeof vestingABI, 'revoked'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: vestingABI, functionName: 'revoked', ...config } as UseContractReadConfig<typeof vestingABI, 'revoked'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"seeded"`.
 */
export function useVestingSeeded(config: Omit<UseContractReadConfig<typeof vestingABI, 'seeded'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: vestingABI, functionName: 'seeded', ...config } as UseContractReadConfig<typeof vestingABI, 'seeded'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"start"`.
 */
export function useVestingStart(config: Omit<UseContractReadConfig<typeof vestingABI, 'start'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: vestingABI, functionName: 'start', ...config } as UseContractReadConfig<typeof vestingABI, 'start'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"token"`.
 */
export function useVestingToken(config: Omit<UseContractReadConfig<typeof vestingABI, 'token'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: vestingABI, functionName: 'token', ...config } as UseContractReadConfig<typeof vestingABI, 'token'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"totalClaimed"`.
 */
export function useVestingTotalClaimed(
    config: Omit<UseContractReadConfig<typeof vestingABI, 'totalClaimed'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: vestingABI, functionName: 'totalClaimed', ...config } as UseContractReadConfig<
        typeof vestingABI,
        'totalClaimed'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"users"`.
 */
export function useVestingUsers(config: Omit<UseContractReadConfig<typeof vestingABI, 'users'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: vestingABI, functionName: 'users', ...config } as UseContractReadConfig<typeof vestingABI, 'users'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vestingABI}__ and `functionName` set to `"vested"`.
 */
export function useVestingVested(config: Omit<UseContractReadConfig<typeof vestingABI, 'vested'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: vestingABI, functionName: 'vested', ...config } as UseContractReadConfig<typeof vestingABI, 'vested'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__.
 */
export function useTapiocaOptionBroker(config: Omit<UseContractConfig, 'abi'> = {} as any) {
    return useContract({ abi: tapiocaOptionBrokerABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__.
 */
export function useTapiocaOptionBrokerRead<TFunctionName extends string>(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerABI, TFunctionName>, 'abi'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerABI, ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerABI,
        TFunctionName
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__ and `functionName` set to `"epoch"`.
 */
export function useTapiocaOptionBrokerEpoch(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerABI, 'epoch'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerABI, functionName: 'epoch', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerABI,
        'epoch'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__ and `functionName` set to `"epochTAPValuation"`.
 */
export function useTapiocaOptionBrokerEpochTapValuation(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerABI, 'epochTAPValuation'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerABI, functionName: 'epochTAPValuation', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerABI,
        'epochTAPValuation'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__ and `functionName` set to `"getOTCDealDetails"`.
 */
export function useTapiocaOptionBrokerGetOtcDealDetails(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerABI, 'getOTCDealDetails'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerABI, functionName: 'getOTCDealDetails', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerABI,
        'getOTCDealDetails'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__ and `functionName` set to `"lastEpochUpdate"`.
 */
export function useTapiocaOptionBrokerLastEpochUpdate(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerABI, 'lastEpochUpdate'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerABI, functionName: 'lastEpochUpdate', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerABI,
        'lastEpochUpdate'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__ and `functionName` set to `"oTAP"`.
 */
export function useTapiocaOptionBrokerOTap(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerABI, 'oTAP'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerABI, functionName: 'oTAP', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerABI,
        'oTAP'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__ and `functionName` set to `"oTAPCalls"`.
 */
export function useTapiocaOptionBrokerOTapCalls(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerABI, 'oTAPCalls'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerABI, functionName: 'oTAPCalls', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerABI,
        'oTAPCalls'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__ and `functionName` set to `"owner"`.
 */
export function useTapiocaOptionBrokerOwner(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerABI, 'owner'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerABI, functionName: 'owner', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerABI,
        'owner'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__ and `functionName` set to `"participants"`.
 */
export function useTapiocaOptionBrokerParticipants(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerABI, 'participants'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerABI, functionName: 'participants', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerABI,
        'participants'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__ and `functionName` set to `"paused"`.
 */
export function useTapiocaOptionBrokerPaused(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerABI, 'paused'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerABI, functionName: 'paused', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerABI,
        'paused'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__ and `functionName` set to `"paymentTokenBeneficiary"`.
 */
export function useTapiocaOptionBrokerPaymentTokenBeneficiary(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerABI, 'paymentTokenBeneficiary'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerABI, functionName: 'paymentTokenBeneficiary', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerABI,
        'paymentTokenBeneficiary'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__ and `functionName` set to `"paymentTokens"`.
 */
export function useTapiocaOptionBrokerPaymentTokens(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerABI, 'paymentTokens'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerABI, functionName: 'paymentTokens', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerABI,
        'paymentTokens'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useTapiocaOptionBrokerPendingOwner(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerABI, 'pendingOwner'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerABI, functionName: 'pendingOwner', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerABI,
        'pendingOwner'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__ and `functionName` set to `"singularityGauges"`.
 */
export function useTapiocaOptionBrokerSingularityGauges(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerABI, 'singularityGauges'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerABI, functionName: 'singularityGauges', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerABI,
        'singularityGauges'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__ and `functionName` set to `"tOLP"`.
 */
export function useTapiocaOptionBrokerTOlp(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerABI, 'tOLP'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerABI, functionName: 'tOLP', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerABI,
        'tOLP'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__ and `functionName` set to `"tapOFT"`.
 */
export function useTapiocaOptionBrokerTapOft(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerABI, 'tapOFT'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerABI, functionName: 'tapOFT', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerABI,
        'tapOFT'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__ and `functionName` set to `"tapOracle"`.
 */
export function useTapiocaOptionBrokerTapOracle(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerABI, 'tapOracle'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerABI, functionName: 'tapOracle', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerABI,
        'tapOracle'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__ and `functionName` set to `"tapOracleData"`.
 */
export function useTapiocaOptionBrokerTapOracleData(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerABI, 'tapOracleData'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerABI, functionName: 'tapOracleData', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerABI,
        'tapOracleData'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerABI}__ and `functionName` set to `"twAML"`.
 */
export function useTapiocaOptionBrokerTwAml(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerABI, 'twAML'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerABI, functionName: 'twAML', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerABI,
        'twAML'
    >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__.
 */
export function useTapiocaOptionLiquidityProvision(config: Omit<UseContractConfig, 'abi'> = {} as any) {
    return useContract({ abi: tapiocaOptionLiquidityProvisionABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__.
 */
export function useTapiocaOptionLiquidityProvisionRead<TFunctionName extends string>(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, TFunctionName>, 'abi'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionLiquidityProvisionABI, ...config } as UseContractReadConfig<
        typeof tapiocaOptionLiquidityProvisionABI,
        TFunctionName
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"activeSingularities"`.
 */
export function useTapiocaOptionLiquidityProvisionActiveSingularities(
    config: Omit<
        UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'activeSingularities'>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: tapiocaOptionLiquidityProvisionABI,
        functionName: 'activeSingularities',
        ...config,
    } as UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'activeSingularities'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useTapiocaOptionLiquidityProvisionBalanceOf(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'balanceOf'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionLiquidityProvisionABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
        typeof tapiocaOptionLiquidityProvisionABI,
        'balanceOf'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"getApproved"`.
 */
export function useTapiocaOptionLiquidityProvisionGetApproved(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'getApproved'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionLiquidityProvisionABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
        typeof tapiocaOptionLiquidityProvisionABI,
        'getApproved'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"getLock"`.
 */
export function useTapiocaOptionLiquidityProvisionGetLock(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'getLock'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionLiquidityProvisionABI, functionName: 'getLock', ...config } as UseContractReadConfig<
        typeof tapiocaOptionLiquidityProvisionABI,
        'getLock'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"getSingularities"`.
 */
export function useTapiocaOptionLiquidityProvisionGetSingularities(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'getSingularities'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({
        abi: tapiocaOptionLiquidityProvisionABI,
        functionName: 'getSingularities',
        ...config,
    } as UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'getSingularities'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"getSingularityPools"`.
 */
export function useTapiocaOptionLiquidityProvisionGetSingularityPools(
    config: Omit<
        UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'getSingularityPools'>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: tapiocaOptionLiquidityProvisionABI,
        functionName: 'getSingularityPools',
        ...config,
    } as UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'getSingularityPools'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"getTotalPoolDeposited"`.
 */
export function useTapiocaOptionLiquidityProvisionGetTotalPoolDeposited(
    config: Omit<
        UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'getTotalPoolDeposited'>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: tapiocaOptionLiquidityProvisionABI,
        functionName: 'getTotalPoolDeposited',
        ...config,
    } as UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'getTotalPoolDeposited'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useTapiocaOptionLiquidityProvisionIsApprovedForAll(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'isApprovedForAll'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({
        abi: tapiocaOptionLiquidityProvisionABI,
        functionName: 'isApprovedForAll',
        ...config,
    } as UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'isApprovedForAll'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"isApprovedOrOwner"`.
 */
export function useTapiocaOptionLiquidityProvisionIsApprovedOrOwner(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'isApprovedOrOwner'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({
        abi: tapiocaOptionLiquidityProvisionABI,
        functionName: 'isApprovedOrOwner',
        ...config,
    } as UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'isApprovedOrOwner'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"lockPositions"`.
 */
export function useTapiocaOptionLiquidityProvisionLockPositions(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'lockPositions'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionLiquidityProvisionABI, functionName: 'lockPositions', ...config } as UseContractReadConfig<
        typeof tapiocaOptionLiquidityProvisionABI,
        'lockPositions'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"name"`.
 */
export function useTapiocaOptionLiquidityProvisionName(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'name'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionLiquidityProvisionABI, functionName: 'name', ...config } as UseContractReadConfig<
        typeof tapiocaOptionLiquidityProvisionABI,
        'name'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useTapiocaOptionLiquidityProvisionOnErc1155Received(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'onERC1155Received'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({
        abi: tapiocaOptionLiquidityProvisionABI,
        functionName: 'onERC1155Received',
        ...config,
    } as UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'onERC1155Received'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"owner"`.
 */
export function useTapiocaOptionLiquidityProvisionOwner(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'owner'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionLiquidityProvisionABI, functionName: 'owner', ...config } as UseContractReadConfig<
        typeof tapiocaOptionLiquidityProvisionABI,
        'owner'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useTapiocaOptionLiquidityProvisionOwnerOf(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'ownerOf'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionLiquidityProvisionABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
        typeof tapiocaOptionLiquidityProvisionABI,
        'ownerOf'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"paused"`.
 */
export function useTapiocaOptionLiquidityProvisionPaused(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'paused'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionLiquidityProvisionABI, functionName: 'paused', ...config } as UseContractReadConfig<
        typeof tapiocaOptionLiquidityProvisionABI,
        'paused'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useTapiocaOptionLiquidityProvisionPendingOwner(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'pendingOwner'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionLiquidityProvisionABI, functionName: 'pendingOwner', ...config } as UseContractReadConfig<
        typeof tapiocaOptionLiquidityProvisionABI,
        'pendingOwner'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"sglAssetIDToAddress"`.
 */
export function useTapiocaOptionLiquidityProvisionSglAssetIdToAddress(
    config: Omit<
        UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'sglAssetIDToAddress'>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: tapiocaOptionLiquidityProvisionABI,
        functionName: 'sglAssetIDToAddress',
        ...config,
    } as UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'sglAssetIDToAddress'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"singularities"`.
 */
export function useTapiocaOptionLiquidityProvisionSingularities(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'singularities'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionLiquidityProvisionABI, functionName: 'singularities', ...config } as UseContractReadConfig<
        typeof tapiocaOptionLiquidityProvisionABI,
        'singularities'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useTapiocaOptionLiquidityProvisionSupportsInterface(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'supportsInterface'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({
        abi: tapiocaOptionLiquidityProvisionABI,
        functionName: 'supportsInterface',
        ...config,
    } as UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'supportsInterface'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"symbol"`.
 */
export function useTapiocaOptionLiquidityProvisionSymbol(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'symbol'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionLiquidityProvisionABI, functionName: 'symbol', ...config } as UseContractReadConfig<
        typeof tapiocaOptionLiquidityProvisionABI,
        'symbol'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"tokenCounter"`.
 */
export function useTapiocaOptionLiquidityProvisionTokenCounter(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'tokenCounter'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionLiquidityProvisionABI, functionName: 'tokenCounter', ...config } as UseContractReadConfig<
        typeof tapiocaOptionLiquidityProvisionABI,
        'tokenCounter'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useTapiocaOptionLiquidityProvisionTokenUri(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'tokenURI'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionLiquidityProvisionABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<
        typeof tapiocaOptionLiquidityProvisionABI,
        'tokenURI'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"totalSingularityPoolWeights"`.
 */
export function useTapiocaOptionLiquidityProvisionTotalSingularityPoolWeights(
    config: Omit<
        UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'totalSingularityPoolWeights'>,
        'abi' | 'functionName'
    > = {} as any,
) {
    return useContractRead({
        abi: tapiocaOptionLiquidityProvisionABI,
        functionName: 'totalSingularityPoolWeights',
        ...config,
    } as UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'totalSingularityPoolWeights'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionLiquidityProvisionABI}__ and `functionName` set to `"yieldBox"`.
 */
export function useTapiocaOptionLiquidityProvisionYieldBox(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionLiquidityProvisionABI, 'yieldBox'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionLiquidityProvisionABI, functionName: 'yieldBox', ...config } as UseContractReadConfig<
        typeof tapiocaOptionLiquidityProvisionABI,
        'yieldBox'
    >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link otapABI}__.
 */
export function useOtap(config: Omit<UseContractConfig, 'abi'> = {} as any) {
    return useContract({ abi: otapABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link otapABI}__.
 */
export function useOtapRead<TFunctionName extends string>(
    config: Omit<UseContractReadConfig<typeof otapABI, TFunctionName>, 'abi'> = {} as any,
) {
    return useContractRead({ abi: otapABI, ...config } as UseContractReadConfig<typeof otapABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link otapABI}__ and `functionName` set to `"attributes"`.
 */
export function useOtapAttributes(config: Omit<UseContractReadConfig<typeof otapABI, 'attributes'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: otapABI, functionName: 'attributes', ...config } as UseContractReadConfig<typeof otapABI, 'attributes'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link otapABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useOtapBalanceOf(config: Omit<UseContractReadConfig<typeof otapABI, 'balanceOf'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: otapABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<typeof otapABI, 'balanceOf'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link otapABI}__ and `functionName` set to `"broker"`.
 */
export function useOtapBroker(config: Omit<UseContractReadConfig<typeof otapABI, 'broker'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: otapABI, functionName: 'broker', ...config } as UseContractReadConfig<typeof otapABI, 'broker'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link otapABI}__ and `functionName` set to `"exists"`.
 */
export function useOtapExists(config: Omit<UseContractReadConfig<typeof otapABI, 'exists'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: otapABI, functionName: 'exists', ...config } as UseContractReadConfig<typeof otapABI, 'exists'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link otapABI}__ and `functionName` set to `"getApproved"`.
 */
export function useOtapGetApproved(config: Omit<UseContractReadConfig<typeof otapABI, 'getApproved'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: otapABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
        typeof otapABI,
        'getApproved'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link otapABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useOtapIsApprovedForAll(
    config: Omit<UseContractReadConfig<typeof otapABI, 'isApprovedForAll'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: otapABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
        typeof otapABI,
        'isApprovedForAll'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link otapABI}__ and `functionName` set to `"isApprovedOrOwner"`.
 */
export function useOtapIsApprovedOrOwner(
    config: Omit<UseContractReadConfig<typeof otapABI, 'isApprovedOrOwner'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: otapABI, functionName: 'isApprovedOrOwner', ...config } as UseContractReadConfig<
        typeof otapABI,
        'isApprovedOrOwner'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link otapABI}__ and `functionName` set to `"mintedOTAP"`.
 */
export function useOtapMintedOtap(config: Omit<UseContractReadConfig<typeof otapABI, 'mintedOTAP'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: otapABI, functionName: 'mintedOTAP', ...config } as UseContractReadConfig<typeof otapABI, 'mintedOTAP'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link otapABI}__ and `functionName` set to `"mintedTAP"`.
 */
export function useOtapMintedTap(config: Omit<UseContractReadConfig<typeof otapABI, 'mintedTAP'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: otapABI, functionName: 'mintedTAP', ...config } as UseContractReadConfig<typeof otapABI, 'mintedTAP'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link otapABI}__ and `functionName` set to `"name"`.
 */
export function useOtapName(config: Omit<UseContractReadConfig<typeof otapABI, 'name'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: otapABI, functionName: 'name', ...config } as UseContractReadConfig<typeof otapABI, 'name'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link otapABI}__ and `functionName` set to `"options"`.
 */
export function useOtapOptions(config: Omit<UseContractReadConfig<typeof otapABI, 'options'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: otapABI, functionName: 'options', ...config } as UseContractReadConfig<typeof otapABI, 'options'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link otapABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useOtapOwnerOf(config: Omit<UseContractReadConfig<typeof otapABI, 'ownerOf'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: otapABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<typeof otapABI, 'ownerOf'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link otapABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useOtapSupportsInterface(
    config: Omit<UseContractReadConfig<typeof otapABI, 'supportsInterface'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: otapABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
        typeof otapABI,
        'supportsInterface'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link otapABI}__ and `functionName` set to `"symbol"`.
 */
export function useOtapSymbol(config: Omit<UseContractReadConfig<typeof otapABI, 'symbol'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: otapABI, functionName: 'symbol', ...config } as UseContractReadConfig<typeof otapABI, 'symbol'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link otapABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useOtapTokenUri(config: Omit<UseContractReadConfig<typeof otapABI, 'tokenURI'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: otapABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<typeof otapABI, 'tokenURI'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link otapABI}__ and `functionName` set to `"tokenURIs"`.
 */
export function useOtapTokenUrIs(config: Omit<UseContractReadConfig<typeof otapABI, 'tokenURIs'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: otapABI, functionName: 'tokenURIs', ...config } as UseContractReadConfig<typeof otapABI, 'tokenURIs'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link tapOftABI}__.
 */
export function useTapOft(config: Omit<UseContractConfig, 'abi'> = {} as any) {
    return useContract({ abi: tapOftABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__.
 */
export function useTapOftRead<TFunctionName extends string>(
    config: Omit<UseContractReadConfig<typeof tapOftABI, TFunctionName>, 'abi'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, ...config } as UseContractReadConfig<typeof tapOftABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"DEFAULT_PAYLOAD_SIZE_LIMIT"`.
 */
export function useTapOftDefaultPayloadSizeLimit(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'DEFAULT_PAYLOAD_SIZE_LIMIT'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'DEFAULT_PAYLOAD_SIZE_LIMIT', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'DEFAULT_PAYLOAD_SIZE_LIMIT'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"INITIAL_SUPPLY"`.
 */
export function useTapOftInitialSupply(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'INITIAL_SUPPLY'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'INITIAL_SUPPLY', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'INITIAL_SUPPLY'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"NO_EXTRA_GAS"`.
 */
export function useTapOftNoExtraGas(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'NO_EXTRA_GAS'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'NO_EXTRA_GAS', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'NO_EXTRA_GAS'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"PT_SEND"`.
 */
export function useTapOftPtSend(config: Omit<UseContractReadConfig<typeof tapOftABI, 'PT_SEND'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: tapOftABI, functionName: 'PT_SEND', ...config } as UseContractReadConfig<typeof tapOftABI, 'PT_SEND'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"WEEK"`.
 */
export function useTapOftWeek(config: Omit<UseContractReadConfig<typeof tapOftABI, 'WEEK'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: tapOftABI, functionName: 'WEEK', ...config } as UseContractReadConfig<typeof tapOftABI, 'WEEK'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"allowance"`.
 */
export function useTapOftAllowance(config: Omit<UseContractReadConfig<typeof tapOftABI, 'allowance'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: tapOftABI, functionName: 'allowance', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'allowance'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useTapOftBalanceOf(config: Omit<UseContractReadConfig<typeof tapOftABI, 'balanceOf'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: tapOftABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'balanceOf'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"circulatingSupply"`.
 */
export function useTapOftCirculatingSupply(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'circulatingSupply'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'circulatingSupply', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'circulatingSupply'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"decimals"`.
 */
export function useTapOftDecimals(config: Omit<UseContractReadConfig<typeof tapOftABI, 'decimals'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: tapOftABI, functionName: 'decimals', ...config } as UseContractReadConfig<typeof tapOftABI, 'decimals'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"dso_supply"`.
 */
export function useTapOftDsoSupply(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'dso_supply'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'dso_supply', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'dso_supply'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"emissionsStartTime"`.
 */
export function useTapOftEmissionsStartTime(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'emissionsStartTime'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'emissionsStartTime', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'emissionsStartTime'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"estimateSendFee"`.
 */
export function useTapOftEstimateSendFee(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'estimateSendFee'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'estimateSendFee', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'estimateSendFee'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"failedMessages"`.
 */
export function useTapOftFailedMessages(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'failedMessages'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'failedMessages', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'failedMessages'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"getConfig"`.
 */
export function useTapOftGetConfig(config: Omit<UseContractReadConfig<typeof tapOftABI, 'getConfig'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: tapOftABI, functionName: 'getConfig', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'getConfig'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"getCurrentWeekEmission"`.
 */
export function useTapOftGetCurrentWeekEmission(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'getCurrentWeekEmission'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'getCurrentWeekEmission', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'getCurrentWeekEmission'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"getTrustedRemoteAddress"`.
 */
export function useTapOftGetTrustedRemoteAddress(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'getTrustedRemoteAddress'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'getTrustedRemoteAddress', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'getTrustedRemoteAddress'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"governanceChainIdentifier"`.
 */
export function useTapOftGovernanceChainIdentifier(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'governanceChainIdentifier'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'governanceChainIdentifier', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'governanceChainIdentifier'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"isTrustedRemote"`.
 */
export function useTapOftIsTrustedRemote(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'isTrustedRemote'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'isTrustedRemote', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'isTrustedRemote'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"lzEndpoint"`.
 */
export function useTapOftLzEndpoint(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'lzEndpoint'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'lzEndpoint', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'lzEndpoint'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"minDstGasLookup"`.
 */
export function useTapOftMinDstGasLookup(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'minDstGasLookup'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'minDstGasLookup', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'minDstGasLookup'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"mintedInWeek"`.
 */
export function useTapOftMintedInWeek(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'mintedInWeek'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'mintedInWeek', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'mintedInWeek'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"minter"`.
 */
export function useTapOftMinter(config: Omit<UseContractReadConfig<typeof tapOftABI, 'minter'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: tapOftABI, functionName: 'minter', ...config } as UseContractReadConfig<typeof tapOftABI, 'minter'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"name"`.
 */
export function useTapOftName(config: Omit<UseContractReadConfig<typeof tapOftABI, 'name'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: tapOftABI, functionName: 'name', ...config } as UseContractReadConfig<typeof tapOftABI, 'name'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"owner"`.
 */
export function useTapOftOwner(config: Omit<UseContractReadConfig<typeof tapOftABI, 'owner'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: tapOftABI, functionName: 'owner', ...config } as UseContractReadConfig<typeof tapOftABI, 'owner'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"paused"`.
 */
export function useTapOftPaused(config: Omit<UseContractReadConfig<typeof tapOftABI, 'paused'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: tapOftABI, functionName: 'paused', ...config } as UseContractReadConfig<typeof tapOftABI, 'paused'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"payloadSizeLimitLookup"`.
 */
export function useTapOftPayloadSizeLimitLookup(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'payloadSizeLimitLookup'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'payloadSizeLimitLookup', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'payloadSizeLimitLookup'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"precrime"`.
 */
export function useTapOftPrecrime(config: Omit<UseContractReadConfig<typeof tapOftABI, 'precrime'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: tapOftABI, functionName: 'precrime', ...config } as UseContractReadConfig<typeof tapOftABI, 'precrime'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useTapOftSupportsInterface(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'supportsInterface'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'supportsInterface'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"symbol"`.
 */
export function useTapOftSymbol(config: Omit<UseContractReadConfig<typeof tapOftABI, 'symbol'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: tapOftABI, functionName: 'symbol', ...config } as UseContractReadConfig<typeof tapOftABI, 'symbol'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"timestampToWeek"`.
 */
export function useTapOftTimestampToWeek(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'timestampToWeek'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'timestampToWeek', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'timestampToWeek'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"token"`.
 */
export function useTapOftToken(config: Omit<UseContractReadConfig<typeof tapOftABI, 'token'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: tapOftABI, functionName: 'token', ...config } as UseContractReadConfig<typeof tapOftABI, 'token'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useTapOftTotalSupply(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'totalSupply'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'totalSupply'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"trustedRemoteLookup"`.
 */
export function useTapOftTrustedRemoteLookup(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'trustedRemoteLookup'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'trustedRemoteLookup', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'trustedRemoteLookup'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapOftABI}__ and `functionName` set to `"useCustomAdapterParams"`.
 */
export function useTapOftUseCustomAdapterParams(
    config: Omit<UseContractReadConfig<typeof tapOftABI, 'useCustomAdapterParams'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapOftABI, functionName: 'useCustomAdapterParams', ...config } as UseContractReadConfig<
        typeof tapOftABI,
        'useCustomAdapterParams'
    >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link oracleMockABI}__.
 */
export function useOracleMock(config: Omit<UseContractConfig, 'abi'> = {} as any) {
    return useContract({ abi: oracleMockABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMockABI}__.
 */
export function useOracleMockRead<TFunctionName extends string>(
    config: Omit<UseContractReadConfig<typeof oracleMockABI, TFunctionName>, 'abi'> = {} as any,
) {
    return useContractRead({ abi: oracleMockABI, ...config } as UseContractReadConfig<typeof oracleMockABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMockABI}__ and `functionName` set to `"_name"`.
 */
export function useOracleMockName(config: Omit<UseContractReadConfig<typeof oracleMockABI, '_name'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: oracleMockABI, functionName: '_name', ...config } as UseContractReadConfig<
        typeof oracleMockABI,
        '_name'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMockABI}__ and `functionName` set to `"get"`.
 */
export function useOracleMockGet(config: Omit<UseContractReadConfig<typeof oracleMockABI, 'get'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: oracleMockABI, functionName: 'get', ...config } as UseContractReadConfig<typeof oracleMockABI, 'get'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMockABI}__ and `functionName` set to `"mockValue"`.
 */
export function useOracleMockMockValue(
    config: Omit<UseContractReadConfig<typeof oracleMockABI, 'mockValue'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: oracleMockABI, functionName: 'mockValue', ...config } as UseContractReadConfig<
        typeof oracleMockABI,
        'mockValue'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMockABI}__ and `functionName` set to `"peek"`.
 */
export function useOracleMockPeek(config: Omit<UseContractReadConfig<typeof oracleMockABI, 'peek'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: oracleMockABI, functionName: 'peek', ...config } as UseContractReadConfig<typeof oracleMockABI, 'peek'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMockABI}__ and `functionName` set to `"peekSpot"`.
 */
export function useOracleMockPeekSpot(
    config: Omit<UseContractReadConfig<typeof oracleMockABI, 'peekSpot'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: oracleMockABI, functionName: 'peekSpot', ...config } as UseContractReadConfig<
        typeof oracleMockABI,
        'peekSpot'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMockABI}__ and `functionName` set to `"symbol"`.
 */
export function useOracleMockSymbol(
    config: Omit<UseContractReadConfig<typeof oracleMockABI, 'symbol'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: oracleMockABI, functionName: 'symbol', ...config } as UseContractReadConfig<
        typeof oracleMockABI,
        'symbol'
    >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__.
 */
export function useTapiocaOptionBrokerMock(config: Omit<UseContractConfig, 'abi'> = {} as any) {
    return useContract({ abi: tapiocaOptionBrokerMockABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__.
 */
export function useTapiocaOptionBrokerMockRead<TFunctionName extends string>(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerMockABI, TFunctionName>, 'abi'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerMockABI, ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerMockABI,
        TFunctionName
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__ and `functionName` set to `"epoch"`.
 */
export function useTapiocaOptionBrokerMockEpoch(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerMockABI, 'epoch'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerMockABI, functionName: 'epoch', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerMockABI,
        'epoch'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__ and `functionName` set to `"epochTAPValuation"`.
 */
export function useTapiocaOptionBrokerMockEpochTapValuation(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerMockABI, 'epochTAPValuation'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerMockABI, functionName: 'epochTAPValuation', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerMockABI,
        'epochTAPValuation'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__ and `functionName` set to `"getOTCDealDetails"`.
 */
export function useTapiocaOptionBrokerMockGetOtcDealDetails(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerMockABI, 'getOTCDealDetails'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerMockABI, functionName: 'getOTCDealDetails', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerMockABI,
        'getOTCDealDetails'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__ and `functionName` set to `"lastEpochUpdate"`.
 */
export function useTapiocaOptionBrokerMockLastEpochUpdate(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerMockABI, 'lastEpochUpdate'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerMockABI, functionName: 'lastEpochUpdate', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerMockABI,
        'lastEpochUpdate'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__ and `functionName` set to `"oTAP"`.
 */
export function useTapiocaOptionBrokerMockOTap(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerMockABI, 'oTAP'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerMockABI, functionName: 'oTAP', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerMockABI,
        'oTAP'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__ and `functionName` set to `"oTAPCalls"`.
 */
export function useTapiocaOptionBrokerMockOTapCalls(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerMockABI, 'oTAPCalls'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerMockABI, functionName: 'oTAPCalls', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerMockABI,
        'oTAPCalls'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__ and `functionName` set to `"owner"`.
 */
export function useTapiocaOptionBrokerMockOwner(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerMockABI, 'owner'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerMockABI, functionName: 'owner', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerMockABI,
        'owner'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__ and `functionName` set to `"participants"`.
 */
export function useTapiocaOptionBrokerMockParticipants(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerMockABI, 'participants'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerMockABI, functionName: 'participants', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerMockABI,
        'participants'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__ and `functionName` set to `"paused"`.
 */
export function useTapiocaOptionBrokerMockPaused(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerMockABI, 'paused'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerMockABI, functionName: 'paused', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerMockABI,
        'paused'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__ and `functionName` set to `"paymentTokenBeneficiary"`.
 */
export function useTapiocaOptionBrokerMockPaymentTokenBeneficiary(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerMockABI, 'paymentTokenBeneficiary'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerMockABI, functionName: 'paymentTokenBeneficiary', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerMockABI,
        'paymentTokenBeneficiary'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__ and `functionName` set to `"paymentTokens"`.
 */
export function useTapiocaOptionBrokerMockPaymentTokens(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerMockABI, 'paymentTokens'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerMockABI, functionName: 'paymentTokens', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerMockABI,
        'paymentTokens'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useTapiocaOptionBrokerMockPendingOwner(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerMockABI, 'pendingOwner'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerMockABI, functionName: 'pendingOwner', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerMockABI,
        'pendingOwner'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__ and `functionName` set to `"singularityGauges"`.
 */
export function useTapiocaOptionBrokerMockSingularityGauges(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerMockABI, 'singularityGauges'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerMockABI, functionName: 'singularityGauges', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerMockABI,
        'singularityGauges'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__ and `functionName` set to `"tOLP"`.
 */
export function useTapiocaOptionBrokerMockTOlp(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerMockABI, 'tOLP'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerMockABI, functionName: 'tOLP', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerMockABI,
        'tOLP'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__ and `functionName` set to `"tapOFT"`.
 */
export function useTapiocaOptionBrokerMockTapOft(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerMockABI, 'tapOFT'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerMockABI, functionName: 'tapOFT', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerMockABI,
        'tapOFT'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__ and `functionName` set to `"tapOracle"`.
 */
export function useTapiocaOptionBrokerMockTapOracle(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerMockABI, 'tapOracle'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerMockABI, functionName: 'tapOracle', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerMockABI,
        'tapOracle'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__ and `functionName` set to `"tapOracleData"`.
 */
export function useTapiocaOptionBrokerMockTapOracleData(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerMockABI, 'tapOracleData'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerMockABI, functionName: 'tapOracleData', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerMockABI,
        'tapOracleData'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tapiocaOptionBrokerMockABI}__ and `functionName` set to `"twAML"`.
 */
export function useTapiocaOptionBrokerMockTwAml(
    config: Omit<UseContractReadConfig<typeof tapiocaOptionBrokerMockABI, 'twAML'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: tapiocaOptionBrokerMockABI, functionName: 'twAML', ...config } as UseContractReadConfig<
        typeof tapiocaOptionBrokerMockABI,
        'twAML'
    >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20MockABI}__.
 */
export function useErc20Mock(config: Omit<UseContractConfig, 'abi'> = {} as any) {
    return useContract({ abi: erc20MockABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__.
 */
export function useErc20MockRead<TFunctionName extends string>(
    config: Omit<UseContractReadConfig<typeof erc20MockABI, TFunctionName>, 'abi'> = {} as any,
) {
    return useContractRead({ abi: erc20MockABI, ...config } as UseContractReadConfig<typeof erc20MockABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20MockDomainSeparator(
    config: Omit<UseContractReadConfig<typeof erc20MockABI, 'DOMAIN_SEPARATOR'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: erc20MockABI, functionName: 'DOMAIN_SEPARATOR', ...config } as UseContractReadConfig<
        typeof erc20MockABI,
        'DOMAIN_SEPARATOR'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20MockAllowance(
    config: Omit<UseContractReadConfig<typeof erc20MockABI, 'allowance'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: erc20MockABI, functionName: 'allowance', ...config } as UseContractReadConfig<
        typeof erc20MockABI,
        'allowance'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20MockBalanceOf(
    config: Omit<UseContractReadConfig<typeof erc20MockABI, 'balanceOf'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: erc20MockABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
        typeof erc20MockABI,
        'balanceOf'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20MockDecimals(
    config: Omit<UseContractReadConfig<typeof erc20MockABI, 'decimals'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: erc20MockABI, functionName: 'decimals', ...config } as UseContractReadConfig<
        typeof erc20MockABI,
        'decimals'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"name"`.
 */
export function useErc20MockName(config: Omit<UseContractReadConfig<typeof erc20MockABI, 'name'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: erc20MockABI, functionName: 'name', ...config } as UseContractReadConfig<typeof erc20MockABI, 'name'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20MockNonces(config: Omit<UseContractReadConfig<typeof erc20MockABI, 'nonces'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: erc20MockABI, functionName: 'nonces', ...config } as UseContractReadConfig<
        typeof erc20MockABI,
        'nonces'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"owner"`.
 */
export function useErc20MockOwner(config: Omit<UseContractReadConfig<typeof erc20MockABI, 'owner'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: erc20MockABI, functionName: 'owner', ...config } as UseContractReadConfig<typeof erc20MockABI, 'owner'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20MockSymbol(config: Omit<UseContractReadConfig<typeof erc20MockABI, 'symbol'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: erc20MockABI, functionName: 'symbol', ...config } as UseContractReadConfig<
        typeof erc20MockABI,
        'symbol'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20MockTotalSupply(
    config: Omit<UseContractReadConfig<typeof erc20MockABI, 'totalSupply'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: erc20MockABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
        typeof erc20MockABI,
        'totalSupply'
    >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link yieldBoxABI}__.
 */
export function useYieldBox(config: Omit<UseContractConfig, 'abi'> = {} as any) {
    return useContract({ abi: yieldBoxABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__.
 */
export function useYieldBoxRead<TFunctionName extends string>(
    config: Omit<UseContractReadConfig<typeof yieldBoxABI, TFunctionName>, 'abi'> = {} as any,
) {
    return useContractRead({ abi: yieldBoxABI, ...config } as UseContractReadConfig<typeof yieldBoxABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"amountOf"`.
 */
export function useYieldBoxAmountOf(
    config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'amountOf'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'amountOf', ...config } as UseContractReadConfig<
        typeof yieldBoxABI,
        'amountOf'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"assetCount"`.
 */
export function useYieldBoxAssetCount(
    config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'assetCount'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'assetCount', ...config } as UseContractReadConfig<
        typeof yieldBoxABI,
        'assetCount'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"assetTotals"`.
 */
export function useYieldBoxAssetTotals(
    config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'assetTotals'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'assetTotals', ...config } as UseContractReadConfig<
        typeof yieldBoxABI,
        'assetTotals'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"assets"`.
 */
export function useYieldBoxAssets(config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'assets'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'assets', ...config } as UseContractReadConfig<typeof yieldBoxABI, 'assets'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useYieldBoxBalanceOf(
    config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'balanceOf'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
        typeof yieldBoxABI,
        'balanceOf'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useYieldBoxBalanceOfBatch(
    config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'balanceOfBatch'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'balanceOfBatch', ...config } as UseContractReadConfig<
        typeof yieldBoxABI,
        'balanceOfBatch'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"decimals"`.
 */
export function useYieldBoxDecimals(
    config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'decimals'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'decimals', ...config } as UseContractReadConfig<
        typeof yieldBoxABI,
        'decimals'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"ids"`.
 */
export function useYieldBoxIds(config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'ids'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'ids', ...config } as UseContractReadConfig<typeof yieldBoxABI, 'ids'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useYieldBoxIsApprovedForAll(
    config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'isApprovedForAll'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
        typeof yieldBoxABI,
        'isApprovedForAll'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"name"`.
 */
export function useYieldBoxName(config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'name'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'name', ...config } as UseContractReadConfig<typeof yieldBoxABI, 'name'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"nativeTokens"`.
 */
export function useYieldBoxNativeTokens(
    config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'nativeTokens'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'nativeTokens', ...config } as UseContractReadConfig<
        typeof yieldBoxABI,
        'nativeTokens'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useYieldBoxOnErc1155BatchReceived(
    config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'onERC1155BatchReceived'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'onERC1155BatchReceived', ...config } as UseContractReadConfig<
        typeof yieldBoxABI,
        'onERC1155BatchReceived'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useYieldBoxOnErc1155Received(
    config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'onERC1155Received'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'onERC1155Received', ...config } as UseContractReadConfig<
        typeof yieldBoxABI,
        'onERC1155Received'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useYieldBoxOnErc721Received(
    config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'onERC721Received'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'onERC721Received', ...config } as UseContractReadConfig<
        typeof yieldBoxABI,
        'onERC721Received'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"owner"`.
 */
export function useYieldBoxOwner(config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'owner'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'owner', ...config } as UseContractReadConfig<typeof yieldBoxABI, 'owner'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useYieldBoxPendingOwner(
    config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'pendingOwner'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'pendingOwner', ...config } as UseContractReadConfig<
        typeof yieldBoxABI,
        'pendingOwner'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useYieldBoxSupportsInterface(
    config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'supportsInterface'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
        typeof yieldBoxABI,
        'supportsInterface'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"symbol"`.
 */
export function useYieldBoxSymbol(config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'symbol'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'symbol', ...config } as UseContractReadConfig<typeof yieldBoxABI, 'symbol'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"toAmount"`.
 */
export function useYieldBoxToAmount(
    config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'toAmount'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'toAmount', ...config } as UseContractReadConfig<
        typeof yieldBoxABI,
        'toAmount'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"toShare"`.
 */
export function useYieldBoxToShare(config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'toShare'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'toShare', ...config } as UseContractReadConfig<
        typeof yieldBoxABI,
        'toShare'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useYieldBoxTotalSupply(
    config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'totalSupply'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
        typeof yieldBoxABI,
        'totalSupply'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"uri"`.
 */
export function useYieldBoxUri(config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'uri'>, 'abi' | 'functionName'> = {} as any) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'uri', ...config } as UseContractReadConfig<typeof yieldBoxABI, 'uri'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"uriBuilder"`.
 */
export function useYieldBoxUriBuilder(
    config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'uriBuilder'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'uriBuilder', ...config } as UseContractReadConfig<
        typeof yieldBoxABI,
        'uriBuilder'
    >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link yieldBoxABI}__ and `functionName` set to `"wrappedNative"`.
 */
export function useYieldBoxWrappedNative(
    config: Omit<UseContractReadConfig<typeof yieldBoxABI, 'wrappedNative'>, 'abi' | 'functionName'> = {} as any,
) {
    return useContractRead({ abi: yieldBoxABI, functionName: 'wrappedNative', ...config } as UseContractReadConfig<
        typeof yieldBoxABI,
        'wrappedNative'
    >);
}
